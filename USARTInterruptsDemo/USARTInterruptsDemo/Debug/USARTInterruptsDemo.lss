
USARTInterruptsDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000051c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cd  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cf  00000000  00000000  00000c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000373  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000374  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d6  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  74:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_13>:
// not being used but here for completeness
// Wait until a byte has been received and return received data
uint8_t USART_ReceiveByte(){
	while((UCSRA &(1<<RXC)) == 0);
	return UDR;
}
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	8c e2       	ldi	r24, 0x2C	; 44
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	80 81       	ld	r24, Z
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  ae:	20 95       	com	r18
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	2f 91       	pop	r18
  c2:	0f 90       	pop	r0
  c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <USART_Init>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	89 e2       	ldi	r24, 0x29	; 41
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	27 e1       	ldi	r18, 0x17	; 23
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	10 82       	st	Z, r1
  e8:	8a e2       	ldi	r24, 0x2A	; 42
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 e9       	ldi	r18, 0x98	; 152
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <Led_init>:
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	87 e3       	ldi	r24, 0x37	; 55
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <USART_SendByte>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	00 00       	nop
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	80 72       	andi	r24, 0x20	; 32
 136:	99 27       	eor	r25, r25
 138:	89 2b       	or	r24, r25
 13a:	b1 f3       	breq	.-20     	; 0x128 <USART_SendByte+0xe>
 13c:	8c e2       	ldi	r24, 0x2C	; 44
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	29 81       	ldd	r18, Y+1	; 0x01
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:

int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	2e 97       	sbiw	r28, 0x0e	; 14
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	USART_Init();
 162:	0e 94 67 00 	call	0xce	; 0xce <USART_Init>
	sei();
 166:	78 94       	sei
	Led_init();
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <Led_init>
	
	value = 'A';
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTB = ~value;
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 17a:	20 95       	com	r18
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	
	/* Replace with your application code */
	while (1)
	{
		USART_SendByte(value);
 180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 184:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_SendByte>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	aa e7       	ldi	r26, 0x7A	; 122
 18e:	b3 e4       	ldi	r27, 0x43	; 67
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	ab 83       	std	Y+3, r26	; 0x03
 196:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 198:	26 e6       	ldi	r18, 0x66	; 102
 19a:	36 e6       	ldi	r19, 0x66	; 102
 19c:	46 e6       	ldi	r20, 0x66	; 102
 19e:	54 e4       	ldi	r21, 0x44	; 68
 1a0:	69 81       	ldd	r22, Y+1	; 0x01
 1a2:	7a 81       	ldd	r23, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	0e 94 bd 01 	call	0x37a	; 0x37a <__mulsf3>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	af 83       	std	Y+7, r26	; 0x07
 1b6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e8       	ldi	r20, 0x80	; 128
 1be:	5f e3       	ldi	r21, 0x3F	; 63
 1c0:	6d 81       	ldd	r22, Y+5	; 0x05
 1c2:	7e 81       	ldd	r23, Y+6	; 0x06
 1c4:	8f 81       	ldd	r24, Y+7	; 0x07
 1c6:	98 85       	ldd	r25, Y+8	; 0x08
 1c8:	0e 94 37 01 	call	0x26e	; 0x26e <__cmpsf2>
 1cc:	88 23       	and	r24, r24
 1ce:	2c f4       	brge	.+10     	; 0x1da <main+0x8c>
		__ticks = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9a 87       	std	Y+10, r25	; 0x0a
 1d6:	89 87       	std	Y+9, r24	; 0x09
 1d8:	3f c0       	rjmp	.+126    	; 0x258 <main+0x10a>
	else if (__tmp > 65535)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
 1de:	4f e7       	ldi	r20, 0x7F	; 127
 1e0:	57 e4       	ldi	r21, 0x47	; 71
 1e2:	6d 81       	ldd	r22, Y+5	; 0x05
 1e4:	7e 81       	ldd	r23, Y+6	; 0x06
 1e6:	8f 81       	ldd	r24, Y+7	; 0x07
 1e8:	98 85       	ldd	r25, Y+8	; 0x08
 1ea:	0e 94 b8 01 	call	0x370	; 0x370 <__gesf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	4c f5       	brge	.+82     	; 0x244 <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e2       	ldi	r20, 0x20	; 32
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	69 81       	ldd	r22, Y+1	; 0x01
 1fc:	7a 81       	ldd	r23, Y+2	; 0x02
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	9c 81       	ldd	r25, Y+4	; 0x04
 202:	0e 94 bd 01 	call	0x37a	; 0x37a <__mulsf3>
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22
 20a:	bc 01       	movw	r22, r24
 20c:	cd 01       	movw	r24, r26
 20e:	0e 94 3c 01 	call	0x278	; 0x278 <__fixunssfsi>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9a 87       	std	Y+10, r25	; 0x0a
 218:	89 87       	std	Y+9, r24	; 0x09
 21a:	0f c0       	rjmp	.+30     	; 0x23a <main+0xec>
 21c:	8c e5       	ldi	r24, 0x5C	; 92
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9c 87       	std	Y+12, r25	; 0x0c
 222:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 224:	8b 85       	ldd	r24, Y+11	; 0x0b
 226:	9c 85       	ldd	r25, Y+12	; 0x0c
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xda>
 22c:	9c 87       	std	Y+12, r25	; 0x0c
 22e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	89 85       	ldd	r24, Y+9	; 0x09
 232:	9a 85       	ldd	r25, Y+10	; 0x0a
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	9a 87       	std	Y+10, r25	; 0x0a
 238:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23a:	89 85       	ldd	r24, Y+9	; 0x09
 23c:	9a 85       	ldd	r25, Y+10	; 0x0a
 23e:	89 2b       	or	r24, r25
 240:	69 f7       	brne	.-38     	; 0x21c <main+0xce>
 242:	14 c0       	rjmp	.+40     	; 0x26c <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 244:	6d 81       	ldd	r22, Y+5	; 0x05
 246:	7e 81       	ldd	r23, Y+6	; 0x06
 248:	8f 81       	ldd	r24, Y+7	; 0x07
 24a:	98 85       	ldd	r25, Y+8	; 0x08
 24c:	0e 94 3c 01 	call	0x278	; 0x278 <__fixunssfsi>
 250:	dc 01       	movw	r26, r24
 252:	cb 01       	movw	r24, r22
 254:	9a 87       	std	Y+10, r25	; 0x0a
 256:	89 87       	std	Y+9, r24	; 0x09
 258:	89 85       	ldd	r24, Y+9	; 0x09
 25a:	9a 85       	ldd	r25, Y+10	; 0x0a
 25c:	9e 87       	std	Y+14, r25	; 0x0e
 25e:	8d 87       	std	Y+13, r24	; 0x0d
 260:	8d 85       	ldd	r24, Y+13	; 0x0d
 262:	9e 85       	ldd	r25, Y+14	; 0x0e
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x116>
 268:	9e 87       	std	Y+14, r25	; 0x0e
 26a:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(250);
	}
 26c:	89 cf       	rjmp	.-238    	; 0x180 <main+0x32>

0000026e <__cmpsf2>:
 26e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__fp_cmp>
 272:	08 f4       	brcc	.+2      	; 0x276 <__cmpsf2+0x8>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret

00000278 <__fixunssfsi>:
 278:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_splitA>
 27c:	88 f0       	brcs	.+34     	; 0x2a0 <__fixunssfsi+0x28>
 27e:	9f 57       	subi	r25, 0x7F	; 127
 280:	98 f0       	brcs	.+38     	; 0x2a8 <__fixunssfsi+0x30>
 282:	b9 2f       	mov	r27, r25
 284:	99 27       	eor	r25, r25
 286:	b7 51       	subi	r27, 0x17	; 23
 288:	b0 f0       	brcs	.+44     	; 0x2b6 <__fixunssfsi+0x3e>
 28a:	e1 f0       	breq	.+56     	; 0x2c4 <__fixunssfsi+0x4c>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	1a f0       	brmi	.+6      	; 0x29c <__fixunssfsi+0x24>
 296:	ba 95       	dec	r27
 298:	c9 f7       	brne	.-14     	; 0x28c <__fixunssfsi+0x14>
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <__fixunssfsi+0x4c>
 29c:	b1 30       	cpi	r27, 0x01	; 1
 29e:	91 f0       	breq	.+36     	; 0x2c4 <__fixunssfsi+0x4c>
 2a0:	0e 94 b1 01 	call	0x362	; 0x362 <__fp_zero>
 2a4:	b1 e0       	ldi	r27, 0x01	; 1
 2a6:	08 95       	ret
 2a8:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_zero>
 2ac:	67 2f       	mov	r22, r23
 2ae:	78 2f       	mov	r23, r24
 2b0:	88 27       	eor	r24, r24
 2b2:	b8 5f       	subi	r27, 0xF8	; 248
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <__fixunssfsi+0x4c>
 2b6:	b9 3f       	cpi	r27, 0xF9	; 249
 2b8:	cc f3       	brlt	.-14     	; 0x2ac <__fixunssfsi+0x34>
 2ba:	86 95       	lsr	r24
 2bc:	77 95       	ror	r23
 2be:	67 95       	ror	r22
 2c0:	b3 95       	inc	r27
 2c2:	d9 f7       	brne	.-10     	; 0x2ba <__fixunssfsi+0x42>
 2c4:	3e f4       	brtc	.+14     	; 0x2d4 <__fixunssfsi+0x5c>
 2c6:	90 95       	com	r25
 2c8:	80 95       	com	r24
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	8f 4f       	sbci	r24, 0xFF	; 255
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__fp_cmp>:
 2d6:	99 0f       	add	r25, r25
 2d8:	00 08       	sbc	r0, r0
 2da:	55 0f       	add	r21, r21
 2dc:	aa 0b       	sbc	r26, r26
 2de:	e0 e8       	ldi	r30, 0x80	; 128
 2e0:	fe ef       	ldi	r31, 0xFE	; 254
 2e2:	16 16       	cp	r1, r22
 2e4:	17 06       	cpc	r1, r23
 2e6:	e8 07       	cpc	r30, r24
 2e8:	f9 07       	cpc	r31, r25
 2ea:	c0 f0       	brcs	.+48     	; 0x31c <__fp_cmp+0x46>
 2ec:	12 16       	cp	r1, r18
 2ee:	13 06       	cpc	r1, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	98 f0       	brcs	.+38     	; 0x31c <__fp_cmp+0x46>
 2f6:	62 1b       	sub	r22, r18
 2f8:	73 0b       	sbc	r23, r19
 2fa:	84 0b       	sbc	r24, r20
 2fc:	95 0b       	sbc	r25, r21
 2fe:	39 f4       	brne	.+14     	; 0x30e <__fp_cmp+0x38>
 300:	0a 26       	eor	r0, r26
 302:	61 f0       	breq	.+24     	; 0x31c <__fp_cmp+0x46>
 304:	23 2b       	or	r18, r19
 306:	24 2b       	or	r18, r20
 308:	25 2b       	or	r18, r21
 30a:	21 f4       	brne	.+8      	; 0x314 <__fp_cmp+0x3e>
 30c:	08 95       	ret
 30e:	0a 26       	eor	r0, r26
 310:	09 f4       	brne	.+2      	; 0x314 <__fp_cmp+0x3e>
 312:	a1 40       	sbci	r26, 0x01	; 1
 314:	a6 95       	lsr	r26
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	81 1d       	adc	r24, r1
 31a:	81 1d       	adc	r24, r1
 31c:	08 95       	ret

0000031e <__fp_split3>:
 31e:	57 fd       	sbrc	r21, 7
 320:	90 58       	subi	r25, 0x80	; 128
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	59 f0       	breq	.+22     	; 0x33e <__fp_splitA+0x10>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	71 f0       	breq	.+28     	; 0x348 <__fp_splitA+0x1a>
 32c:	47 95       	ror	r20

0000032e <__fp_splitA>:
 32e:	88 0f       	add	r24, r24
 330:	97 fb       	bst	r25, 7
 332:	99 1f       	adc	r25, r25
 334:	61 f0       	breq	.+24     	; 0x34e <__fp_splitA+0x20>
 336:	9f 3f       	cpi	r25, 0xFF	; 255
 338:	79 f0       	breq	.+30     	; 0x358 <__fp_splitA+0x2a>
 33a:	87 95       	ror	r24
 33c:	08 95       	ret
 33e:	12 16       	cp	r1, r18
 340:	13 06       	cpc	r1, r19
 342:	14 06       	cpc	r1, r20
 344:	55 1f       	adc	r21, r21
 346:	f2 cf       	rjmp	.-28     	; 0x32c <__fp_split3+0xe>
 348:	46 95       	lsr	r20
 34a:	f1 df       	rcall	.-30     	; 0x32e <__fp_splitA>
 34c:	08 c0       	rjmp	.+16     	; 0x35e <__fp_splitA+0x30>
 34e:	16 16       	cp	r1, r22
 350:	17 06       	cpc	r1, r23
 352:	18 06       	cpc	r1, r24
 354:	99 1f       	adc	r25, r25
 356:	f1 cf       	rjmp	.-30     	; 0x33a <__fp_splitA+0xc>
 358:	86 95       	lsr	r24
 35a:	71 05       	cpc	r23, r1
 35c:	61 05       	cpc	r22, r1
 35e:	08 94       	sec
 360:	08 95       	ret

00000362 <__fp_zero>:
 362:	e8 94       	clt

00000364 <__fp_szero>:
 364:	bb 27       	eor	r27, r27
 366:	66 27       	eor	r22, r22
 368:	77 27       	eor	r23, r23
 36a:	cb 01       	movw	r24, r22
 36c:	97 f9       	bld	r25, 7
 36e:	08 95       	ret

00000370 <__gesf2>:
 370:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__fp_cmp>
 374:	08 f4       	brcc	.+2      	; 0x378 <__gesf2+0x8>
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	08 95       	ret

0000037a <__mulsf3>:
 37a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__mulsf3x>
 37e:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_round>
 382:	0e 94 33 02 	call	0x466	; 0x466 <__fp_pscA>
 386:	38 f0       	brcs	.+14     	; 0x396 <__mulsf3+0x1c>
 388:	0e 94 3a 02 	call	0x474	; 0x474 <__fp_pscB>
 38c:	20 f0       	brcs	.+8      	; 0x396 <__mulsf3+0x1c>
 38e:	95 23       	and	r25, r21
 390:	11 f0       	breq	.+4      	; 0x396 <__mulsf3+0x1c>
 392:	0c 94 2a 02 	jmp	0x454	; 0x454 <__fp_inf>
 396:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_nan>
 39a:	11 24       	eor	r1, r1
 39c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>

000003a0 <__mulsf3x>:
 3a0:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_split3>
 3a4:	70 f3       	brcs	.-36     	; 0x382 <__mulsf3+0x8>

000003a6 <__mulsf3_pse>:
 3a6:	95 9f       	mul	r25, r21
 3a8:	c1 f3       	breq	.-16     	; 0x39a <__mulsf3+0x20>
 3aa:	95 0f       	add	r25, r21
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	55 1f       	adc	r21, r21
 3b0:	62 9f       	mul	r22, r18
 3b2:	f0 01       	movw	r30, r0
 3b4:	72 9f       	mul	r23, r18
 3b6:	bb 27       	eor	r27, r27
 3b8:	f0 0d       	add	r31, r0
 3ba:	b1 1d       	adc	r27, r1
 3bc:	63 9f       	mul	r22, r19
 3be:	aa 27       	eor	r26, r26
 3c0:	f0 0d       	add	r31, r0
 3c2:	b1 1d       	adc	r27, r1
 3c4:	aa 1f       	adc	r26, r26
 3c6:	64 9f       	mul	r22, r20
 3c8:	66 27       	eor	r22, r22
 3ca:	b0 0d       	add	r27, r0
 3cc:	a1 1d       	adc	r26, r1
 3ce:	66 1f       	adc	r22, r22
 3d0:	82 9f       	mul	r24, r18
 3d2:	22 27       	eor	r18, r18
 3d4:	b0 0d       	add	r27, r0
 3d6:	a1 1d       	adc	r26, r1
 3d8:	62 1f       	adc	r22, r18
 3da:	73 9f       	mul	r23, r19
 3dc:	b0 0d       	add	r27, r0
 3de:	a1 1d       	adc	r26, r1
 3e0:	62 1f       	adc	r22, r18
 3e2:	83 9f       	mul	r24, r19
 3e4:	a0 0d       	add	r26, r0
 3e6:	61 1d       	adc	r22, r1
 3e8:	22 1f       	adc	r18, r18
 3ea:	74 9f       	mul	r23, r20
 3ec:	33 27       	eor	r19, r19
 3ee:	a0 0d       	add	r26, r0
 3f0:	61 1d       	adc	r22, r1
 3f2:	23 1f       	adc	r18, r19
 3f4:	84 9f       	mul	r24, r20
 3f6:	60 0d       	add	r22, r0
 3f8:	21 1d       	adc	r18, r1
 3fa:	82 2f       	mov	r24, r18
 3fc:	76 2f       	mov	r23, r22
 3fe:	6a 2f       	mov	r22, r26
 400:	11 24       	eor	r1, r1
 402:	9f 57       	subi	r25, 0x7F	; 127
 404:	50 40       	sbci	r21, 0x00	; 0
 406:	9a f0       	brmi	.+38     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 408:	f1 f0       	breq	.+60     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 40a:	88 23       	and	r24, r24
 40c:	4a f0       	brmi	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	bb 1f       	adc	r27, r27
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	91 50       	subi	r25, 0x01	; 1
 41c:	50 40       	sbci	r21, 0x00	; 0
 41e:	a9 f7       	brne	.-22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 420:	9e 3f       	cpi	r25, 0xFE	; 254
 422:	51 05       	cpc	r21, r1
 424:	80 f0       	brcs	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 426:	0c 94 2a 02 	jmp	0x454	; 0x454 <__fp_inf>
 42a:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_szero>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	e4 f3       	brlt	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	98 3e       	cpi	r25, 0xE8	; 232
 434:	d4 f3       	brlt	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b7 95       	ror	r27
 43e:	f7 95       	ror	r31
 440:	e7 95       	ror	r30
 442:	9f 5f       	subi	r25, 0xFF	; 255
 444:	c1 f7       	brne	.-16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 446:	fe 2b       	or	r31, r30
 448:	88 0f       	add	r24, r24
 44a:	91 1d       	adc	r25, r1
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret

00000454 <__fp_inf>:
 454:	97 f9       	bld	r25, 7
 456:	9f 67       	ori	r25, 0x7F	; 127
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	08 95       	ret

00000460 <__fp_nan>:
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	80 ec       	ldi	r24, 0xC0	; 192
 464:	08 95       	ret

00000466 <__fp_pscA>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	16 16       	cp	r1, r22
 46c:	17 06       	cpc	r1, r23
 46e:	18 06       	cpc	r1, r24
 470:	09 06       	cpc	r0, r25
 472:	08 95       	ret

00000474 <__fp_pscB>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	14 06       	cpc	r1, r20
 47e:	05 06       	cpc	r0, r21
 480:	08 95       	ret

00000482 <__fp_round>:
 482:	09 2e       	mov	r0, r25
 484:	03 94       	inc	r0
 486:	00 0c       	add	r0, r0
 488:	11 f4       	brne	.+4      	; 0x48e <__fp_round+0xc>
 48a:	88 23       	and	r24, r24
 48c:	52 f0       	brmi	.+20     	; 0x4a2 <__fp_round+0x20>
 48e:	bb 0f       	add	r27, r27
 490:	40 f4       	brcc	.+16     	; 0x4a2 <__fp_round+0x20>
 492:	bf 2b       	or	r27, r31
 494:	11 f4       	brne	.+4      	; 0x49a <__fp_round+0x18>
 496:	60 ff       	sbrs	r22, 0
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <__fp_round+0x20>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
