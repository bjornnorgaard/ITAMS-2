
GsmDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800060  00800060  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084d  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c4  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045a  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000244  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002048  2**0
=======
  0 .text         0000059c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000059c  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800094  00800094  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1b  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061f  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000423  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049e  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ac1  2**0
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< HEAD
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
=======
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
<<<<<<< HEAD
  78:	a0 e6       	ldi	r26, 0x60	; 96
=======
  78:	a4 e9       	ldi	r26, 0x94	; 148
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
<<<<<<< HEAD
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>
=======
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  8a:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

<<<<<<< HEAD
00000092 <__vector_13>:
=======
00000092 <clearDataArray>:

>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
volatile unsigned int index = 0;

<<<<<<< HEAD


ISR(USART_RXC_vect)
{	
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	1f 92       	push	r1
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char value = UDR;
  b2:	8c e2       	ldi	r24, 0x2C	; 44
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	80 81       	ld	r24, Z
  ba:	89 83       	std	Y+1, r24	; 0x01
	data[index] = value;
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  c4:	8e 59       	subi	r24, 0x9E	; 158
  c6:	9f 4f       	sbci	r25, 0xFF	; 255
  c8:	29 81       	ldd	r18, Y+1	; 0x01
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
	index++;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
}
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:
=======
void clearDataArray(unsigned char* dataArray)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <clearDataArray+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <clearDataArray+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
	for (unsigned int i = 0; i< DATA_SIZE;i++)
  a2:	1a 82       	std	Y+2, r1	; 0x02
  a4:	19 82       	std	Y+1, r1	; 0x01
  a6:	11 c0       	rjmp	.+34     	; 0xca <clearDataArray+0x38>
	{
		dataArray[i] = 0;
  a8:	2b 81       	ldd	r18, Y+3	; 0x03
  aa:	3c 81       	ldd	r19, Y+4	; 0x04
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	82 0f       	add	r24, r18
  b2:	93 1f       	adc	r25, r19
  b4:	fc 01       	movw	r30, r24
  b6:	10 82       	st	Z, r1
		index = 0;
  b8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
  bc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
volatile unsigned int index = 0;
volatile unsigned char value;

void clearDataArray(unsigned char* dataArray)
{
	for (unsigned int i = 0; i< DATA_SIZE;i++)
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	c2 97       	sbiw	r24, 0x32	; 50
  d0:	58 f3       	brcs	.-42     	; 0xa8 <clearDataArray+0x16>
	{
		dataArray[i] = 0;
		index = 0;
	}
}
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <__vector_13>:

ISR(USART_RXC_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	clearDataArray(data);
 10c:	86 e9       	ldi	r24, 0x96	; 150
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 49 00 	call	0x92	; 0x92 <clearDataArray>
	value = UDR;
 114:	8c e2       	ldi	r24, 0x2C	; 44
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <value>
	data[index] = value;
 120:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 124:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
 128:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <value>
 12c:	8a 56       	subi	r24, 0x6A	; 106
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	index++;
 134:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 138:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
 142:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511

int main(void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	2e 97       	sbiw	r28, 0x0e	; 14
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
	usartInit();
<<<<<<< HEAD
 110:	0e 94 fe 00 	call	0x1fc	; 0x1fc <usartInit>
	sei();
 114:	78 94       	sei
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	aa e7       	ldi	r26, 0x7A	; 122
 11c:	b4 e4       	ldi	r27, 0x44	; 68
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	ab 83       	std	Y+3, r26	; 0x03
 124:	bc 83       	std	Y+4, r27	; 0x04
=======
 182:	0e 94 48 01 	call	0x290	; 0x290 <usartInit>
	sei();
 186:	78 94       	sei
	
	while (1)
	{
		getAllMessages();
 188:	0e 94 39 01 	call	0x272	; 0x272 <getAllMessages>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	aa ef       	ldi	r26, 0xFA	; 250
 192:	b4 e4       	ldi	r27, 0x44	; 68
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	ab 83       	std	Y+3, r26	; 0x03
 19a:	bc 83       	std	Y+4, r27	; 0x04
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
<<<<<<< HEAD
 126:	26 e6       	ldi	r18, 0x66	; 102
 128:	36 e6       	ldi	r19, 0x66	; 102
 12a:	46 e6       	ldi	r20, 0x66	; 102
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	69 81       	ldd	r22, Y+1	; 0x01
 130:	7a 81       	ldd	r23, Y+2	; 0x02
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 13a:	dc 01       	movw	r26, r24
 13c:	cb 01       	movw	r24, r22
 13e:	8d 83       	std	Y+5, r24	; 0x05
 140:	9e 83       	std	Y+6, r25	; 0x06
 142:	af 83       	std	Y+7, r26	; 0x07
 144:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	40 e8       	ldi	r20, 0x80	; 128
 14c:	5f e3       	ldi	r21, 0x3F	; 63
 14e:	6d 81       	ldd	r22, Y+5	; 0x05
 150:	7e 81       	ldd	r23, Y+6	; 0x06
 152:	8f 81       	ldd	r24, Y+7	; 0x07
 154:	98 85       	ldd	r25, Y+8	; 0x08
 156:	0e 94 2f 01 	call	0x25e	; 0x25e <__cmpsf2>
 15a:	88 23       	and	r24, r24
 15c:	2c f4       	brge	.+10     	; 0x168 <main+0x6c>
		__ticks = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	9a 87       	std	Y+10, r25	; 0x0a
 164:	89 87       	std	Y+9, r24	; 0x09
 166:	3f c0       	rjmp	.+126    	; 0x1e6 <main+0xea>
	else if (__tmp > 65535)
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	3f ef       	ldi	r19, 0xFF	; 255
 16c:	4f e7       	ldi	r20, 0x7F	; 127
 16e:	57 e4       	ldi	r21, 0x47	; 71
 170:	6d 81       	ldd	r22, Y+5	; 0x05
 172:	7e 81       	ldd	r23, Y+6	; 0x06
 174:	8f 81       	ldd	r24, Y+7	; 0x07
 176:	98 85       	ldd	r25, Y+8	; 0x08
 178:	0e 94 b0 01 	call	0x360	; 0x360 <__gesf2>
 17c:	18 16       	cp	r1, r24
 17e:	4c f5       	brge	.+82     	; 0x1d2 <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e2       	ldi	r20, 0x20	; 32
 186:	51 e4       	ldi	r21, 0x41	; 65
 188:	69 81       	ldd	r22, Y+1	; 0x01
 18a:	7a 81       	ldd	r23, Y+2	; 0x02
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	0e 94 b5 01 	call	0x36a	; 0x36a <__mulsf3>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	0e 94 34 01 	call	0x268	; 0x268 <__fixunssfsi>
 1a0:	dc 01       	movw	r26, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	9a 87       	std	Y+10, r25	; 0x0a
 1a6:	89 87       	std	Y+9, r24	; 0x09
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <main+0xcc>
 1aa:	8c e5       	ldi	r24, 0x5C	; 92
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	9c 87       	std	Y+12, r25	; 0x0c
 1b0:	8b 87       	std	Y+11, r24	; 0x0b
=======
 19c:	26 e6       	ldi	r18, 0x66	; 102
 19e:	36 e6       	ldi	r19, 0x66	; 102
 1a0:	46 e6       	ldi	r20, 0x66	; 102
 1a2:	54 e4       	ldi	r21, 0x44	; 68
 1a4:	69 81       	ldd	r22, Y+1	; 0x01
 1a6:	7a 81       	ldd	r23, Y+2	; 0x02
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	9c 81       	ldd	r25, Y+4	; 0x04
 1ac:	0e 94 37 02 	call	0x46e	; 0x46e <__mulsf3>
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	8d 83       	std	Y+5, r24	; 0x05
 1b6:	9e 83       	std	Y+6, r25	; 0x06
 1b8:	af 83       	std	Y+7, r26	; 0x07
 1ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	5f e3       	ldi	r21, 0x3F	; 63
 1c4:	6d 81       	ldd	r22, Y+5	; 0x05
 1c6:	7e 81       	ldd	r23, Y+6	; 0x06
 1c8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ca:	98 85       	ldd	r25, Y+8	; 0x08
 1cc:	0e 94 b1 01 	call	0x362	; 0x362 <__cmpsf2>
 1d0:	88 23       	and	r24, r24
 1d2:	2c f4       	brge	.+10     	; 0x1de <main+0x70>
		__ticks = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9a 87       	std	Y+10, r25	; 0x0a
 1da:	89 87       	std	Y+9, r24	; 0x09
 1dc:	3f c0       	rjmp	.+126    	; 0x25c <main+0xee>
	else if (__tmp > 65535)
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	3f ef       	ldi	r19, 0xFF	; 255
 1e2:	4f e7       	ldi	r20, 0x7F	; 127
 1e4:	57 e4       	ldi	r21, 0x47	; 71
 1e6:	6d 81       	ldd	r22, Y+5	; 0x05
 1e8:	7e 81       	ldd	r23, Y+6	; 0x06
 1ea:	8f 81       	ldd	r24, Y+7	; 0x07
 1ec:	98 85       	ldd	r25, Y+8	; 0x08
 1ee:	0e 94 32 02 	call	0x464	; 0x464 <__gesf2>
 1f2:	18 16       	cp	r1, r24
 1f4:	4c f5       	brge	.+82     	; 0x248 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e2       	ldi	r20, 0x20	; 32
 1fc:	51 e4       	ldi	r21, 0x41	; 65
 1fe:	69 81       	ldd	r22, Y+1	; 0x01
 200:	7a 81       	ldd	r23, Y+2	; 0x02
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	0e 94 37 02 	call	0x46e	; 0x46e <__mulsf3>
 20a:	dc 01       	movw	r26, r24
 20c:	cb 01       	movw	r24, r22
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	0e 94 b6 01 	call	0x36c	; 0x36c <__fixunssfsi>
 216:	dc 01       	movw	r26, r24
 218:	cb 01       	movw	r24, r22
 21a:	9a 87       	std	Y+10, r25	; 0x0a
 21c:	89 87       	std	Y+9, r24	; 0x09
 21e:	0f c0       	rjmp	.+30     	; 0x23e <main+0xd0>
 220:	8c e5       	ldi	r24, 0x5C	; 92
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	9c 87       	std	Y+12, r25	; 0x0c
 226:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
<<<<<<< HEAD
 1b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0xba>
 1ba:	9c 87       	std	Y+12, r25	; 0x0c
 1bc:	8b 87       	std	Y+11, r24	; 0x0b
=======
 228:	8b 85       	ldd	r24, Y+11	; 0x0b
 22a:	9c 85       	ldd	r25, Y+12	; 0x0c
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0xbe>
 230:	9c 87       	std	Y+12, r25	; 0x0c
 232:	8b 87       	std	Y+11, r24	; 0x0b
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
<<<<<<< HEAD
 1be:	89 85       	ldd	r24, Y+9	; 0x09
 1c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	9a 87       	std	Y+10, r25	; 0x0a
 1c6:	89 87       	std	Y+9, r24	; 0x09
=======
 234:	89 85       	ldd	r24, Y+9	; 0x09
 236:	9a 85       	ldd	r25, Y+10	; 0x0a
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	9a 87       	std	Y+10, r25	; 0x0a
 23c:	89 87       	std	Y+9, r24	; 0x09
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
<<<<<<< HEAD
 1c8:	89 85       	ldd	r24, Y+9	; 0x09
 1ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 1cc:	89 2b       	or	r24, r25
 1ce:	69 f7       	brne	.-38     	; 0x1aa <main+0xae>
 1d0:	14 c0       	rjmp	.+40     	; 0x1fa <main+0xfe>
=======
 23e:	89 85       	ldd	r24, Y+9	; 0x09
 240:	9a 85       	ldd	r25, Y+10	; 0x0a
 242:	89 2b       	or	r24, r25
 244:	69 f7       	brne	.-38     	; 0x220 <main+0xb2>
 246:	14 c0       	rjmp	.+40     	; 0x270 <main+0x102>
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
<<<<<<< HEAD
 1d2:	6d 81       	ldd	r22, Y+5	; 0x05
 1d4:	7e 81       	ldd	r23, Y+6	; 0x06
 1d6:	8f 81       	ldd	r24, Y+7	; 0x07
 1d8:	98 85       	ldd	r25, Y+8	; 0x08
 1da:	0e 94 34 01 	call	0x268	; 0x268 <__fixunssfsi>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	9a 87       	std	Y+10, r25	; 0x0a
 1e4:	89 87       	std	Y+9, r24	; 0x09
 1e6:	89 85       	ldd	r24, Y+9	; 0x09
 1e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ea:	9e 87       	std	Y+14, r25	; 0x0e
 1ec:	8d 87       	std	Y+13, r24	; 0x0d
 1ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0xf6>
 1f6:	9e 87       	std	Y+14, r25	; 0x0e
 1f8:	8d 87       	std	Y+13, r24	; 0x0d
	while(1)
	{
		
		//DO STUFF	
		_delay_ms(1000);	
	}
 1fa:	8d cf       	rjmp	.-230    	; 0x116 <main+0x1a>

000001fc <usartInit>:
=======
 248:	6d 81       	ldd	r22, Y+5	; 0x05
 24a:	7e 81       	ldd	r23, Y+6	; 0x06
 24c:	8f 81       	ldd	r24, Y+7	; 0x07
 24e:	98 85       	ldd	r25, Y+8	; 0x08
 250:	0e 94 b6 01 	call	0x36c	; 0x36c <__fixunssfsi>
 254:	dc 01       	movw	r26, r24
 256:	cb 01       	movw	r24, r22
 258:	9a 87       	std	Y+10, r25	; 0x0a
 25a:	89 87       	std	Y+9, r24	; 0x09
 25c:	89 85       	ldd	r24, Y+9	; 0x09
 25e:	9a 85       	ldd	r25, Y+10	; 0x0a
 260:	9e 87       	std	Y+14, r25	; 0x0e
 262:	8d 87       	std	Y+13, r24	; 0x0d
 264:	8d 85       	ldd	r24, Y+13	; 0x0d
 266:	9e 85       	ldd	r25, Y+14	; 0x0e
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0xfa>
 26c:	9e 87       	std	Y+14, r25	; 0x0e
 26e:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(2000);
	}
 270:	8b cf       	rjmp	.-234    	; 0x188 <main+0x1a>

00000272 <getAllMessages>:
	sendString(SEND_PIN);
	sendString(pin);
	sendString(ENTER);
}
void getAllMessages()
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	sendString((unsigned char*)GET_ALL_MESSAGES);
 27a:	88 e8       	ldi	r24, 0x88	; 136
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sendString>
	sendString((unsigned char*)ENTER);	
 282:	8a e6       	ldi	r24, 0x6A	; 106
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 79 01 	call	0x2f2	; 0x2f2 <sendString>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <usartInit>:
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
#define  F_CPU 3686400
#include <util/delay.h>
#define  XTAL 3686400

void usartInit(unsigned char* data)
{
<<<<<<< HEAD
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <usartInit+0x6>
 202:	00 d0       	rcall	.+0      	; 0x204 <usartInit+0x8>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < DATA_SIZE;i++)
 20c:	1a 82       	std	Y+2, r1	; 0x02
 20e:	19 82       	std	Y+1, r1	; 0x01
 210:	0d c0       	rjmp	.+26     	; 0x22c <usartInit+0x30>
	{
		data[i] = 0;
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	9a 81       	ldd	r25, Y+2	; 0x02
 216:	2b 81       	ldd	r18, Y+3	; 0x03
 218:	3c 81       	ldd	r19, Y+4	; 0x04
 21a:	82 0f       	add	r24, r18
 21c:	93 1f       	adc	r25, r19
 21e:	fc 01       	movw	r30, r24
 220:	10 82       	st	Z, r1
=======
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	00 d0       	rcall	.+0      	; 0x296 <usartInit+0x6>
 296:	00 d0       	rcall	.+0      	; 0x298 <usartInit+0x8>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	9c 83       	std	Y+4, r25	; 0x04
 29e:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < DATA_SIZE;i++)
 2a0:	1a 82       	std	Y+2, r1	; 0x02
 2a2:	19 82       	std	Y+1, r1	; 0x01
 2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <usartInit+0x30>
	{
		data[i] = 0;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	2b 81       	ldd	r18, Y+3	; 0x03
 2ac:	3c 81       	ldd	r19, Y+4	; 0x04
 2ae:	82 0f       	add	r24, r18
 2b0:	93 1f       	adc	r25, r19
 2b2:	fc 01       	movw	r30, r24
 2b4:	10 82       	st	Z, r1
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
#include <util/delay.h>
#define  XTAL 3686400

void usartInit(unsigned char* data)
{
	for (int i = 0; i < DATA_SIZE;i++)
<<<<<<< HEAD
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	c2 97       	sbiw	r24, 0x32	; 50
 232:	7c f3       	brlt	.-34     	; 0x212 <usartInit+0x16>
=======
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	9a 83       	std	Y+2, r25	; 0x02
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	c2 97       	sbiw	r24, 0x32	; 50
 2c6:	7c f3       	brlt	.-34     	; 0x2a6 <usartInit+0x16>
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
	{
		data[i] = 0;
	}
	UBRRL = BAUD_PRESCALE;
<<<<<<< HEAD
 234:	89 e2       	ldi	r24, 0x29	; 41
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	27 e1       	ldi	r18, 0x17	; 23
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
	UBRRH = (BAUD_PRESCALE >> 8);
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	10 82       	st	Z, r1
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));
 246:	8a e2       	ldi	r24, 0x2A	; 42
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	28 e9       	ldi	r18, 0x98	; 152
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <__cmpsf2>:
 25e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fp_cmp>
 262:	08 f4       	brcc	.+2      	; 0x266 <__cmpsf2+0x8>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret

00000268 <__fixunssfsi>:
 268:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_splitA>
 26c:	88 f0       	brcs	.+34     	; 0x290 <__fixunssfsi+0x28>
 26e:	9f 57       	subi	r25, 0x7F	; 127
 270:	98 f0       	brcs	.+38     	; 0x298 <__fixunssfsi+0x30>
 272:	b9 2f       	mov	r27, r25
 274:	99 27       	eor	r25, r25
 276:	b7 51       	subi	r27, 0x17	; 23
 278:	b0 f0       	brcs	.+44     	; 0x2a6 <__fixunssfsi+0x3e>
 27a:	e1 f0       	breq	.+56     	; 0x2b4 <__fixunssfsi+0x4c>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	1a f0       	brmi	.+6      	; 0x28c <__fixunssfsi+0x24>
 286:	ba 95       	dec	r27
 288:	c9 f7       	brne	.-14     	; 0x27c <__fixunssfsi+0x14>
 28a:	14 c0       	rjmp	.+40     	; 0x2b4 <__fixunssfsi+0x4c>
 28c:	b1 30       	cpi	r27, 0x01	; 1
 28e:	91 f0       	breq	.+36     	; 0x2b4 <__fixunssfsi+0x4c>
 290:	0e 94 a9 01 	call	0x352	; 0x352 <__fp_zero>
 294:	b1 e0       	ldi	r27, 0x01	; 1
 296:	08 95       	ret
 298:	0c 94 a9 01 	jmp	0x352	; 0x352 <__fp_zero>
 29c:	67 2f       	mov	r22, r23
 29e:	78 2f       	mov	r23, r24
 2a0:	88 27       	eor	r24, r24
 2a2:	b8 5f       	subi	r27, 0xF8	; 248
 2a4:	39 f0       	breq	.+14     	; 0x2b4 <__fixunssfsi+0x4c>
 2a6:	b9 3f       	cpi	r27, 0xF9	; 249
 2a8:	cc f3       	brlt	.-14     	; 0x29c <__fixunssfsi+0x34>
 2aa:	86 95       	lsr	r24
 2ac:	77 95       	ror	r23
 2ae:	67 95       	ror	r22
 2b0:	b3 95       	inc	r27
 2b2:	d9 f7       	brne	.-10     	; 0x2aa <__fixunssfsi+0x42>
 2b4:	3e f4       	brtc	.+14     	; 0x2c4 <__fixunssfsi+0x5c>
 2b6:	90 95       	com	r25
 2b8:	80 95       	com	r24
 2ba:	70 95       	com	r23
 2bc:	61 95       	neg	r22
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	8f 4f       	sbci	r24, 0xFF	; 255
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	08 95       	ret

000002c6 <__fp_cmp>:
 2c6:	99 0f       	add	r25, r25
 2c8:	00 08       	sbc	r0, r0
 2ca:	55 0f       	add	r21, r21
 2cc:	aa 0b       	sbc	r26, r26
 2ce:	e0 e8       	ldi	r30, 0x80	; 128
 2d0:	fe ef       	ldi	r31, 0xFE	; 254
 2d2:	16 16       	cp	r1, r22
 2d4:	17 06       	cpc	r1, r23
 2d6:	e8 07       	cpc	r30, r24
 2d8:	f9 07       	cpc	r31, r25
 2da:	c0 f0       	brcs	.+48     	; 0x30c <__fp_cmp+0x46>
 2dc:	12 16       	cp	r1, r18
 2de:	13 06       	cpc	r1, r19
 2e0:	e4 07       	cpc	r30, r20
 2e2:	f5 07       	cpc	r31, r21
 2e4:	98 f0       	brcs	.+38     	; 0x30c <__fp_cmp+0x46>
 2e6:	62 1b       	sub	r22, r18
 2e8:	73 0b       	sbc	r23, r19
 2ea:	84 0b       	sbc	r24, r20
 2ec:	95 0b       	sbc	r25, r21
 2ee:	39 f4       	brne	.+14     	; 0x2fe <__fp_cmp+0x38>
 2f0:	0a 26       	eor	r0, r26
 2f2:	61 f0       	breq	.+24     	; 0x30c <__fp_cmp+0x46>
 2f4:	23 2b       	or	r18, r19
 2f6:	24 2b       	or	r18, r20
 2f8:	25 2b       	or	r18, r21
 2fa:	21 f4       	brne	.+8      	; 0x304 <__fp_cmp+0x3e>
 2fc:	08 95       	ret
 2fe:	0a 26       	eor	r0, r26
 300:	09 f4       	brne	.+2      	; 0x304 <__fp_cmp+0x3e>
 302:	a1 40       	sbci	r26, 0x01	; 1
 304:	a6 95       	lsr	r26
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	81 1d       	adc	r24, r1
 30a:	81 1d       	adc	r24, r1
 30c:	08 95       	ret

0000030e <__fp_split3>:
 30e:	57 fd       	sbrc	r21, 7
 310:	90 58       	subi	r25, 0x80	; 128
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	59 f0       	breq	.+22     	; 0x32e <__fp_splitA+0x10>
 318:	5f 3f       	cpi	r21, 0xFF	; 255
 31a:	71 f0       	breq	.+28     	; 0x338 <__fp_splitA+0x1a>
 31c:	47 95       	ror	r20

0000031e <__fp_splitA>:
 31e:	88 0f       	add	r24, r24
 320:	97 fb       	bst	r25, 7
 322:	99 1f       	adc	r25, r25
 324:	61 f0       	breq	.+24     	; 0x33e <__fp_splitA+0x20>
 326:	9f 3f       	cpi	r25, 0xFF	; 255
 328:	79 f0       	breq	.+30     	; 0x348 <__fp_splitA+0x2a>
 32a:	87 95       	ror	r24
 32c:	08 95       	ret
 32e:	12 16       	cp	r1, r18
 330:	13 06       	cpc	r1, r19
 332:	14 06       	cpc	r1, r20
 334:	55 1f       	adc	r21, r21
 336:	f2 cf       	rjmp	.-28     	; 0x31c <__fp_split3+0xe>
 338:	46 95       	lsr	r20
 33a:	f1 df       	rcall	.-30     	; 0x31e <__fp_splitA>
 33c:	08 c0       	rjmp	.+16     	; 0x34e <__fp_splitA+0x30>
 33e:	16 16       	cp	r1, r22
 340:	17 06       	cpc	r1, r23
 342:	18 06       	cpc	r1, r24
 344:	99 1f       	adc	r25, r25
 346:	f1 cf       	rjmp	.-30     	; 0x32a <__fp_splitA+0xc>
 348:	86 95       	lsr	r24
 34a:	71 05       	cpc	r23, r1
 34c:	61 05       	cpc	r22, r1
 34e:	08 94       	sec
 350:	08 95       	ret

00000352 <__fp_zero>:
 352:	e8 94       	clt

00000354 <__fp_szero>:
 354:	bb 27       	eor	r27, r27
 356:	66 27       	eor	r22, r22
 358:	77 27       	eor	r23, r23
 35a:	cb 01       	movw	r24, r22
 35c:	97 f9       	bld	r25, 7
 35e:	08 95       	ret

00000360 <__gesf2>:
 360:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fp_cmp>
 364:	08 f4       	brcc	.+2      	; 0x368 <__gesf2+0x8>
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	08 95       	ret

0000036a <__mulsf3>:
 36a:	0e 94 c8 01 	call	0x390	; 0x390 <__mulsf3x>
 36e:	0c 94 39 02 	jmp	0x472	; 0x472 <__fp_round>
 372:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_pscA>
 376:	38 f0       	brcs	.+14     	; 0x386 <__mulsf3+0x1c>
 378:	0e 94 32 02 	call	0x464	; 0x464 <__fp_pscB>
 37c:	20 f0       	brcs	.+8      	; 0x386 <__mulsf3+0x1c>
 37e:	95 23       	and	r25, r21
 380:	11 f0       	breq	.+4      	; 0x386 <__mulsf3+0x1c>
 382:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_inf>
 386:	0c 94 28 02 	jmp	0x450	; 0x450 <__fp_nan>
 38a:	11 24       	eor	r1, r1
 38c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__fp_szero>

00000390 <__mulsf3x>:
 390:	0e 94 87 01 	call	0x30e	; 0x30e <__fp_split3>
 394:	70 f3       	brcs	.-36     	; 0x372 <__mulsf3+0x8>

00000396 <__mulsf3_pse>:
 396:	95 9f       	mul	r25, r21
 398:	c1 f3       	breq	.-16     	; 0x38a <__mulsf3+0x20>
 39a:	95 0f       	add	r25, r21
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	55 1f       	adc	r21, r21
 3a0:	62 9f       	mul	r22, r18
 3a2:	f0 01       	movw	r30, r0
 3a4:	72 9f       	mul	r23, r18
 3a6:	bb 27       	eor	r27, r27
 3a8:	f0 0d       	add	r31, r0
 3aa:	b1 1d       	adc	r27, r1
 3ac:	63 9f       	mul	r22, r19
 3ae:	aa 27       	eor	r26, r26
 3b0:	f0 0d       	add	r31, r0
 3b2:	b1 1d       	adc	r27, r1
 3b4:	aa 1f       	adc	r26, r26
 3b6:	64 9f       	mul	r22, r20
 3b8:	66 27       	eor	r22, r22
 3ba:	b0 0d       	add	r27, r0
 3bc:	a1 1d       	adc	r26, r1
 3be:	66 1f       	adc	r22, r22
 3c0:	82 9f       	mul	r24, r18
 3c2:	22 27       	eor	r18, r18
 3c4:	b0 0d       	add	r27, r0
 3c6:	a1 1d       	adc	r26, r1
 3c8:	62 1f       	adc	r22, r18
 3ca:	73 9f       	mul	r23, r19
 3cc:	b0 0d       	add	r27, r0
 3ce:	a1 1d       	adc	r26, r1
 3d0:	62 1f       	adc	r22, r18
 3d2:	83 9f       	mul	r24, r19
 3d4:	a0 0d       	add	r26, r0
 3d6:	61 1d       	adc	r22, r1
 3d8:	22 1f       	adc	r18, r18
 3da:	74 9f       	mul	r23, r20
 3dc:	33 27       	eor	r19, r19
 3de:	a0 0d       	add	r26, r0
 3e0:	61 1d       	adc	r22, r1
 3e2:	23 1f       	adc	r18, r19
 3e4:	84 9f       	mul	r24, r20
 3e6:	60 0d       	add	r22, r0
 3e8:	21 1d       	adc	r18, r1
 3ea:	82 2f       	mov	r24, r18
 3ec:	76 2f       	mov	r23, r22
 3ee:	6a 2f       	mov	r22, r26
 3f0:	11 24       	eor	r1, r1
 3f2:	9f 57       	subi	r25, 0x7F	; 127
 3f4:	50 40       	sbci	r21, 0x00	; 0
 3f6:	9a f0       	brmi	.+38     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f8:	f1 f0       	breq	.+60     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3fa:	88 23       	and	r24, r24
 3fc:	4a f0       	brmi	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	bb 1f       	adc	r27, r27
 404:	66 1f       	adc	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	88 1f       	adc	r24, r24
 40a:	91 50       	subi	r25, 0x01	; 1
 40c:	50 40       	sbci	r21, 0x00	; 0
 40e:	a9 f7       	brne	.-22     	; 0x3fa <__mulsf3_pse+0x64>
 410:	9e 3f       	cpi	r25, 0xFE	; 254
 412:	51 05       	cpc	r21, r1
 414:	80 f0       	brcs	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 416:	0c 94 22 02 	jmp	0x444	; 0x444 <__fp_inf>
 41a:	0c 94 aa 01 	jmp	0x354	; 0x354 <__fp_szero>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	e4 f3       	brlt	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	98 3e       	cpi	r25, 0xE8	; 232
 424:	d4 f3       	brlt	.-12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 426:	86 95       	lsr	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f7 95       	ror	r31
 430:	e7 95       	ror	r30
 432:	9f 5f       	subi	r25, 0xFF	; 255
 434:	c1 f7       	brne	.-16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 436:	fe 2b       	or	r31, r30
 438:	88 0f       	add	r24, r24
 43a:	91 1d       	adc	r25, r1
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret

00000444 <__fp_inf>:
 444:	97 f9       	bld	r25, 7
 446:	9f 67       	ori	r25, 0x7F	; 127
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	08 95       	ret

00000450 <__fp_nan>:
 450:	9f ef       	ldi	r25, 0xFF	; 255
 452:	80 ec       	ldi	r24, 0xC0	; 192
 454:	08 95       	ret

00000456 <__fp_pscA>:
 456:	00 24       	eor	r0, r0
 458:	0a 94       	dec	r0
 45a:	16 16       	cp	r1, r22
 45c:	17 06       	cpc	r1, r23
 45e:	18 06       	cpc	r1, r24
 460:	09 06       	cpc	r0, r25
 462:	08 95       	ret

00000464 <__fp_pscB>:
 464:	00 24       	eor	r0, r0
 466:	0a 94       	dec	r0
 468:	12 16       	cp	r1, r18
 46a:	13 06       	cpc	r1, r19
 46c:	14 06       	cpc	r1, r20
 46e:	05 06       	cpc	r0, r21
 470:	08 95       	ret

00000472 <__fp_round>:
 472:	09 2e       	mov	r0, r25
 474:	03 94       	inc	r0
 476:	00 0c       	add	r0, r0
 478:	11 f4       	brne	.+4      	; 0x47e <__fp_round+0xc>
 47a:	88 23       	and	r24, r24
 47c:	52 f0       	brmi	.+20     	; 0x492 <__fp_round+0x20>
 47e:	bb 0f       	add	r27, r27
 480:	40 f4       	brcc	.+16     	; 0x492 <__fp_round+0x20>
 482:	bf 2b       	or	r27, r31
 484:	11 f4       	brne	.+4      	; 0x48a <__fp_round+0x18>
 486:	60 ff       	sbrs	r22, 0
 488:	04 c0       	rjmp	.+8      	; 0x492 <__fp_round+0x20>
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	8f 4f       	sbci	r24, 0xFF	; 255
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
=======
 2c8:	89 e2       	ldi	r24, 0x29	; 41
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	27 e1       	ldi	r18, 0x17	; 23
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
	UBRRH = (BAUD_PRESCALE >> 8);
 2d2:	80 e4       	ldi	r24, 0x40	; 64
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	fc 01       	movw	r30, r24
 2d8:	10 82       	st	Z, r1
	UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));
 2da:	8a e2       	ldi	r24, 0x2A	; 42
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	28 e9       	ldi	r18, 0x98	; 152
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <sendString>:

void sendString(unsigned char* s)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <sendString+0x6>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	9a 83       	std	Y+2, r25	; 0x02
 2fe:	89 83       	std	Y+1, r24	; 0x01
	// Repeat until zero-termination
	while (*s != 0)
 300:	0b c0       	rjmp	.+22     	; 0x318 <sendString+0x26>
	{
		// Send the character pointed to by "s"
		sendByte(*s);
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	9a 81       	ldd	r25, Y+2	; 0x02
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	0e 94 97 01 	call	0x32e	; 0x32e <sendByte>
		// Advance the pointer one step
		s++;
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	9a 83       	std	Y+2, r25	; 0x02
 316:	89 83       	std	Y+1, r24	; 0x01
}

void sendString(unsigned char* s)
{
	// Repeat until zero-termination
	while (*s != 0)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	fc 01       	movw	r30, r24
 31e:	80 81       	ld	r24, Z
 320:	88 23       	and	r24, r24
 322:	79 f7       	brne	.-34     	; 0x302 <sendString+0x10>
		// Send the character pointed to by "s"
		sendByte(*s);
		// Advance the pointer one step
		s++;
	}
}
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <sendByte>:


void sendByte(unsigned char u8Data)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	1f 92       	push	r1
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	89 83       	std	Y+1, r24	; 0x01
	// Wait until last byte has been transmitted
	while((UCSRA &(1<<UDRE)) == 0);
 33a:	00 00       	nop
 33c:	8b e2       	ldi	r24, 0x2B	; 43
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	80 72       	andi	r24, 0x20	; 32
 34a:	99 27       	eor	r25, r25
 34c:	89 2b       	or	r24, r25
 34e:	b1 f3       	breq	.-20     	; 0x33c <sendByte+0xe>

	// Transmit data
	UDR = u8Data;
 350:	8c e2       	ldi	r24, 0x2C	; 44
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	fc 01       	movw	r30, r24
 358:	20 83       	st	Z, r18
}
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <__cmpsf2>:
 362:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__fp_cmp>
 366:	08 f4       	brcc	.+2      	; 0x36a <__cmpsf2+0x8>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret

0000036c <__fixunssfsi>:
 36c:	0e 94 11 02 	call	0x422	; 0x422 <__fp_splitA>
 370:	88 f0       	brcs	.+34     	; 0x394 <__fixunssfsi+0x28>
 372:	9f 57       	subi	r25, 0x7F	; 127
 374:	98 f0       	brcs	.+38     	; 0x39c <__fixunssfsi+0x30>
 376:	b9 2f       	mov	r27, r25
 378:	99 27       	eor	r25, r25
 37a:	b7 51       	subi	r27, 0x17	; 23
 37c:	b0 f0       	brcs	.+44     	; 0x3aa <__fixunssfsi+0x3e>
 37e:	e1 f0       	breq	.+56     	; 0x3b8 <__fixunssfsi+0x4c>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	1a f0       	brmi	.+6      	; 0x390 <__fixunssfsi+0x24>
 38a:	ba 95       	dec	r27
 38c:	c9 f7       	brne	.-14     	; 0x380 <__fixunssfsi+0x14>
 38e:	14 c0       	rjmp	.+40     	; 0x3b8 <__fixunssfsi+0x4c>
 390:	b1 30       	cpi	r27, 0x01	; 1
 392:	91 f0       	breq	.+36     	; 0x3b8 <__fixunssfsi+0x4c>
 394:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_zero>
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	08 95       	ret
 39c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_zero>
 3a0:	67 2f       	mov	r22, r23
 3a2:	78 2f       	mov	r23, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	b8 5f       	subi	r27, 0xF8	; 248
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <__fixunssfsi+0x4c>
 3aa:	b9 3f       	cpi	r27, 0xF9	; 249
 3ac:	cc f3       	brlt	.-14     	; 0x3a0 <__fixunssfsi+0x34>
 3ae:	86 95       	lsr	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b3 95       	inc	r27
 3b6:	d9 f7       	brne	.-10     	; 0x3ae <__fixunssfsi+0x42>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__fixunssfsi+0x5c>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__fp_cmp>:
 3ca:	99 0f       	add	r25, r25
 3cc:	00 08       	sbc	r0, r0
 3ce:	55 0f       	add	r21, r21
 3d0:	aa 0b       	sbc	r26, r26
 3d2:	e0 e8       	ldi	r30, 0x80	; 128
 3d4:	fe ef       	ldi	r31, 0xFE	; 254
 3d6:	16 16       	cp	r1, r22
 3d8:	17 06       	cpc	r1, r23
 3da:	e8 07       	cpc	r30, r24
 3dc:	f9 07       	cpc	r31, r25
 3de:	c0 f0       	brcs	.+48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e0:	12 16       	cp	r1, r18
 3e2:	13 06       	cpc	r1, r19
 3e4:	e4 07       	cpc	r30, r20
 3e6:	f5 07       	cpc	r31, r21
 3e8:	98 f0       	brcs	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ea:	62 1b       	sub	r22, r18
 3ec:	73 0b       	sbc	r23, r19
 3ee:	84 0b       	sbc	r24, r20
 3f0:	95 0b       	sbc	r25, r21
 3f2:	39 f4       	brne	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	0a 26       	eor	r0, r26
 3f6:	61 f0       	breq	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	23 2b       	or	r18, r19
 3fa:	24 2b       	or	r18, r20
 3fc:	25 2b       	or	r18, r21
 3fe:	21 f4       	brne	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	08 95       	ret
 402:	0a 26       	eor	r0, r26
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	a1 40       	sbci	r26, 0x01	; 1
 408:	a6 95       	lsr	r26
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	81 1d       	adc	r24, r1
 40e:	81 1d       	adc	r24, r1
 410:	08 95       	ret

00000412 <__fp_split3>:
 412:	57 fd       	sbrc	r21, 7
 414:	90 58       	subi	r25, 0x80	; 128
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	59 f0       	breq	.+22     	; 0x432 <__fp_splitA+0x10>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	71 f0       	breq	.+28     	; 0x43c <__fp_splitA+0x1a>
 420:	47 95       	ror	r20

00000422 <__fp_splitA>:
 422:	88 0f       	add	r24, r24
 424:	97 fb       	bst	r25, 7
 426:	99 1f       	adc	r25, r25
 428:	61 f0       	breq	.+24     	; 0x442 <__fp_splitA+0x20>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	79 f0       	breq	.+30     	; 0x44c <__fp_splitA+0x2a>
 42e:	87 95       	ror	r24
 430:	08 95       	ret
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	55 1f       	adc	r21, r21
 43a:	f2 cf       	rjmp	.-28     	; 0x420 <__fp_split3+0xe>
 43c:	46 95       	lsr	r20
 43e:	f1 df       	rcall	.-30     	; 0x422 <__fp_splitA>
 440:	08 c0       	rjmp	.+16     	; 0x452 <__fp_splitA+0x30>
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	99 1f       	adc	r25, r25
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <__fp_splitA+0xc>
 44c:	86 95       	lsr	r24
 44e:	71 05       	cpc	r23, r1
 450:	61 05       	cpc	r22, r1
 452:	08 94       	sec
 454:	08 95       	ret

00000456 <__fp_zero>:
 456:	e8 94       	clt

00000458 <__fp_szero>:
 458:	bb 27       	eor	r27, r27
 45a:	66 27       	eor	r22, r22
 45c:	77 27       	eor	r23, r23
 45e:	cb 01       	movw	r24, r22
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__gesf2>:
 464:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__fp_cmp>
 468:	08 f4       	brcc	.+2      	; 0x46c <__gesf2+0x8>
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	08 95       	ret

0000046e <__mulsf3>:
 46e:	0e 94 4a 02 	call	0x494	; 0x494 <__mulsf3x>
 472:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_round>
 476:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscA>
 47a:	38 f0       	brcs	.+14     	; 0x48a <__mulsf3+0x1c>
 47c:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscB>
 480:	20 f0       	brcs	.+8      	; 0x48a <__mulsf3+0x1c>
 482:	95 23       	and	r25, r21
 484:	11 f0       	breq	.+4      	; 0x48a <__mulsf3+0x1c>
 486:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_inf>
 48a:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_nan>
 48e:	11 24       	eor	r1, r1
 490:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>

00000494 <__mulsf3x>:
 494:	0e 94 09 02 	call	0x412	; 0x412 <__fp_split3>
 498:	70 f3       	brcs	.-36     	; 0x476 <__mulsf3+0x8>

0000049a <__mulsf3_pse>:
 49a:	95 9f       	mul	r25, r21
 49c:	c1 f3       	breq	.-16     	; 0x48e <__mulsf3+0x20>
 49e:	95 0f       	add	r25, r21
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	55 1f       	adc	r21, r21
 4a4:	62 9f       	mul	r22, r18
 4a6:	f0 01       	movw	r30, r0
 4a8:	72 9f       	mul	r23, r18
 4aa:	bb 27       	eor	r27, r27
 4ac:	f0 0d       	add	r31, r0
 4ae:	b1 1d       	adc	r27, r1
 4b0:	63 9f       	mul	r22, r19
 4b2:	aa 27       	eor	r26, r26
 4b4:	f0 0d       	add	r31, r0
 4b6:	b1 1d       	adc	r27, r1
 4b8:	aa 1f       	adc	r26, r26
 4ba:	64 9f       	mul	r22, r20
 4bc:	66 27       	eor	r22, r22
 4be:	b0 0d       	add	r27, r0
 4c0:	a1 1d       	adc	r26, r1
 4c2:	66 1f       	adc	r22, r22
 4c4:	82 9f       	mul	r24, r18
 4c6:	22 27       	eor	r18, r18
 4c8:	b0 0d       	add	r27, r0
 4ca:	a1 1d       	adc	r26, r1
 4cc:	62 1f       	adc	r22, r18
 4ce:	73 9f       	mul	r23, r19
 4d0:	b0 0d       	add	r27, r0
 4d2:	a1 1d       	adc	r26, r1
 4d4:	62 1f       	adc	r22, r18
 4d6:	83 9f       	mul	r24, r19
 4d8:	a0 0d       	add	r26, r0
 4da:	61 1d       	adc	r22, r1
 4dc:	22 1f       	adc	r18, r18
 4de:	74 9f       	mul	r23, r20
 4e0:	33 27       	eor	r19, r19
 4e2:	a0 0d       	add	r26, r0
 4e4:	61 1d       	adc	r22, r1
 4e6:	23 1f       	adc	r18, r19
 4e8:	84 9f       	mul	r24, r20
 4ea:	60 0d       	add	r22, r0
 4ec:	21 1d       	adc	r18, r1
 4ee:	82 2f       	mov	r24, r18
 4f0:	76 2f       	mov	r23, r22
 4f2:	6a 2f       	mov	r22, r26
 4f4:	11 24       	eor	r1, r1
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	9a f0       	brmi	.+38     	; 0x522 <__mulsf3_pse+0x88>
 4fc:	f1 f0       	breq	.+60     	; 0x53a <__mulsf3_pse+0xa0>
 4fe:	88 23       	and	r24, r24
 500:	4a f0       	brmi	.+18     	; 0x514 <__mulsf3_pse+0x7a>
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	bb 1f       	adc	r27, r27
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	a9 f7       	brne	.-22     	; 0x4fe <__mulsf3_pse+0x64>
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	51 05       	cpc	r21, r1
 518:	80 f0       	brcs	.+32     	; 0x53a <__mulsf3_pse+0xa0>
 51a:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_inf>
 51e:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	e4 f3       	brlt	.-8      	; 0x51e <__mulsf3_pse+0x84>
 526:	98 3e       	cpi	r25, 0xE8	; 232
 528:	d4 f3       	brlt	.-12     	; 0x51e <__mulsf3_pse+0x84>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b7 95       	ror	r27
 532:	f7 95       	ror	r31
 534:	e7 95       	ror	r30
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	c1 f7       	brne	.-16     	; 0x52a <__mulsf3_pse+0x90>
 53a:	fe 2b       	or	r31, r30
 53c:	88 0f       	add	r24, r24
 53e:	91 1d       	adc	r25, r1
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__fp_inf>:
 548:	97 f9       	bld	r25, 7
 54a:	9f 67       	ori	r25, 0x7F	; 127
 54c:	80 e8       	ldi	r24, 0x80	; 128
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	08 95       	ret

00000554 <__fp_nan>:
 554:	9f ef       	ldi	r25, 0xFF	; 255
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	08 95       	ret

0000055a <__fp_pscA>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	09 06       	cpc	r0, r25
 566:	08 95       	ret

00000568 <__fp_pscB>:
 568:	00 24       	eor	r0, r0
 56a:	0a 94       	dec	r0
 56c:	12 16       	cp	r1, r18
 56e:	13 06       	cpc	r1, r19
 570:	14 06       	cpc	r1, r20
 572:	05 06       	cpc	r0, r21
 574:	08 95       	ret

00000576 <__fp_round>:
 576:	09 2e       	mov	r0, r25
 578:	03 94       	inc	r0
 57a:	00 0c       	add	r0, r0
 57c:	11 f4       	brne	.+4      	; 0x582 <__fp_round+0xc>
 57e:	88 23       	and	r24, r24
 580:	52 f0       	brmi	.+20     	; 0x596 <__fp_round+0x20>
 582:	bb 0f       	add	r27, r27
 584:	40 f4       	brcc	.+16     	; 0x596 <__fp_round+0x20>
 586:	bf 2b       	or	r27, r31
 588:	11 f4       	brne	.+4      	; 0x58e <__fp_round+0x18>
 58a:	60 ff       	sbrs	r22, 0
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__fp_round+0x20>
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
>>>>>>> 2b63572f771842cb97e36b3b4b59c81017f20511
