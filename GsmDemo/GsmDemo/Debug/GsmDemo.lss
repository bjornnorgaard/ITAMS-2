
GsmDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ade  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000ade  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1a  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ae  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00002b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043e  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049c  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000036ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  7a:	0c 94 6d 05 	jmp	0xada	; 0xada <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initLEDport>:
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
		// Turn OFF the actual LED (the rest are unchanged)
		PORTC = PORTC | mask;
	}
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	82 34       	cpi	r24, 0x42	; 66
  96:	91 05       	cpc	r25, r1
  98:	c9 f0       	breq	.+50     	; 0xcc <initLEDport+0x4a>
  9a:	83 34       	cpi	r24, 0x43	; 67
  9c:	91 05       	cpc	r25, r1
  9e:	24 f4       	brge	.+8      	; 0xa8 <initLEDport+0x26>
  a0:	81 34       	cpi	r24, 0x41	; 65
  a2:	91 05       	cpc	r25, r1
  a4:	41 f0       	breq	.+16     	; 0xb6 <initLEDport+0x34>
  a6:	28 c0       	rjmp	.+80     	; 0xf8 <initLEDport+0x76>
  a8:	83 34       	cpi	r24, 0x43	; 67
  aa:	91 05       	cpc	r25, r1
  ac:	d1 f0       	breq	.+52     	; 0xe2 <initLEDport+0x60>
  ae:	84 34       	cpi	r24, 0x44	; 68
  b0:	91 05       	cpc	r25, r1
  b2:	71 f1       	breq	.+92     	; 0x110 <initLEDport+0x8e>
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <initLEDport+0x76>
  b6:	8a e3       	ldi	r24, 0x3A	; 58
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	23 c0       	rjmp	.+70     	; 0x112 <initLEDport+0x90>
  cc:	87 e3       	ldi	r24, 0x37	; 55
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	18 c0       	rjmp	.+48     	; 0x112 <initLEDport+0x90>
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
  f6:	0d c0       	rjmp	.+26     	; 0x112 <initLEDport+0x90>
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	00 00       	nop
 10e:	01 c0       	rjmp	.+2      	; 0x112 <initLEDport+0x90>
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <toggleLED>:

void toggleLED(unsigned char led_nr)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <toggleLED+0x6>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	8a 83       	std	Y+2, r24	; 0x02
	// Local variable
	unsigned char mask;
	// We only have to do anything, if led_nr < 8
	if (led_nr <= MAX_LED_NR)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	a8 f4       	brcc	.+42     	; 0x156 <toggleLED+0x3c>
	{
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <toggleLED+0x22>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <toggleLED+0x1e>
 140:	89 83       	std	Y+1, r24	; 0x01
		// Toggle the actual LED (the rest are unchanged)
		PORTC = PORTC ^ mask;
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	25 e3       	ldi	r18, 0x35	; 53
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	30 81       	ld	r19, Z
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	23 27       	eor	r18, r19
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	}
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <main>:
#include "uartDriver.h"
#include "ledDriver.h"
#include "MC35Commands.h"

int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	ce 57       	subi	r28, 0x7E	; 126
 16a:	d1 09       	sbc	r29, r1
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
	initializeUART(9600, 8);
 176:	48 e0       	ldi	r20, 0x08	; 8
 178:	60 e8       	ldi	r22, 0x80	; 128
 17a:	75 e2       	ldi	r23, 0x25	; 37
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 68 02 	call	0x4d0	; 0x4d0 <initializeUART>
	initLEDport();
 184:	0e 94 41 00 	call	0x82	; 0x82 <initLEDport>
	char response[50];
	char msg[50] = "This is a message for you ";
 188:	8b e1       	ldi	r24, 0x1B	; 27
 18a:	e0 e6       	ldi	r30, 0x60	; 96
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	de 01       	movw	r26, r28
 190:	af 5b       	subi	r26, 0xBF	; 191
 192:	bf 4f       	sbci	r27, 0xFF	; 255
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x34>
 19c:	ce 01       	movw	r24, r28
 19e:	84 5a       	subi	r24, 0xA4	; 164
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	27 e1       	ldi	r18, 0x17	; 23
 1a4:	fc 01       	movw	r30, r24
 1a6:	32 2f       	mov	r19, r18
 1a8:	11 92       	st	Z+, r1
 1aa:	3a 95       	dec	r19
 1ac:	e9 f7       	brne	.-6      	; 0x1a8 <main+0x48>
	char num[12] = "24464105";
 1ae:	ce 01       	movw	r24, r28
 1b0:	8d 58       	subi	r24, 0x8D	; 141
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	29 e0       	ldi	r18, 0x09	; 9
 1b6:	e2 e9       	ldi	r30, 0x92	; 146
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	dc 01       	movw	r26, r24
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	2a 95       	dec	r18
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x5c>
 1c4:	fc 01       	movw	r30, r24
 1c6:	11 86       	std	Z+9, r1	; 0x09
 1c8:	12 86       	std	Z+10, r1	; 0x0a
 1ca:	13 86       	std	Z+11, r1	; 0x0b
	sendSms(msg, num);
 1cc:	9e 01       	movw	r18, r28
 1ce:	2d 58       	subi	r18, 0x8D	; 141
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	ce 01       	movw	r24, r28
 1d4:	8f 5b       	subi	r24, 0xBF	; 191
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	b9 01       	movw	r22, r18
 1da:	0e 94 96 01 	call	0x32c	; 0x32c <sendSms>
	getMessages(response);
 1de:	ce 01       	movw	r24, r28
 1e0:	0f 96       	adiw	r24, 0x0f	; 15
 1e2:	0e 94 bd 01 	call	0x37a	; 0x37a <getMessages>
	sendSms(response, num);
 1e6:	9e 01       	movw	r18, r28
 1e8:	2d 58       	subi	r18, 0x8D	; 141
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	ce 01       	movw	r24, r28
 1ee:	0f 96       	adiw	r24, 0x0f	; 15
 1f0:	b9 01       	movw	r22, r18
 1f2:	0e 94 96 01 	call	0x32c	; 0x32c <sendSms>

	while (1)
	{
		toggleLED(7);
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	0e 94 8d 00 	call	0x11a	; 0x11a <toggleLED>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	aa ef       	ldi	r26, 0xFA	; 250
 202:	b3 e4       	ldi	r27, 0x43	; 67
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	ab 83       	std	Y+3, r26	; 0x03
 20a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 20c:	26 e6       	ldi	r18, 0x66	; 102
 20e:	36 e6       	ldi	r19, 0x66	; 102
 210:	46 e6       	ldi	r20, 0x66	; 102
 212:	54 e4       	ldi	r21, 0x44	; 68
 214:	69 81       	ldd	r22, Y+1	; 0x01
 216:	7a 81       	ldd	r23, Y+2	; 0x02
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 220:	dc 01       	movw	r26, r24
 222:	cb 01       	movw	r24, r22
 224:	8d 83       	std	Y+5, r24	; 0x05
 226:	9e 83       	std	Y+6, r25	; 0x06
 228:	af 83       	std	Y+7, r26	; 0x07
 22a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e8       	ldi	r20, 0x80	; 128
 232:	5f e3       	ldi	r21, 0x3F	; 63
 234:	6d 81       	ldd	r22, Y+5	; 0x05
 236:	7e 81       	ldd	r23, Y+6	; 0x06
 238:	8f 81       	ldd	r24, Y+7	; 0x07
 23a:	98 85       	ldd	r25, Y+8	; 0x08
 23c:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 240:	88 23       	and	r24, r24
 242:	2c f4       	brge	.+10     	; 0x24e <main+0xee>
		__ticks = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9a 87       	std	Y+10, r25	; 0x0a
 24a:	89 87       	std	Y+9, r24	; 0x09
 24c:	3f c0       	rjmp	.+126    	; 0x2cc <main+0x16c>
	else if (__tmp > 65535)
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	3f ef       	ldi	r19, 0xFF	; 255
 252:	4f e7       	ldi	r20, 0x7F	; 127
 254:	57 e4       	ldi	r21, 0x47	; 71
 256:	6d 81       	ldd	r22, Y+5	; 0x05
 258:	7e 81       	ldd	r23, Y+6	; 0x06
 25a:	8f 81       	ldd	r24, Y+7	; 0x07
 25c:	98 85       	ldd	r25, Y+8	; 0x08
 25e:	0e 94 b1 04 	call	0x962	; 0x962 <__gesf2>
 262:	18 16       	cp	r1, r24
 264:	4c f5       	brge	.+82     	; 0x2b8 <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e2       	ldi	r20, 0x20	; 32
 26c:	51 e4       	ldi	r21, 0x41	; 65
 26e:	69 81       	ldd	r22, Y+1	; 0x01
 270:	7a 81       	ldd	r23, Y+2	; 0x02
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	bc 01       	movw	r22, r24
 280:	cd 01       	movw	r24, r26
 282:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 286:	dc 01       	movw	r26, r24
 288:	cb 01       	movw	r24, r22
 28a:	9a 87       	std	Y+10, r25	; 0x0a
 28c:	89 87       	std	Y+9, r24	; 0x09
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <main+0x14e>
 290:	8c e5       	ldi	r24, 0x5C	; 92
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9c 87       	std	Y+12, r25	; 0x0c
 296:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 298:	8b 85       	ldd	r24, Y+11	; 0x0b
 29a:	9c 85       	ldd	r25, Y+12	; 0x0c
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x13c>
 2a0:	9c 87       	std	Y+12, r25	; 0x0c
 2a2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a4:	89 85       	ldd	r24, Y+9	; 0x09
 2a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	9a 87       	std	Y+10, r25	; 0x0a
 2ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	89 85       	ldd	r24, Y+9	; 0x09
 2b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 2b2:	89 2b       	or	r24, r25
 2b4:	69 f7       	brne	.-38     	; 0x290 <main+0x130>
 2b6:	14 c0       	rjmp	.+40     	; 0x2e0 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ba:	7e 81       	ldd	r23, Y+6	; 0x06
 2bc:	8f 81       	ldd	r24, Y+7	; 0x07
 2be:	98 85       	ldd	r25, Y+8	; 0x08
 2c0:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 2c4:	dc 01       	movw	r26, r24
 2c6:	cb 01       	movw	r24, r22
 2c8:	9a 87       	std	Y+10, r25	; 0x0a
 2ca:	89 87       	std	Y+9, r24	; 0x09
 2cc:	89 85       	ldd	r24, Y+9	; 0x09
 2ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 2d0:	9e 87       	std	Y+14, r25	; 0x0e
 2d2:	8d 87       	std	Y+13, r24	; 0x0d
 2d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x178>
 2dc:	9e 87       	std	Y+14, r25	; 0x0e
 2de:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(500);
	}
 2e0:	8a cf       	rjmp	.-236    	; 0x1f6 <main+0x96>

000002e2 <setTextMode>:
#define CTRL_Z 26
#include <util/delay.h>
#include "MC35Commands.h"

void setTextMode()
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
	sendString("AT+CMGF=1");
 2ea:	8e e9       	ldi	r24, 0x9E	; 158
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	sendString("\r\n");
 2f2:	88 ea       	ldi	r24, 0xA8	; 168
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <enableEcho>:

void enableEcho()
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	sendString("ATE1");
 308:	8b ea       	ldi	r24, 0xAB	; 171
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <disableEcho>:

void disableEcho()
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	sendString("ATE0");
 31e:	80 eb       	ldi	r24, 0xB0	; 176
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <sendSms>:

void sendSms(char* message, char* phoneNumber)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <sendSms+0x6>
 332:	00 d0       	rcall	.+0      	; 0x334 <sendSms+0x8>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	7c 83       	std	Y+4, r23	; 0x04
 33e:	6b 83       	std	Y+3, r22	; 0x03
	setTextMode();
 340:	0e 94 71 01 	call	0x2e2	; 0x2e2 <setTextMode>
	sendString("AT+CMGS=");
 344:	85 eb       	ldi	r24, 0xB5	; 181
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	sendString(phoneNumber);
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	9c 81       	ldd	r25, Y+4	; 0x04
 350:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	sendString("\r\n");
 354:	88 ea       	ldi	r24, 0xA8	; 168
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	sendString(message);
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	sendChar(CTRL_Z);
 364:	8a e1       	ldi	r24, 0x1A	; 26
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 00 03 	call	0x600	; 0x600 <sendChar>
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <getMessages>:

void getMessages(char* response)
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	62 97       	sbiw	r28, 0x12	; 18
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	9a 8b       	std	Y+18, r25	; 0x12
 394:	89 8b       	std	Y+17, r24	; 0x11
	disableEcho();
 396:	0e 94 8b 01 	call	0x316	; 0x316 <disableEcho>
	sendString("AT+CMGL=1");
 39a:	8e eb       	ldi	r24, 0xBE	; 190
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 96 03 	call	0x72c	; 0x72c <sendString>
	unsigned int i = 0;
 3a2:	1a 82       	std	Y+2, r1	; 0x02
 3a4:	19 82       	std	Y+1, r1	; 0x01
	while(charReady())
 3a6:	82 c0       	rjmp	.+260    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	a8 ec       	ldi	r26, 0xC8	; 200
 3ae:	b2 e4       	ldi	r27, 0x42	; 66
 3b0:	8b 83       	std	Y+3, r24	; 0x03
 3b2:	9c 83       	std	Y+4, r25	; 0x04
 3b4:	ad 83       	std	Y+5, r26	; 0x05
 3b6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	4a e7       	ldi	r20, 0x7A	; 122
 3be:	53 e4       	ldi	r21, 0x43	; 67
 3c0:	6b 81       	ldd	r22, Y+3	; 0x03
 3c2:	7c 81       	ldd	r23, Y+4	; 0x04
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22
 3d0:	8f 83       	std	Y+7, r24	; 0x07
 3d2:	98 87       	std	Y+8, r25	; 0x08
 3d4:	a9 87       	std	Y+9, r26	; 0x09
 3d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	40 e8       	ldi	r20, 0x80	; 128
 3de:	5f e3       	ldi	r21, 0x3F	; 63
 3e0:	6f 81       	ldd	r22, Y+7	; 0x07
 3e2:	78 85       	ldd	r23, Y+8	; 0x08
 3e4:	89 85       	ldd	r24, Y+9	; 0x09
 3e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e8:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 3ec:	88 23       	and	r24, r24
 3ee:	2c f4       	brge	.+10     	; 0x3fa <getMessages+0x80>
		__ticks = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	9c 87       	std	Y+12, r25	; 0x0c
 3f6:	8b 87       	std	Y+11, r24	; 0x0b
 3f8:	3f c0       	rjmp	.+126    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	else if (__tmp > 65535)
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	3f ef       	ldi	r19, 0xFF	; 255
 3fe:	4f e7       	ldi	r20, 0x7F	; 127
 400:	57 e4       	ldi	r21, 0x47	; 71
 402:	6f 81       	ldd	r22, Y+7	; 0x07
 404:	78 85       	ldd	r23, Y+8	; 0x08
 406:	89 85       	ldd	r24, Y+9	; 0x09
 408:	9a 85       	ldd	r25, Y+10	; 0x0a
 40a:	0e 94 b1 04 	call	0x962	; 0x962 <__gesf2>
 40e:	18 16       	cp	r1, r24
 410:	4c f5       	brge	.+82     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	40 e2       	ldi	r20, 0x20	; 32
 418:	51 e4       	ldi	r21, 0x41	; 65
 41a:	6b 81       	ldd	r22, Y+3	; 0x03
 41c:	7c 81       	ldd	r23, Y+4	; 0x04
 41e:	8d 81       	ldd	r24, Y+5	; 0x05
 420:	9e 81       	ldd	r25, Y+6	; 0x06
 422:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 426:	dc 01       	movw	r26, r24
 428:	cb 01       	movw	r24, r22
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 432:	dc 01       	movw	r26, r24
 434:	cb 01       	movw	r24, r22
 436:	9c 87       	std	Y+12, r25	; 0x0c
 438:	8b 87       	std	Y+11, r24	; 0x0b
 43a:	0f c0       	rjmp	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43c:	89 e1       	ldi	r24, 0x19	; 25
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9e 87       	std	Y+14, r25	; 0x0e
 442:	8d 87       	std	Y+13, r24	; 0x0d
 444:	8d 85       	ldd	r24, Y+13	; 0x0d
 446:	9e 85       	ldd	r25, Y+14	; 0x0e
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 44c:	9e 87       	std	Y+14, r25	; 0x0e
 44e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 450:	8b 85       	ldd	r24, Y+11	; 0x0b
 452:	9c 85       	ldd	r25, Y+12	; 0x0c
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	9c 87       	std	Y+12, r25	; 0x0c
 458:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	8b 85       	ldd	r24, Y+11	; 0x0b
 45c:	9c 85       	ldd	r25, Y+12	; 0x0c
 45e:	89 2b       	or	r24, r25
 460:	69 f7       	brne	.-38     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 462:	14 c0       	rjmp	.+40     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 464:	6f 81       	ldd	r22, Y+7	; 0x07
 466:	78 85       	ldd	r23, Y+8	; 0x08
 468:	89 85       	ldd	r24, Y+9	; 0x09
 46a:	9a 85       	ldd	r25, Y+10	; 0x0a
 46c:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 470:	dc 01       	movw	r26, r24
 472:	cb 01       	movw	r24, r22
 474:	9c 87       	std	Y+12, r25	; 0x0c
 476:	8b 87       	std	Y+11, r24	; 0x0b
 478:	8b 85       	ldd	r24, Y+11	; 0x0b
 47a:	9c 85       	ldd	r25, Y+12	; 0x0c
 47c:	98 8b       	std	Y+16, r25	; 0x10
 47e:	8f 87       	std	Y+15, r24	; 0x0f
 480:	8f 85       	ldd	r24, Y+15	; 0x0f
 482:	98 89       	ldd	r25, Y+16	; 0x10
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	98 8b       	std	Y+16, r25	; 0x10
 48a:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(100);
		response[i] = readChar();
 48c:	29 89       	ldd	r18, Y+17	; 0x11
 48e:	3a 89       	ldd	r19, Y+18	; 0x12
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	89 01       	movw	r16, r18
 496:	08 0f       	add	r16, r24
 498:	19 1f       	adc	r17, r25
 49a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <readChar>
 49e:	f8 01       	movw	r30, r16
 4a0:	80 83       	st	Z, r24
		i++;
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	9a 81       	ldd	r25, Y+2	; 0x02
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
void getMessages(char* response)
{
	disableEcho();
	sendString("AT+CMGL=1");
	unsigned int i = 0;
	while(charReady())
 4ac:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <charReady>
 4b0:	89 2b       	or	r24, r25
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	79 cf       	rjmp	.-270    	; 0x3a8 <getMessages+0x2e>
	{
		_delay_ms(100);
		response[i] = readChar();
		i++;
	}
	enableEcho();
 4b6:	0e 94 80 01 	call	0x300	; 0x300 <enableEcho>
 4ba:	62 96       	adiw	r28, 0x12	; 18
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	08 95       	ret

000004d0 <initializeUART>:
#define  F_CPU 3686400
#include <util/delay.h>
#define  XTAL 3686400

void initializeUART(unsigned long baudRate, unsigned char dataBit)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	2b 97       	sbiw	r28, 0x0b	; 11
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	6b 83       	std	Y+3, r22	; 0x03
 4e6:	7c 83       	std	Y+4, r23	; 0x04
 4e8:	8d 83       	std	Y+5, r24	; 0x05
 4ea:	9e 83       	std	Y+6, r25	; 0x06
 4ec:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int tempUBRR;
	 if ((baudRate >= 110) && (baudRate <= 115200) && (dataBit >=5) && (dataBit <= 8))
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	9c 81       	ldd	r25, Y+4	; 0x04
 4f2:	ad 81       	ldd	r26, Y+5	; 0x05
 4f4:	be 81       	ldd	r27, Y+6	; 0x06
 4f6:	8e 36       	cpi	r24, 0x6E	; 110
 4f8:	91 05       	cpc	r25, r1
 4fa:	a1 05       	cpc	r26, r1
 4fc:	b1 05       	cpc	r27, r1
 4fe:	08 f4       	brcc	.+2      	; 0x502 <initializeUART+0x32>
 500:	58 c0       	rjmp	.+176    	; 0x5b2 <initializeUART+0xe2>
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	9c 81       	ldd	r25, Y+4	; 0x04
 506:	ad 81       	ldd	r26, Y+5	; 0x05
 508:	be 81       	ldd	r27, Y+6	; 0x06
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	92 4c       	sbci	r25, 0xC2	; 194
 50e:	a1 40       	sbci	r26, 0x01	; 1
 510:	b1 05       	cpc	r27, r1
 512:	08 f0       	brcs	.+2      	; 0x516 <initializeUART+0x46>
 514:	4e c0       	rjmp	.+156    	; 0x5b2 <initializeUART+0xe2>
 516:	8f 81       	ldd	r24, Y+7	; 0x07
 518:	85 30       	cpi	r24, 0x05	; 5
 51a:	08 f4       	brcc	.+2      	; 0x51e <initializeUART+0x4e>
 51c:	4a c0       	rjmp	.+148    	; 0x5b2 <initializeUART+0xe2>
 51e:	8f 81       	ldd	r24, Y+7	; 0x07
 520:	89 30       	cpi	r24, 0x09	; 9
 522:	08 f0       	brcs	.+2      	; 0x526 <initializeUART+0x56>
 524:	46 c0       	rjmp	.+140    	; 0x5b2 <initializeUART+0xe2>
	 {
		 // "Normal" clock, no multiprocessor mode (= default)
		 UCSRA = 0b00100000;
 526:	8b e2       	ldi	r24, 0x2B	; 43
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	20 e2       	ldi	r18, 0x20	; 32
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
		 // No interrupts enabled
		 // Receiver enabled
		 // Transmitter enabled
		 // No 9 bit operation
		 UCSRB = 0b00011000;
 530:	8a e2       	ldi	r24, 0x2A	; 42
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	28 e1       	ldi	r18, 0x18	; 24
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
		 // Asynchronous operation, 1 stop bit, no parity
		 // Bit7 always has to be 1
		 // Bit 2 and bit 1 controls the number of data bits
		 UCSRC = 0b10000000 | (dataBit-5)<<1;
 53a:	80 e4       	ldi	r24, 0x40	; 64
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	2f 81       	ldd	r18, Y+7	; 0x07
 540:	22 2f       	mov	r18, r18
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	25 50       	subi	r18, 0x05	; 5
 546:	31 09       	sbc	r19, r1
 548:	22 0f       	add	r18, r18
 54a:	33 1f       	adc	r19, r19
 54c:	20 68       	ori	r18, 0x80	; 128
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
		 // Set Baud Rate according to the parameter BaudRate:
		 // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
		 //                   then write the two 8-bit registers separately):
		 tempUBRR = XTAL/(16*baudRate) - 1;
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	9c 81       	ldd	r25, Y+4	; 0x04
 556:	ad 81       	ldd	r26, Y+5	; 0x05
 558:	be 81       	ldd	r27, Y+6	; 0x06
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	aa 1f       	adc	r26, r26
 560:	bb 1f       	adc	r27, r27
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	aa 1f       	adc	r26, r26
 570:	bb 1f       	adc	r27, r27
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	aa 1f       	adc	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	9c 01       	movw	r18, r24
 57c:	ad 01       	movw	r20, r26
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e4       	ldi	r25, 0x40	; 64
 582:	a8 e3       	ldi	r26, 0x38	; 56
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	bc 01       	movw	r22, r24
 588:	cd 01       	movw	r24, r26
 58a:	0e 94 4b 05 	call	0xa96	; 0xa96 <__udivmodsi4>
 58e:	da 01       	movw	r26, r20
 590:	c9 01       	movw	r24, r18
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	9a 83       	std	Y+2, r25	; 0x02
 596:	89 83       	std	Y+1, r24	; 0x01
		 // Write upper part of UBRR
		 UBRRH = tempUBRR >> 8;
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	29 81       	ldd	r18, Y+1	; 0x01
 59e:	3a 81       	ldd	r19, Y+2	; 0x02
 5a0:	23 2f       	mov	r18, r19
 5a2:	33 27       	eor	r19, r19
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 83       	st	Z, r18
		 // Write lower part of UBRR
		 UBRRL = tempUBRR;
 5a8:	89 e2       	ldi	r24, 0x29	; 41
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	29 81       	ldd	r18, Y+1	; 0x01
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
	 }
}
 5b2:	2b 96       	adiw	r28, 0x0b	; 11
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <charReady>:
/*************************************************************************
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char charReady()
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
   return UCSRA & (1<<7);
 5cc:	8b e2       	ldi	r24, 0x2B	; 43
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	80 78       	andi	r24, 0x80	; 128
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <readChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char readChar()
{
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
	// Wait for new character received
	while ( (UCSRA & (1<<7)) == 0 )
 5e4:	00 00       	nop
 5e6:	8b e2       	ldi	r24, 0x2B	; 43
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	fc 01       	movw	r30, r24
 5ec:	80 81       	ld	r24, Z
 5ee:	88 23       	and	r24, r24
 5f0:	d4 f7       	brge	.-12     	; 0x5e6 <readChar+0xa>
	{}
	// Then return it
	return UDR;
 5f2:	8c e2       	ldi	r24, 0x2C	; 44
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	fc 01       	movw	r30, r24
 5f8:	80 81       	ld	r24, Z
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <sendChar>:
Then it send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void sendChar(char Tegn)
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
 608:	2f 97       	sbiw	r28, 0x0f	; 15
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	8f 87       	std	Y+15, r24	; 0x0f
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a8 e4       	ldi	r26, 0x48	; 72
 61c:	b2 e4       	ldi	r27, 0x42	; 66
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	9a 83       	std	Y+2, r25	; 0x02
 622:	ab 83       	std	Y+3, r26	; 0x03
 624:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 626:	26 e6       	ldi	r18, 0x66	; 102
 628:	36 e6       	ldi	r19, 0x66	; 102
 62a:	46 e6       	ldi	r20, 0x66	; 102
 62c:	54 e4       	ldi	r21, 0x44	; 68
 62e:	69 81       	ldd	r22, Y+1	; 0x01
 630:	7a 81       	ldd	r23, Y+2	; 0x02
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	9c 81       	ldd	r25, Y+4	; 0x04
 636:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 63a:	dc 01       	movw	r26, r24
 63c:	cb 01       	movw	r24, r22
 63e:	8d 83       	std	Y+5, r24	; 0x05
 640:	9e 83       	std	Y+6, r25	; 0x06
 642:	af 83       	std	Y+7, r26	; 0x07
 644:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	40 e8       	ldi	r20, 0x80	; 128
 64c:	5f e3       	ldi	r21, 0x3F	; 63
 64e:	6d 81       	ldd	r22, Y+5	; 0x05
 650:	7e 81       	ldd	r23, Y+6	; 0x06
 652:	8f 81       	ldd	r24, Y+7	; 0x07
 654:	98 85       	ldd	r25, Y+8	; 0x08
 656:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 65a:	88 23       	and	r24, r24
 65c:	2c f4       	brge	.+10     	; 0x668 <sendChar+0x68>
		__ticks = 1;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	9a 87       	std	Y+10, r25	; 0x0a
 664:	89 87       	std	Y+9, r24	; 0x09
 666:	3f c0       	rjmp	.+126    	; 0x6e6 <sendChar+0xe6>
	else if (__tmp > 65535)
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	3f ef       	ldi	r19, 0xFF	; 255
 66c:	4f e7       	ldi	r20, 0x7F	; 127
 66e:	57 e4       	ldi	r21, 0x47	; 71
 670:	6d 81       	ldd	r22, Y+5	; 0x05
 672:	7e 81       	ldd	r23, Y+6	; 0x06
 674:	8f 81       	ldd	r24, Y+7	; 0x07
 676:	98 85       	ldd	r25, Y+8	; 0x08
 678:	0e 94 b1 04 	call	0x962	; 0x962 <__gesf2>
 67c:	18 16       	cp	r1, r24
 67e:	4c f5       	brge	.+82     	; 0x6d2 <sendChar+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	40 e2       	ldi	r20, 0x20	; 32
 686:	51 e4       	ldi	r21, 0x41	; 65
 688:	69 81       	ldd	r22, Y+1	; 0x01
 68a:	7a 81       	ldd	r23, Y+2	; 0x02
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	9c 81       	ldd	r25, Y+4	; 0x04
 690:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 694:	dc 01       	movw	r26, r24
 696:	cb 01       	movw	r24, r22
 698:	bc 01       	movw	r22, r24
 69a:	cd 01       	movw	r24, r26
 69c:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 6a0:	dc 01       	movw	r26, r24
 6a2:	cb 01       	movw	r24, r22
 6a4:	9a 87       	std	Y+10, r25	; 0x0a
 6a6:	89 87       	std	Y+9, r24	; 0x09
 6a8:	0f c0       	rjmp	.+30     	; 0x6c8 <sendChar+0xc8>
 6aa:	8c e5       	ldi	r24, 0x5C	; 92
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	9c 87       	std	Y+12, r25	; 0x0c
 6b0:	8b 87       	std	Y+11, r24	; 0x0b
 6b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 6b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <sendChar+0xb6>
 6ba:	9c 87       	std	Y+12, r25	; 0x0c
 6bc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6be:	89 85       	ldd	r24, Y+9	; 0x09
 6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	9a 87       	std	Y+10, r25	; 0x0a
 6c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6c8:	89 85       	ldd	r24, Y+9	; 0x09
 6ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 6cc:	89 2b       	or	r24, r25
 6ce:	69 f7       	brne	.-38     	; 0x6aa <sendChar+0xaa>
 6d0:	14 c0       	rjmp	.+40     	; 0x6fa <sendChar+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6d2:	6d 81       	ldd	r22, Y+5	; 0x05
 6d4:	7e 81       	ldd	r23, Y+6	; 0x06
 6d6:	8f 81       	ldd	r24, Y+7	; 0x07
 6d8:	98 85       	ldd	r25, Y+8	; 0x08
 6da:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 6de:	dc 01       	movw	r26, r24
 6e0:	cb 01       	movw	r24, r22
 6e2:	9a 87       	std	Y+10, r25	; 0x0a
 6e4:	89 87       	std	Y+9, r24	; 0x09
 6e6:	89 85       	ldd	r24, Y+9	; 0x09
 6e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 6ea:	9e 87       	std	Y+14, r25	; 0x0e
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
 6ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 6f0:	9e 85       	ldd	r25, Y+14	; 0x0e
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <sendChar+0xf2>
 6f6:	9e 87       	std	Y+14, r25	; 0x0e
 6f8:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(50);
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
 6fa:	00 00       	nop
 6fc:	8b e2       	ldi	r24, 0x2B	; 43
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	fc 01       	movw	r30, r24
 702:	80 81       	ld	r24, Z
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	80 72       	andi	r24, 0x20	; 32
 70a:	99 27       	eor	r25, r25
 70c:	89 2b       	or	r24, r25
 70e:	b1 f3       	breq	.-20     	; 0x6fc <sendChar+0xfc>
  {}
  // Then send the character
  UDR = Tegn;
 710:	8c e2       	ldi	r24, 0x2C	; 44
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	2f 85       	ldd	r18, Y+15	; 0x0f
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18

}
 71a:	2f 96       	adiw	r28, 0x0f	; 15
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <sendString>:
Sends 0-terminated string.
Parameters:
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	60 97       	sbiw	r28, 0x10	; 16
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	98 8b       	std	Y+16, r25	; 0x10
 742:	8f 87       	std	Y+15, r24	; 0x0f
  // Repeat until zero-termination
  while (*s != 0)
 744:	7d c0       	rjmp	.+250    	; 0x840 <sendString+0x114>
  {
    // Send the character pointed to by "s"
    sendChar(*s);
 746:	8f 85       	ldd	r24, Y+15	; 0x0f
 748:	98 89       	ldd	r25, Y+16	; 0x10
 74a:	fc 01       	movw	r30, r24
 74c:	80 81       	ld	r24, Z
 74e:	0e 94 00 03 	call	0x600	; 0x600 <sendChar>
    // Advance the pointer one step
    s++;
 752:	8f 85       	ldd	r24, Y+15	; 0x0f
 754:	98 89       	ldd	r25, Y+16	; 0x10
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	98 8b       	std	Y+16, r25	; 0x10
 75a:	8f 87       	std	Y+15, r24	; 0x0f
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	a8 e4       	ldi	r26, 0x48	; 72
 762:	b2 e4       	ldi	r27, 0x42	; 66
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	9a 83       	std	Y+2, r25	; 0x02
 768:	ab 83       	std	Y+3, r26	; 0x03
 76a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 76c:	26 e6       	ldi	r18, 0x66	; 102
 76e:	36 e6       	ldi	r19, 0x66	; 102
 770:	46 e6       	ldi	r20, 0x66	; 102
 772:	54 e4       	ldi	r21, 0x44	; 68
 774:	69 81       	ldd	r22, Y+1	; 0x01
 776:	7a 81       	ldd	r23, Y+2	; 0x02
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	9c 81       	ldd	r25, Y+4	; 0x04
 77c:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	8d 83       	std	Y+5, r24	; 0x05
 786:	9e 83       	std	Y+6, r25	; 0x06
 788:	af 83       	std	Y+7, r26	; 0x07
 78a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	40 e8       	ldi	r20, 0x80	; 128
 792:	5f e3       	ldi	r21, 0x3F	; 63
 794:	6d 81       	ldd	r22, Y+5	; 0x05
 796:	7e 81       	ldd	r23, Y+6	; 0x06
 798:	8f 81       	ldd	r24, Y+7	; 0x07
 79a:	98 85       	ldd	r25, Y+8	; 0x08
 79c:	0e 94 30 04 	call	0x860	; 0x860 <__cmpsf2>
 7a0:	88 23       	and	r24, r24
 7a2:	2c f4       	brge	.+10     	; 0x7ae <sendString+0x82>
		__ticks = 1;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	9a 87       	std	Y+10, r25	; 0x0a
 7aa:	89 87       	std	Y+9, r24	; 0x09
 7ac:	3f c0       	rjmp	.+126    	; 0x82c <sendString+0x100>
	else if (__tmp > 65535)
 7ae:	20 e0       	ldi	r18, 0x00	; 0
 7b0:	3f ef       	ldi	r19, 0xFF	; 255
 7b2:	4f e7       	ldi	r20, 0x7F	; 127
 7b4:	57 e4       	ldi	r21, 0x47	; 71
 7b6:	6d 81       	ldd	r22, Y+5	; 0x05
 7b8:	7e 81       	ldd	r23, Y+6	; 0x06
 7ba:	8f 81       	ldd	r24, Y+7	; 0x07
 7bc:	98 85       	ldd	r25, Y+8	; 0x08
 7be:	0e 94 b1 04 	call	0x962	; 0x962 <__gesf2>
 7c2:	18 16       	cp	r1, r24
 7c4:	4c f5       	brge	.+82     	; 0x818 <sendString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	40 e2       	ldi	r20, 0x20	; 32
 7cc:	51 e4       	ldi	r21, 0x41	; 65
 7ce:	69 81       	ldd	r22, Y+1	; 0x01
 7d0:	7a 81       	ldd	r23, Y+2	; 0x02
 7d2:	8b 81       	ldd	r24, Y+3	; 0x03
 7d4:	9c 81       	ldd	r25, Y+4	; 0x04
 7d6:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsf3>
 7da:	dc 01       	movw	r26, r24
 7dc:	cb 01       	movw	r24, r22
 7de:	bc 01       	movw	r22, r24
 7e0:	cd 01       	movw	r24, r26
 7e2:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 7e6:	dc 01       	movw	r26, r24
 7e8:	cb 01       	movw	r24, r22
 7ea:	9a 87       	std	Y+10, r25	; 0x0a
 7ec:	89 87       	std	Y+9, r24	; 0x09
 7ee:	0f c0       	rjmp	.+30     	; 0x80e <sendString+0xe2>
 7f0:	8c e5       	ldi	r24, 0x5C	; 92
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	9c 87       	std	Y+12, r25	; 0x0c
 7f6:	8b 87       	std	Y+11, r24	; 0x0b
 7f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 7fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <sendString+0xd0>
 800:	9c 87       	std	Y+12, r25	; 0x0c
 802:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 804:	89 85       	ldd	r24, Y+9	; 0x09
 806:	9a 85       	ldd	r25, Y+10	; 0x0a
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	9a 87       	std	Y+10, r25	; 0x0a
 80c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 80e:	89 85       	ldd	r24, Y+9	; 0x09
 810:	9a 85       	ldd	r25, Y+10	; 0x0a
 812:	89 2b       	or	r24, r25
 814:	69 f7       	brne	.-38     	; 0x7f0 <sendString+0xc4>
 816:	14 c0       	rjmp	.+40     	; 0x840 <sendString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 818:	6d 81       	ldd	r22, Y+5	; 0x05
 81a:	7e 81       	ldd	r23, Y+6	; 0x06
 81c:	8f 81       	ldd	r24, Y+7	; 0x07
 81e:	98 85       	ldd	r25, Y+8	; 0x08
 820:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 824:	dc 01       	movw	r26, r24
 826:	cb 01       	movw	r24, r22
 828:	9a 87       	std	Y+10, r25	; 0x0a
 82a:	89 87       	std	Y+9, r24	; 0x09
 82c:	89 85       	ldd	r24, Y+9	; 0x09
 82e:	9a 85       	ldd	r25, Y+10	; 0x0a
 830:	9e 87       	std	Y+14, r25	; 0x0e
 832:	8d 87       	std	Y+13, r24	; 0x0d
 834:	8d 85       	ldd	r24, Y+13	; 0x0d
 836:	9e 85       	ldd	r25, Y+14	; 0x0e
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <sendString+0x10c>
 83c:	9e 87       	std	Y+14, r25	; 0x0e
 83e:	8d 87       	std	Y+13, r24	; 0x0d
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
  // Repeat until zero-termination
  while (*s != 0)
 840:	8f 85       	ldd	r24, Y+15	; 0x0f
 842:	98 89       	ldd	r25, Y+16	; 0x10
 844:	fc 01       	movw	r30, r24
 846:	80 81       	ld	r24, Z
 848:	88 23       	and	r24, r24
 84a:	09 f0       	breq	.+2      	; 0x84e <sendString+0x122>
 84c:	7c cf       	rjmp	.-264    	; 0x746 <sendString+0x1a>
    sendChar(*s);
    // Advance the pointer one step
    s++;
	_delay_ms(50);
  }
}
 84e:	60 96       	adiw	r28, 0x10	; 16
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <__cmpsf2>:
 860:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_cmp>
 864:	08 f4       	brcc	.+2      	; 0x868 <__cmpsf2+0x8>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	08 95       	ret

0000086a <__fixunssfsi>:
 86a:	0e 94 90 04 	call	0x920	; 0x920 <__fp_splitA>
 86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x28>
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	98 f0       	brcs	.+38     	; 0x89a <__fixunssfsi+0x30>
 874:	b9 2f       	mov	r27, r25
 876:	99 27       	eor	r25, r25
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	b0 f0       	brcs	.+44     	; 0x8a8 <__fixunssfsi+0x3e>
 87c:	e1 f0       	breq	.+56     	; 0x8b6 <__fixunssfsi+0x4c>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x24>
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x14>
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <__fixunssfsi+0x4c>
 88e:	b1 30       	cpi	r27, 0x01	; 1
 890:	91 f0       	breq	.+36     	; 0x8b6 <__fixunssfsi+0x4c>
 892:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_zero>
 896:	b1 e0       	ldi	r27, 0x01	; 1
 898:	08 95       	ret
 89a:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x4c>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x34>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x42>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x5c>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__fp_cmp>:
 8c8:	99 0f       	add	r25, r25
 8ca:	00 08       	sbc	r0, r0
 8cc:	55 0f       	add	r21, r21
 8ce:	aa 0b       	sbc	r26, r26
 8d0:	e0 e8       	ldi	r30, 0x80	; 128
 8d2:	fe ef       	ldi	r31, 0xFE	; 254
 8d4:	16 16       	cp	r1, r22
 8d6:	17 06       	cpc	r1, r23
 8d8:	e8 07       	cpc	r30, r24
 8da:	f9 07       	cpc	r31, r25
 8dc:	c0 f0       	brcs	.+48     	; 0x90e <__fp_cmp+0x46>
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	e4 07       	cpc	r30, r20
 8e4:	f5 07       	cpc	r31, r21
 8e6:	98 f0       	brcs	.+38     	; 0x90e <__fp_cmp+0x46>
 8e8:	62 1b       	sub	r22, r18
 8ea:	73 0b       	sbc	r23, r19
 8ec:	84 0b       	sbc	r24, r20
 8ee:	95 0b       	sbc	r25, r21
 8f0:	39 f4       	brne	.+14     	; 0x900 <__fp_cmp+0x38>
 8f2:	0a 26       	eor	r0, r26
 8f4:	61 f0       	breq	.+24     	; 0x90e <__fp_cmp+0x46>
 8f6:	23 2b       	or	r18, r19
 8f8:	24 2b       	or	r18, r20
 8fa:	25 2b       	or	r18, r21
 8fc:	21 f4       	brne	.+8      	; 0x906 <__fp_cmp+0x3e>
 8fe:	08 95       	ret
 900:	0a 26       	eor	r0, r26
 902:	09 f4       	brne	.+2      	; 0x906 <__fp_cmp+0x3e>
 904:	a1 40       	sbci	r26, 0x01	; 1
 906:	a6 95       	lsr	r26
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	81 1d       	adc	r24, r1
 90c:	81 1d       	adc	r24, r1
 90e:	08 95       	ret

00000910 <__fp_split3>:
 910:	57 fd       	sbrc	r21, 7
 912:	90 58       	subi	r25, 0x80	; 128
 914:	44 0f       	add	r20, r20
 916:	55 1f       	adc	r21, r21
 918:	59 f0       	breq	.+22     	; 0x930 <__fp_splitA+0x10>
 91a:	5f 3f       	cpi	r21, 0xFF	; 255
 91c:	71 f0       	breq	.+28     	; 0x93a <__fp_splitA+0x1a>
 91e:	47 95       	ror	r20

00000920 <__fp_splitA>:
 920:	88 0f       	add	r24, r24
 922:	97 fb       	bst	r25, 7
 924:	99 1f       	adc	r25, r25
 926:	61 f0       	breq	.+24     	; 0x940 <__fp_splitA+0x20>
 928:	9f 3f       	cpi	r25, 0xFF	; 255
 92a:	79 f0       	breq	.+30     	; 0x94a <__fp_splitA+0x2a>
 92c:	87 95       	ror	r24
 92e:	08 95       	ret
 930:	12 16       	cp	r1, r18
 932:	13 06       	cpc	r1, r19
 934:	14 06       	cpc	r1, r20
 936:	55 1f       	adc	r21, r21
 938:	f2 cf       	rjmp	.-28     	; 0x91e <__fp_split3+0xe>
 93a:	46 95       	lsr	r20
 93c:	f1 df       	rcall	.-30     	; 0x920 <__fp_splitA>
 93e:	08 c0       	rjmp	.+16     	; 0x950 <__fp_splitA+0x30>
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	18 06       	cpc	r1, r24
 946:	99 1f       	adc	r25, r25
 948:	f1 cf       	rjmp	.-30     	; 0x92c <__fp_splitA+0xc>
 94a:	86 95       	lsr	r24
 94c:	71 05       	cpc	r23, r1
 94e:	61 05       	cpc	r22, r1
 950:	08 94       	sec
 952:	08 95       	ret

00000954 <__fp_zero>:
 954:	e8 94       	clt

00000956 <__fp_szero>:
 956:	bb 27       	eor	r27, r27
 958:	66 27       	eor	r22, r22
 95a:	77 27       	eor	r23, r23
 95c:	cb 01       	movw	r24, r22
 95e:	97 f9       	bld	r25, 7
 960:	08 95       	ret

00000962 <__gesf2>:
 962:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_cmp>
 966:	08 f4       	brcc	.+2      	; 0x96a <__gesf2+0x8>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__mulsf3>:
 96c:	0e 94 c9 04 	call	0x992	; 0x992 <__mulsf3x>
 970:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_round>
 974:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscA>
 978:	38 f0       	brcs	.+14     	; 0x988 <__mulsf3+0x1c>
 97a:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscB>
 97e:	20 f0       	brcs	.+8      	; 0x988 <__mulsf3+0x1c>
 980:	95 23       	and	r25, r21
 982:	11 f0       	breq	.+4      	; 0x988 <__mulsf3+0x1c>
 984:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 988:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_nan>
 98c:	11 24       	eor	r1, r1
 98e:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_szero>

00000992 <__mulsf3x>:
 992:	0e 94 88 04 	call	0x910	; 0x910 <__fp_split3>
 996:	70 f3       	brcs	.-36     	; 0x974 <__mulsf3+0x8>

00000998 <__mulsf3_pse>:
 998:	95 9f       	mul	r25, r21
 99a:	c1 f3       	breq	.-16     	; 0x98c <__mulsf3+0x20>
 99c:	95 0f       	add	r25, r21
 99e:	50 e0       	ldi	r21, 0x00	; 0
 9a0:	55 1f       	adc	r21, r21
 9a2:	62 9f       	mul	r22, r18
 9a4:	f0 01       	movw	r30, r0
 9a6:	72 9f       	mul	r23, r18
 9a8:	bb 27       	eor	r27, r27
 9aa:	f0 0d       	add	r31, r0
 9ac:	b1 1d       	adc	r27, r1
 9ae:	63 9f       	mul	r22, r19
 9b0:	aa 27       	eor	r26, r26
 9b2:	f0 0d       	add	r31, r0
 9b4:	b1 1d       	adc	r27, r1
 9b6:	aa 1f       	adc	r26, r26
 9b8:	64 9f       	mul	r22, r20
 9ba:	66 27       	eor	r22, r22
 9bc:	b0 0d       	add	r27, r0
 9be:	a1 1d       	adc	r26, r1
 9c0:	66 1f       	adc	r22, r22
 9c2:	82 9f       	mul	r24, r18
 9c4:	22 27       	eor	r18, r18
 9c6:	b0 0d       	add	r27, r0
 9c8:	a1 1d       	adc	r26, r1
 9ca:	62 1f       	adc	r22, r18
 9cc:	73 9f       	mul	r23, r19
 9ce:	b0 0d       	add	r27, r0
 9d0:	a1 1d       	adc	r26, r1
 9d2:	62 1f       	adc	r22, r18
 9d4:	83 9f       	mul	r24, r19
 9d6:	a0 0d       	add	r26, r0
 9d8:	61 1d       	adc	r22, r1
 9da:	22 1f       	adc	r18, r18
 9dc:	74 9f       	mul	r23, r20
 9de:	33 27       	eor	r19, r19
 9e0:	a0 0d       	add	r26, r0
 9e2:	61 1d       	adc	r22, r1
 9e4:	23 1f       	adc	r18, r19
 9e6:	84 9f       	mul	r24, r20
 9e8:	60 0d       	add	r22, r0
 9ea:	21 1d       	adc	r18, r1
 9ec:	82 2f       	mov	r24, r18
 9ee:	76 2f       	mov	r23, r22
 9f0:	6a 2f       	mov	r22, r26
 9f2:	11 24       	eor	r1, r1
 9f4:	9f 57       	subi	r25, 0x7F	; 127
 9f6:	50 40       	sbci	r21, 0x00	; 0
 9f8:	9a f0       	brmi	.+38     	; 0xa20 <__mulsf3_pse+0x88>
 9fa:	f1 f0       	breq	.+60     	; 0xa38 <__mulsf3_pse+0xa0>
 9fc:	88 23       	and	r24, r24
 9fe:	4a f0       	brmi	.+18     	; 0xa12 <__mulsf3_pse+0x7a>
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	bb 1f       	adc	r27, r27
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	91 50       	subi	r25, 0x01	; 1
 a0e:	50 40       	sbci	r21, 0x00	; 0
 a10:	a9 f7       	brne	.-22     	; 0x9fc <__mulsf3_pse+0x64>
 a12:	9e 3f       	cpi	r25, 0xFE	; 254
 a14:	51 05       	cpc	r21, r1
 a16:	80 f0       	brcs	.+32     	; 0xa38 <__mulsf3_pse+0xa0>
 a18:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 a1c:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_szero>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	e4 f3       	brlt	.-8      	; 0xa1c <__mulsf3_pse+0x84>
 a24:	98 3e       	cpi	r25, 0xE8	; 232
 a26:	d4 f3       	brlt	.-12     	; 0xa1c <__mulsf3_pse+0x84>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	f7 95       	ror	r31
 a32:	e7 95       	ror	r30
 a34:	9f 5f       	subi	r25, 0xFF	; 255
 a36:	c1 f7       	brne	.-16     	; 0xa28 <__mulsf3_pse+0x90>
 a38:	fe 2b       	or	r31, r30
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret

00000a46 <__fp_inf>:
 a46:	97 f9       	bld	r25, 7
 a48:	9f 67       	ori	r25, 0x7F	; 127
 a4a:	80 e8       	ldi	r24, 0x80	; 128
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	08 95       	ret

00000a52 <__fp_nan>:
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	80 ec       	ldi	r24, 0xC0	; 192
 a56:	08 95       	ret

00000a58 <__fp_pscA>:
 a58:	00 24       	eor	r0, r0
 a5a:	0a 94       	dec	r0
 a5c:	16 16       	cp	r1, r22
 a5e:	17 06       	cpc	r1, r23
 a60:	18 06       	cpc	r1, r24
 a62:	09 06       	cpc	r0, r25
 a64:	08 95       	ret

00000a66 <__fp_pscB>:
 a66:	00 24       	eor	r0, r0
 a68:	0a 94       	dec	r0
 a6a:	12 16       	cp	r1, r18
 a6c:	13 06       	cpc	r1, r19
 a6e:	14 06       	cpc	r1, r20
 a70:	05 06       	cpc	r0, r21
 a72:	08 95       	ret

00000a74 <__fp_round>:
 a74:	09 2e       	mov	r0, r25
 a76:	03 94       	inc	r0
 a78:	00 0c       	add	r0, r0
 a7a:	11 f4       	brne	.+4      	; 0xa80 <__fp_round+0xc>
 a7c:	88 23       	and	r24, r24
 a7e:	52 f0       	brmi	.+20     	; 0xa94 <__fp_round+0x20>
 a80:	bb 0f       	add	r27, r27
 a82:	40 f4       	brcc	.+16     	; 0xa94 <__fp_round+0x20>
 a84:	bf 2b       	or	r27, r31
 a86:	11 f4       	brne	.+4      	; 0xa8c <__fp_round+0x18>
 a88:	60 ff       	sbrs	r22, 0
 a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__fp_round+0x20>
 a8c:	6f 5f       	subi	r22, 0xFF	; 255
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	08 95       	ret

00000a96 <__udivmodsi4>:
 a96:	a1 e2       	ldi	r26, 0x21	; 33
 a98:	1a 2e       	mov	r1, r26
 a9a:	aa 1b       	sub	r26, r26
 a9c:	bb 1b       	sub	r27, r27
 a9e:	fd 01       	movw	r30, r26
 aa0:	0d c0       	rjmp	.+26     	; 0xabc <__udivmodsi4_ep>

00000aa2 <__udivmodsi4_loop>:
 aa2:	aa 1f       	adc	r26, r26
 aa4:	bb 1f       	adc	r27, r27
 aa6:	ee 1f       	adc	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	a2 17       	cp	r26, r18
 aac:	b3 07       	cpc	r27, r19
 aae:	e4 07       	cpc	r30, r20
 ab0:	f5 07       	cpc	r31, r21
 ab2:	20 f0       	brcs	.+8      	; 0xabc <__udivmodsi4_ep>
 ab4:	a2 1b       	sub	r26, r18
 ab6:	b3 0b       	sbc	r27, r19
 ab8:	e4 0b       	sbc	r30, r20
 aba:	f5 0b       	sbc	r31, r21

00000abc <__udivmodsi4_ep>:
 abc:	66 1f       	adc	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	1a 94       	dec	r1
 ac6:	69 f7       	brne	.-38     	; 0xaa2 <__udivmodsi4_loop>
 ac8:	60 95       	com	r22
 aca:	70 95       	com	r23
 acc:	80 95       	com	r24
 ace:	90 95       	com	r25
 ad0:	9b 01       	movw	r18, r22
 ad2:	ac 01       	movw	r20, r24
 ad4:	bd 01       	movw	r22, r26
 ad6:	cf 01       	movw	r24, r30
 ad8:	08 95       	ret

00000ada <_exit>:
 ada:	f8 94       	cli

00000adc <__stop_program>:
 adc:	ff cf       	rjmp	.-2      	; 0xadc <__stop_program>
