
GsmDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000a54  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001076  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a6  00000000  00000000  00001cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8b  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002fc  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a3  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058a  00000000  00000000  000039bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  7a:	0c 94 28 05 	jmp	0xa50	; 0xa50 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initLEDport>:
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
		// Turn OFF the actual LED (the rest are unchanged)
		PORTC = PORTC | mask;
	}
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	82 34       	cpi	r24, 0x42	; 66
  96:	91 05       	cpc	r25, r1
  98:	c9 f0       	breq	.+50     	; 0xcc <initLEDport+0x4a>
  9a:	83 34       	cpi	r24, 0x43	; 67
  9c:	91 05       	cpc	r25, r1
  9e:	24 f4       	brge	.+8      	; 0xa8 <initLEDport+0x26>
  a0:	81 34       	cpi	r24, 0x41	; 65
  a2:	91 05       	cpc	r25, r1
  a4:	41 f0       	breq	.+16     	; 0xb6 <initLEDport+0x34>
  a6:	28 c0       	rjmp	.+80     	; 0xf8 <initLEDport+0x76>
  a8:	83 34       	cpi	r24, 0x43	; 67
  aa:	91 05       	cpc	r25, r1
  ac:	d1 f0       	breq	.+52     	; 0xe2 <initLEDport+0x60>
  ae:	84 34       	cpi	r24, 0x44	; 68
  b0:	91 05       	cpc	r25, r1
  b2:	71 f1       	breq	.+92     	; 0x110 <initLEDport+0x8e>
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <initLEDport+0x76>
  b6:	8a e3       	ldi	r24, 0x3A	; 58
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	23 c0       	rjmp	.+70     	; 0x112 <initLEDport+0x90>
  cc:	87 e3       	ldi	r24, 0x37	; 55
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	18 c0       	rjmp	.+48     	; 0x112 <initLEDport+0x90>
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
  f6:	0d c0       	rjmp	.+26     	; 0x112 <initLEDport+0x90>
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	00 00       	nop
 10e:	01 c0       	rjmp	.+2      	; 0x112 <initLEDport+0x90>
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <toggleLED>:

void toggleLED(unsigned char led_nr)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <toggleLED+0x6>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	8a 83       	std	Y+2, r24	; 0x02
	// Local variable
	unsigned char mask;
	// We only have to do anything, if led_nr < 8
	if (led_nr <= MAX_LED_NR)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	a8 f4       	brcc	.+42     	; 0x156 <toggleLED+0x3c>
	{
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <toggleLED+0x22>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <toggleLED+0x1e>
 140:	89 83       	std	Y+1, r24	; 0x01
		// Toggle the actual LED (the rest are unchanged)
		PORTC = PORTC ^ mask;
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	25 e3       	ldi	r18, 0x35	; 53
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	30 81       	ld	r19, Z
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	23 27       	eor	r18, r19
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	}
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <main>:
#include "ledDriver.h"
#include "MC35Commands.h"
#include "speakerDriver.h"

int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	a2 97       	sbiw	r28, 0x22	; 34
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	initializeUART(9600, 8);
 174:	48 e0       	ldi	r20, 0x08	; 8
 176:	60 e8       	ldi	r22, 0x80	; 128
 178:	75 e2       	ldi	r23, 0x25	; 37
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 23 02 	call	0x446	; 0x446 <initializeUART>
	initializeSpeaker('B', 0b00000001);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	82 e4       	ldi	r24, 0x42	; 66
 186:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <initializeSpeaker>
	initLEDport();
 18a:	0e 94 41 00 	call	0x82	; 0x82 <initLEDport>
	//char response[50];
	//char msg[50] = "This is a message for you ";
	//char num[8] = "61423402";
	char callback[20];
	setTextMode(callback);
 18e:	ce 01       	movw	r24, r28
 190:	0f 96       	adiw	r24, 0x0f	; 15
 192:	0e 94 41 01 	call	0x282	; 0x282 <setTextMode>
	//getMessages(response);
	//sendSms(response, num);

	while (1)
	{
		toggleLED(7);
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	0e 94 8d 00 	call	0x11a	; 0x11a <toggleLED>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	aa ef       	ldi	r26, 0xFA	; 250
 1a2:	b3 e4       	ldi	r27, 0x43	; 67
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	ab 83       	std	Y+3, r26	; 0x03
 1aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ac:	26 e6       	ldi	r18, 0x66	; 102
 1ae:	36 e6       	ldi	r19, 0x66	; 102
 1b0:	46 e6       	ldi	r20, 0x66	; 102
 1b2:	54 e4       	ldi	r21, 0x44	; 68
 1b4:	69 81       	ldd	r22, Y+1	; 0x01
 1b6:	7a 81       	ldd	r23, Y+2	; 0x02
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	9c 81       	ldd	r25, Y+4	; 0x04
 1bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 1c0:	dc 01       	movw	r26, r24
 1c2:	cb 01       	movw	r24, r22
 1c4:	8d 83       	std	Y+5, r24	; 0x05
 1c6:	9e 83       	std	Y+6, r25	; 0x06
 1c8:	af 83       	std	Y+7, r26	; 0x07
 1ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	5f e3       	ldi	r21, 0x3F	; 63
 1d4:	6d 81       	ldd	r22, Y+5	; 0x05
 1d6:	7e 81       	ldd	r23, Y+6	; 0x06
 1d8:	8f 81       	ldd	r24, Y+7	; 0x07
 1da:	98 85       	ldd	r25, Y+8	; 0x08
 1dc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__cmpsf2>
 1e0:	88 23       	and	r24, r24
 1e2:	2c f4       	brge	.+10     	; 0x1ee <main+0x8e>
		__ticks = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
 1ec:	3f c0       	rjmp	.+126    	; 0x26c <main+0x10c>
	else if (__tmp > 65535)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	3f ef       	ldi	r19, 0xFF	; 255
 1f2:	4f e7       	ldi	r20, 0x7F	; 127
 1f4:	57 e4       	ldi	r21, 0x47	; 71
 1f6:	6d 81       	ldd	r22, Y+5	; 0x05
 1f8:	7e 81       	ldd	r23, Y+6	; 0x06
 1fa:	8f 81       	ldd	r24, Y+7	; 0x07
 1fc:	98 85       	ldd	r25, Y+8	; 0x08
 1fe:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	4c f5       	brge	.+82     	; 0x258 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e2       	ldi	r20, 0x20	; 32
 20c:	51 e4       	ldi	r21, 0x41	; 65
 20e:	69 81       	ldd	r22, Y+1	; 0x01
 210:	7a 81       	ldd	r23, Y+2	; 0x02
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	9c 81       	ldd	r25, Y+4	; 0x04
 216:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	9a 87       	std	Y+10, r25	; 0x0a
 22c:	89 87       	std	Y+9, r24	; 0x09
 22e:	0f c0       	rjmp	.+30     	; 0x24e <main+0xee>
 230:	8c e5       	ldi	r24, 0x5C	; 92
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	9c 87       	std	Y+12, r25	; 0x0c
 236:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 238:	8b 85       	ldd	r24, Y+11	; 0x0b
 23a:	9c 85       	ldd	r25, Y+12	; 0x0c
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0xdc>
 240:	9c 87       	std	Y+12, r25	; 0x0c
 242:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	89 85       	ldd	r24, Y+9	; 0x09
 246:	9a 85       	ldd	r25, Y+10	; 0x0a
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	9a 87       	std	Y+10, r25	; 0x0a
 24c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24e:	89 85       	ldd	r24, Y+9	; 0x09
 250:	9a 85       	ldd	r25, Y+10	; 0x0a
 252:	89 2b       	or	r24, r25
 254:	69 f7       	brne	.-38     	; 0x230 <main+0xd0>
 256:	14 c0       	rjmp	.+40     	; 0x280 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	7e 81       	ldd	r23, Y+6	; 0x06
 25c:	8f 81       	ldd	r24, Y+7	; 0x07
 25e:	98 85       	ldd	r25, Y+8	; 0x08
 260:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	9a 87       	std	Y+10, r25	; 0x0a
 26a:	89 87       	std	Y+9, r24	; 0x09
 26c:	89 85       	ldd	r24, Y+9	; 0x09
 26e:	9a 85       	ldd	r25, Y+10	; 0x0a
 270:	9e 87       	std	Y+14, r25	; 0x0e
 272:	8d 87       	std	Y+13, r24	; 0x0d
 274:	8d 85       	ldd	r24, Y+13	; 0x0d
 276:	9e 85       	ldd	r25, Y+14	; 0x0e
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x118>
 27c:	9e 87       	std	Y+14, r25	; 0x0e
 27e:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(500);
	}
 280:	8a cf       	rjmp	.-236    	; 0x196 <main+0x36>

00000282 <setTextMode>:
#define CTRL_Z 26
#include <util/delay.h>
#include "MC35Commands.h"

void setTextMode(char * callback)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	63 97       	sbiw	r28, 0x13	; 19
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	9b 8b       	std	Y+19, r25	; 0x13
 298:	8a 8b       	std	Y+18, r24	; 0x12
	unsigned int i = 0;
 29a:	1a 82       	std	Y+2, r1	; 0x02
 29c:	19 82       	std	Y+1, r1	; 0x01

	sendString("AT+CMGF=1");
 29e:	80 e6       	ldi	r24, 0x60	; 96
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sendString>
	sendString("\r\n");
 2a6:	8a e6       	ldi	r24, 0x6A	; 106
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <sendString>

	while(charReady())
 2ae:	83 c0       	rjmp	.+262    	; 0x3b6 <setTextMode+0x134>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	a8 e4       	ldi	r26, 0x48	; 72
 2b6:	b2 e4       	ldi	r27, 0x42	; 66
 2b8:	8c 83       	std	Y+4, r24	; 0x04
 2ba:	9d 83       	std	Y+5, r25	; 0x05
 2bc:	ae 83       	std	Y+6, r26	; 0x06
 2be:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	4a e7       	ldi	r20, 0x7A	; 122
 2c6:	53 e4       	ldi	r21, 0x43	; 67
 2c8:	6c 81       	ldd	r22, Y+4	; 0x04
 2ca:	7d 81       	ldd	r23, Y+5	; 0x05
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	88 87       	std	Y+8, r24	; 0x08
 2da:	99 87       	std	Y+9, r25	; 0x09
 2dc:	aa 87       	std	Y+10, r26	; 0x0a
 2de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e8       	ldi	r20, 0x80	; 128
 2e6:	5f e3       	ldi	r21, 0x3F	; 63
 2e8:	68 85       	ldd	r22, Y+8	; 0x08
 2ea:	79 85       	ldd	r23, Y+9	; 0x09
 2ec:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ee:	9b 85       	ldd	r25, Y+11	; 0x0b
 2f0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	2c f4       	brge	.+10     	; 0x302 <setTextMode+0x80>
		__ticks = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9d 87       	std	Y+13, r25	; 0x0d
 2fe:	8c 87       	std	Y+12, r24	; 0x0c
 300:	3f c0       	rjmp	.+126    	; 0x380 <setTextMode+0xfe>
	else if (__tmp > 65535)
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	3f ef       	ldi	r19, 0xFF	; 255
 306:	4f e7       	ldi	r20, 0x7F	; 127
 308:	57 e4       	ldi	r21, 0x47	; 71
 30a:	68 85       	ldd	r22, Y+8	; 0x08
 30c:	79 85       	ldd	r23, Y+9	; 0x09
 30e:	8a 85       	ldd	r24, Y+10	; 0x0a
 310:	9b 85       	ldd	r25, Y+11	; 0x0b
 312:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__gesf2>
 316:	18 16       	cp	r1, r24
 318:	4c f5       	brge	.+82     	; 0x36c <setTextMode+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e2       	ldi	r20, 0x20	; 32
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	6c 81       	ldd	r22, Y+4	; 0x04
 324:	7d 81       	ldd	r23, Y+5	; 0x05
 326:	8e 81       	ldd	r24, Y+6	; 0x06
 328:	9f 81       	ldd	r25, Y+7	; 0x07
 32a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	9d 87       	std	Y+13, r25	; 0x0d
 340:	8c 87       	std	Y+12, r24	; 0x0c
 342:	0f c0       	rjmp	.+30     	; 0x362 <setTextMode+0xe0>
 344:	89 e1       	ldi	r24, 0x19	; 25
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9f 87       	std	Y+15, r25	; 0x0f
 34a:	8e 87       	std	Y+14, r24	; 0x0e
 34c:	8e 85       	ldd	r24, Y+14	; 0x0e
 34e:	9f 85       	ldd	r25, Y+15	; 0x0f
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <setTextMode+0xce>
 354:	9f 87       	std	Y+15, r25	; 0x0f
 356:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 358:	8c 85       	ldd	r24, Y+12	; 0x0c
 35a:	9d 85       	ldd	r25, Y+13	; 0x0d
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	9d 87       	std	Y+13, r25	; 0x0d
 360:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	8c 85       	ldd	r24, Y+12	; 0x0c
 364:	9d 85       	ldd	r25, Y+13	; 0x0d
 366:	89 2b       	or	r24, r25
 368:	69 f7       	brne	.-38     	; 0x344 <setTextMode+0xc2>
 36a:	14 c0       	rjmp	.+40     	; 0x394 <setTextMode+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36c:	68 85       	ldd	r22, Y+8	; 0x08
 36e:	79 85       	ldd	r23, Y+9	; 0x09
 370:	8a 85       	ldd	r24, Y+10	; 0x0a
 372:	9b 85       	ldd	r25, Y+11	; 0x0b
 374:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	9d 87       	std	Y+13, r25	; 0x0d
 37e:	8c 87       	std	Y+12, r24	; 0x0c
 380:	8c 85       	ldd	r24, Y+12	; 0x0c
 382:	9d 85       	ldd	r25, Y+13	; 0x0d
 384:	99 8b       	std	Y+17, r25	; 0x11
 386:	88 8b       	std	Y+16, r24	; 0x10
 388:	88 89       	ldd	r24, Y+16	; 0x10
 38a:	99 89       	ldd	r25, Y+17	; 0x11
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <setTextMode+0x10a>
 390:	99 8b       	std	Y+17, r25	; 0x11
 392:	88 8b       	std	Y+16, r24	; 0x10
	{
		_delay_ms(50);
		char test = readChar();
 394:	0e 94 a9 02 	call	0x552	; 0x552 <readChar>
 398:	8b 83       	std	Y+3, r24	; 0x03
		callback[i] = test;
 39a:	2a 89       	ldd	r18, Y+18	; 0x12
 39c:	3b 89       	ldd	r19, Y+19	; 0x13
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	82 0f       	add	r24, r18
 3a4:	93 1f       	adc	r25, r19
 3a6:	2b 81       	ldd	r18, Y+3	; 0x03
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
		i++;
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	9a 83       	std	Y+2, r25	; 0x02
 3b4:	89 83       	std	Y+1, r24	; 0x01
	unsigned int i = 0;

	sendString("AT+CMGF=1");
	sendString("\r\n");

	while(charReady())
 3b6:	0e 94 9d 02 	call	0x53a	; 0x53a <charReady>
 3ba:	89 2b       	or	r24, r25
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <setTextMode+0x13e>
 3be:	78 cf       	rjmp	.-272    	; 0x2b0 <setTextMode+0x2e>
		_delay_ms(50);
		char test = readChar();
		callback[i] = test;
		i++;
	}
}
 3c0:	63 96       	adiw	r28, 0x13	; 19
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <initializeSpeaker>:
#define F_CPU 3686400
#include <util/delay.h>
#include "speakerDriver.h"

void initializeSpeaker(char port, unsigned char pattern)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <initializeSpeaker+0x6>
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	89 83       	std	Y+1, r24	; 0x01
 3de:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	82 34       	cpi	r24, 0x42	; 66
 3e8:	91 05       	cpc	r25, r1
 3ea:	a1 f0       	breq	.+40     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ec:	83 34       	cpi	r24, 0x43	; 67
 3ee:	91 05       	cpc	r25, r1
 3f0:	24 f4       	brge	.+8      	; 0x3fa <initializeSpeaker+0x28>
 3f2:	81 34       	cpi	r24, 0x41	; 65
 3f4:	91 05       	cpc	r25, r1
 3f6:	41 f0       	breq	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	19 c0       	rjmp	.+50     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	91 05       	cpc	r25, r1
 3fe:	81 f0       	breq	.+32     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 400:	84 34       	cpi	r24, 0x44	; 68
 402:	91 05       	cpc	r25, r1
 404:	d1 f0       	breq	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 406:	12 c0       	rjmp	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		case 'A':
		DDRA = pattern;
 408:	8a e3       	ldi	r24, 0x3A	; 58
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	2a 81       	ldd	r18, Y+2	; 0x02
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
		break;
 412:	14 c0       	rjmp	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'B':
		DDRB = pattern;
 414:	87 e3       	ldi	r24, 0x37	; 55
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	2a 81       	ldd	r18, Y+2	; 0x02
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
		break;
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'C':
		DDRC = pattern;
 420:	84 e3       	ldi	r24, 0x34	; 52
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	2a 81       	ldd	r18, Y+2	; 0x02
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
		break;
 42a:	08 c0       	rjmp	.+16     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'D':
		break;
		DDRD = pattern;
		break;
		default:
		DDRB = pattern;
 42c:	87 e3       	ldi	r24, 0x37	; 55
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	2a 81       	ldd	r18, Y+2	; 0x02
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
		break;
 436:	00 00       	nop
 438:	01 c0       	rjmp	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		break;
		case 'C':
		DDRC = pattern;
		break;
		case 'D':
		break;
 43a:	00 00       	nop
		break;
		default:
		DDRB = pattern;
		break;
	}
}
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <initializeUART>:
#define  F_CPU 3686400
#include <util/delay.h>
#define  XTAL 3686400

void initializeUART(unsigned long baudRate, unsigned char dataBit)
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	2b 97       	sbiw	r28, 0x0b	; 11
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	6b 83       	std	Y+3, r22	; 0x03
 45c:	7c 83       	std	Y+4, r23	; 0x04
 45e:	8d 83       	std	Y+5, r24	; 0x05
 460:	9e 83       	std	Y+6, r25	; 0x06
 462:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int tempUBRR;
	 if ((baudRate >= 110) && (baudRate <= 115200) && (dataBit >=5) && (dataBit <= 8))
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	9c 81       	ldd	r25, Y+4	; 0x04
 468:	ad 81       	ldd	r26, Y+5	; 0x05
 46a:	be 81       	ldd	r27, Y+6	; 0x06
 46c:	8e 36       	cpi	r24, 0x6E	; 110
 46e:	91 05       	cpc	r25, r1
 470:	a1 05       	cpc	r26, r1
 472:	b1 05       	cpc	r27, r1
 474:	08 f4       	brcc	.+2      	; 0x478 <initializeUART+0x32>
 476:	58 c0       	rjmp	.+176    	; 0x528 <initializeUART+0xe2>
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	9c 81       	ldd	r25, Y+4	; 0x04
 47c:	ad 81       	ldd	r26, Y+5	; 0x05
 47e:	be 81       	ldd	r27, Y+6	; 0x06
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	92 4c       	sbci	r25, 0xC2	; 194
 484:	a1 40       	sbci	r26, 0x01	; 1
 486:	b1 05       	cpc	r27, r1
 488:	08 f0       	brcs	.+2      	; 0x48c <initializeUART+0x46>
 48a:	4e c0       	rjmp	.+156    	; 0x528 <initializeUART+0xe2>
 48c:	8f 81       	ldd	r24, Y+7	; 0x07
 48e:	85 30       	cpi	r24, 0x05	; 5
 490:	08 f4       	brcc	.+2      	; 0x494 <initializeUART+0x4e>
 492:	4a c0       	rjmp	.+148    	; 0x528 <initializeUART+0xe2>
 494:	8f 81       	ldd	r24, Y+7	; 0x07
 496:	89 30       	cpi	r24, 0x09	; 9
 498:	08 f0       	brcs	.+2      	; 0x49c <initializeUART+0x56>
 49a:	46 c0       	rjmp	.+140    	; 0x528 <initializeUART+0xe2>
	 {
		 // "Normal" clock, no multiprocessor mode (= default)
		 UCSRA = 0b00100000;
 49c:	8b e2       	ldi	r24, 0x2B	; 43
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	20 e2       	ldi	r18, 0x20	; 32
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
		 // No interrupts enabled
		 // Receiver enabled
		 // Transmitter enabled
		 // No 9 bit operation
		 UCSRB = 0b00011000;
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	28 e1       	ldi	r18, 0x18	; 24
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
		 // Asynchronous operation, 1 stop bit, no parity
		 // Bit7 always has to be 1
		 // Bit 2 and bit 1 controls the number of data bits
		 UCSRC = 0b10000000 | (dataBit-5)<<1;
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	2f 81       	ldd	r18, Y+7	; 0x07
 4b6:	22 2f       	mov	r18, r18
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	25 50       	subi	r18, 0x05	; 5
 4bc:	31 09       	sbc	r19, r1
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	20 68       	ori	r18, 0x80	; 128
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
		 // Set Baud Rate according to the parameter BaudRate:
		 // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
		 //                   then write the two 8-bit registers separately):
		 tempUBRR = XTAL/(16*baudRate) - 1;
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	9c 81       	ldd	r25, Y+4	; 0x04
 4cc:	ad 81       	ldd	r26, Y+5	; 0x05
 4ce:	be 81       	ldd	r27, Y+6	; 0x06
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	aa 1f       	adc	r26, r26
 4d6:	bb 1f       	adc	r27, r27
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	aa 1f       	adc	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	aa 1f       	adc	r26, r26
 4e6:	bb 1f       	adc	r27, r27
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	aa 1f       	adc	r26, r26
 4ee:	bb 1f       	adc	r27, r27
 4f0:	9c 01       	movw	r18, r24
 4f2:	ad 01       	movw	r20, r26
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e4       	ldi	r25, 0x40	; 64
 4f8:	a8 e3       	ldi	r26, 0x38	; 56
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	bc 01       	movw	r22, r24
 4fe:	cd 01       	movw	r24, r26
 500:	0e 94 06 05 	call	0xa0c	; 0xa0c <__udivmodsi4>
 504:	da 01       	movw	r26, r20
 506:	c9 01       	movw	r24, r18
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	9a 83       	std	Y+2, r25	; 0x02
 50c:	89 83       	std	Y+1, r24	; 0x01
		 // Write upper part of UBRR
		 UBRRH = tempUBRR >> 8;
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	29 81       	ldd	r18, Y+1	; 0x01
 514:	3a 81       	ldd	r19, Y+2	; 0x02
 516:	23 2f       	mov	r18, r19
 518:	33 27       	eor	r19, r19
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
		 // Write lower part of UBRR
		 UBRRL = tempUBRR;
 51e:	89 e2       	ldi	r24, 0x29	; 41
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	29 81       	ldd	r18, Y+1	; 0x01
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
	 }
}
 528:	2b 96       	adiw	r28, 0x0b	; 11
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <charReady>:
/*************************************************************************
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char charReady()
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
   return UCSRA & (1<<7);
 542:	8b e2       	ldi	r24, 0x2B	; 43
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	80 81       	ld	r24, Z
 54a:	80 78       	andi	r24, 0x80	; 128
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <readChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char readChar()
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
	// Wait for new character received
	while ( (UCSRA & (1<<7)) == 0 )
 55a:	00 00       	nop
 55c:	8b e2       	ldi	r24, 0x2B	; 43
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	88 23       	and	r24, r24
 566:	d4 f7       	brge	.-12     	; 0x55c <readChar+0xa>
	{}
	// Then return it
	return UDR;
 568:	8c e2       	ldi	r24, 0x2C	; 44
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	fc 01       	movw	r30, r24
 56e:	80 81       	ld	r24, Z
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <sendChar>:
Then it send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void sendChar(char Tegn)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	2f 97       	sbiw	r28, 0x0f	; 15
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	8f 87       	std	Y+15, r24	; 0x0f
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a8 e4       	ldi	r26, 0x48	; 72
 592:	b2 e4       	ldi	r27, 0x42	; 66
 594:	89 83       	std	Y+1, r24	; 0x01
 596:	9a 83       	std	Y+2, r25	; 0x02
 598:	ab 83       	std	Y+3, r26	; 0x03
 59a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 59c:	26 e6       	ldi	r18, 0x66	; 102
 59e:	36 e6       	ldi	r19, 0x66	; 102
 5a0:	46 e6       	ldi	r20, 0x66	; 102
 5a2:	54 e4       	ldi	r21, 0x44	; 68
 5a4:	69 81       	ldd	r22, Y+1	; 0x01
 5a6:	7a 81       	ldd	r23, Y+2	; 0x02
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 5b0:	dc 01       	movw	r26, r24
 5b2:	cb 01       	movw	r24, r22
 5b4:	8d 83       	std	Y+5, r24	; 0x05
 5b6:	9e 83       	std	Y+6, r25	; 0x06
 5b8:	af 83       	std	Y+7, r26	; 0x07
 5ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	40 e8       	ldi	r20, 0x80	; 128
 5c2:	5f e3       	ldi	r21, 0x3F	; 63
 5c4:	6d 81       	ldd	r22, Y+5	; 0x05
 5c6:	7e 81       	ldd	r23, Y+6	; 0x06
 5c8:	8f 81       	ldd	r24, Y+7	; 0x07
 5ca:	98 85       	ldd	r25, Y+8	; 0x08
 5cc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__cmpsf2>
 5d0:	88 23       	and	r24, r24
 5d2:	2c f4       	brge	.+10     	; 0x5de <sendChar+0x68>
		__ticks = 1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	9a 87       	std	Y+10, r25	; 0x0a
 5da:	89 87       	std	Y+9, r24	; 0x09
 5dc:	3f c0       	rjmp	.+126    	; 0x65c <sendChar+0xe6>
	else if (__tmp > 65535)
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	3f ef       	ldi	r19, 0xFF	; 255
 5e2:	4f e7       	ldi	r20, 0x7F	; 127
 5e4:	57 e4       	ldi	r21, 0x47	; 71
 5e6:	6d 81       	ldd	r22, Y+5	; 0x05
 5e8:	7e 81       	ldd	r23, Y+6	; 0x06
 5ea:	8f 81       	ldd	r24, Y+7	; 0x07
 5ec:	98 85       	ldd	r25, Y+8	; 0x08
 5ee:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__gesf2>
 5f2:	18 16       	cp	r1, r24
 5f4:	4c f5       	brge	.+82     	; 0x648 <sendChar+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5f6:	20 e0       	ldi	r18, 0x00	; 0
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	40 e2       	ldi	r20, 0x20	; 32
 5fc:	51 e4       	ldi	r21, 0x41	; 65
 5fe:	69 81       	ldd	r22, Y+1	; 0x01
 600:	7a 81       	ldd	r23, Y+2	; 0x02
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	9c 81       	ldd	r25, Y+4	; 0x04
 606:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 60a:	dc 01       	movw	r26, r24
 60c:	cb 01       	movw	r24, r22
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 616:	dc 01       	movw	r26, r24
 618:	cb 01       	movw	r24, r22
 61a:	9a 87       	std	Y+10, r25	; 0x0a
 61c:	89 87       	std	Y+9, r24	; 0x09
 61e:	0f c0       	rjmp	.+30     	; 0x63e <sendChar+0xc8>
 620:	8c e5       	ldi	r24, 0x5C	; 92
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	9c 87       	std	Y+12, r25	; 0x0c
 626:	8b 87       	std	Y+11, r24	; 0x0b
 628:	8b 85       	ldd	r24, Y+11	; 0x0b
 62a:	9c 85       	ldd	r25, Y+12	; 0x0c
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <sendChar+0xb6>
 630:	9c 87       	std	Y+12, r25	; 0x0c
 632:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 634:	89 85       	ldd	r24, Y+9	; 0x09
 636:	9a 85       	ldd	r25, Y+10	; 0x0a
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	9a 87       	std	Y+10, r25	; 0x0a
 63c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 63e:	89 85       	ldd	r24, Y+9	; 0x09
 640:	9a 85       	ldd	r25, Y+10	; 0x0a
 642:	89 2b       	or	r24, r25
 644:	69 f7       	brne	.-38     	; 0x620 <sendChar+0xaa>
 646:	14 c0       	rjmp	.+40     	; 0x670 <sendChar+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 648:	6d 81       	ldd	r22, Y+5	; 0x05
 64a:	7e 81       	ldd	r23, Y+6	; 0x06
 64c:	8f 81       	ldd	r24, Y+7	; 0x07
 64e:	98 85       	ldd	r25, Y+8	; 0x08
 650:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 654:	dc 01       	movw	r26, r24
 656:	cb 01       	movw	r24, r22
 658:	9a 87       	std	Y+10, r25	; 0x0a
 65a:	89 87       	std	Y+9, r24	; 0x09
 65c:	89 85       	ldd	r24, Y+9	; 0x09
 65e:	9a 85       	ldd	r25, Y+10	; 0x0a
 660:	9e 87       	std	Y+14, r25	; 0x0e
 662:	8d 87       	std	Y+13, r24	; 0x0d
 664:	8d 85       	ldd	r24, Y+13	; 0x0d
 666:	9e 85       	ldd	r25, Y+14	; 0x0e
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <sendChar+0xf2>
 66c:	9e 87       	std	Y+14, r25	; 0x0e
 66e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(50);
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
 670:	00 00       	nop
 672:	8b e2       	ldi	r24, 0x2B	; 43
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	fc 01       	movw	r30, r24
 678:	80 81       	ld	r24, Z
 67a:	88 2f       	mov	r24, r24
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	80 72       	andi	r24, 0x20	; 32
 680:	99 27       	eor	r25, r25
 682:	89 2b       	or	r24, r25
 684:	b1 f3       	breq	.-20     	; 0x672 <sendChar+0xfc>
  {}
  // Then send the character
  UDR = Tegn;
 686:	8c e2       	ldi	r24, 0x2C	; 44
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	2f 85       	ldd	r18, Y+15	; 0x0f
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18

}
 690:	2f 96       	adiw	r28, 0x0f	; 15
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <sendString>:
Sends 0-terminated string.
Parameters:
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	60 97       	sbiw	r28, 0x10	; 16
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	98 8b       	std	Y+16, r25	; 0x10
 6b8:	8f 87       	std	Y+15, r24	; 0x0f
  // Repeat until zero-termination
  while (*s != 0)
 6ba:	7d c0       	rjmp	.+250    	; 0x7b6 <sendString+0x114>
  {
    // Send the character pointed to by "s"
    sendChar(*s);
 6bc:	8f 85       	ldd	r24, Y+15	; 0x0f
 6be:	98 89       	ldd	r25, Y+16	; 0x10
 6c0:	fc 01       	movw	r30, r24
 6c2:	80 81       	ld	r24, Z
 6c4:	0e 94 bb 02 	call	0x576	; 0x576 <sendChar>
    // Advance the pointer one step
    s++;
 6c8:	8f 85       	ldd	r24, Y+15	; 0x0f
 6ca:	98 89       	ldd	r25, Y+16	; 0x10
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	98 8b       	std	Y+16, r25	; 0x10
 6d0:	8f 87       	std	Y+15, r24	; 0x0f
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a8 e4       	ldi	r26, 0x48	; 72
 6d8:	b2 e4       	ldi	r27, 0x42	; 66
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	9a 83       	std	Y+2, r25	; 0x02
 6de:	ab 83       	std	Y+3, r26	; 0x03
 6e0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6e2:	26 e6       	ldi	r18, 0x66	; 102
 6e4:	36 e6       	ldi	r19, 0x66	; 102
 6e6:	46 e6       	ldi	r20, 0x66	; 102
 6e8:	54 e4       	ldi	r21, 0x44	; 68
 6ea:	69 81       	ldd	r22, Y+1	; 0x01
 6ec:	7a 81       	ldd	r23, Y+2	; 0x02
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 6f6:	dc 01       	movw	r26, r24
 6f8:	cb 01       	movw	r24, r22
 6fa:	8d 83       	std	Y+5, r24	; 0x05
 6fc:	9e 83       	std	Y+6, r25	; 0x06
 6fe:	af 83       	std	Y+7, r26	; 0x07
 700:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	40 e8       	ldi	r20, 0x80	; 128
 708:	5f e3       	ldi	r21, 0x3F	; 63
 70a:	6d 81       	ldd	r22, Y+5	; 0x05
 70c:	7e 81       	ldd	r23, Y+6	; 0x06
 70e:	8f 81       	ldd	r24, Y+7	; 0x07
 710:	98 85       	ldd	r25, Y+8	; 0x08
 712:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__cmpsf2>
 716:	88 23       	and	r24, r24
 718:	2c f4       	brge	.+10     	; 0x724 <sendString+0x82>
		__ticks = 1;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	9a 87       	std	Y+10, r25	; 0x0a
 720:	89 87       	std	Y+9, r24	; 0x09
 722:	3f c0       	rjmp	.+126    	; 0x7a2 <sendString+0x100>
	else if (__tmp > 65535)
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	3f ef       	ldi	r19, 0xFF	; 255
 728:	4f e7       	ldi	r20, 0x7F	; 127
 72a:	57 e4       	ldi	r21, 0x47	; 71
 72c:	6d 81       	ldd	r22, Y+5	; 0x05
 72e:	7e 81       	ldd	r23, Y+6	; 0x06
 730:	8f 81       	ldd	r24, Y+7	; 0x07
 732:	98 85       	ldd	r25, Y+8	; 0x08
 734:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__gesf2>
 738:	18 16       	cp	r1, r24
 73a:	4c f5       	brge	.+82     	; 0x78e <sendString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	40 e2       	ldi	r20, 0x20	; 32
 742:	51 e4       	ldi	r21, 0x41	; 65
 744:	69 81       	ldd	r22, Y+1	; 0x01
 746:	7a 81       	ldd	r23, Y+2	; 0x02
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
 750:	dc 01       	movw	r26, r24
 752:	cb 01       	movw	r24, r22
 754:	bc 01       	movw	r22, r24
 756:	cd 01       	movw	r24, r26
 758:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 75c:	dc 01       	movw	r26, r24
 75e:	cb 01       	movw	r24, r22
 760:	9a 87       	std	Y+10, r25	; 0x0a
 762:	89 87       	std	Y+9, r24	; 0x09
 764:	0f c0       	rjmp	.+30     	; 0x784 <sendString+0xe2>
 766:	8c e5       	ldi	r24, 0x5C	; 92
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	9c 87       	std	Y+12, r25	; 0x0c
 76c:	8b 87       	std	Y+11, r24	; 0x0b
 76e:	8b 85       	ldd	r24, Y+11	; 0x0b
 770:	9c 85       	ldd	r25, Y+12	; 0x0c
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <sendString+0xd0>
 776:	9c 87       	std	Y+12, r25	; 0x0c
 778:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 77a:	89 85       	ldd	r24, Y+9	; 0x09
 77c:	9a 85       	ldd	r25, Y+10	; 0x0a
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	9a 87       	std	Y+10, r25	; 0x0a
 782:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 784:	89 85       	ldd	r24, Y+9	; 0x09
 786:	9a 85       	ldd	r25, Y+10	; 0x0a
 788:	89 2b       	or	r24, r25
 78a:	69 f7       	brne	.-38     	; 0x766 <sendString+0xc4>
 78c:	14 c0       	rjmp	.+40     	; 0x7b6 <sendString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 78e:	6d 81       	ldd	r22, Y+5	; 0x05
 790:	7e 81       	ldd	r23, Y+6	; 0x06
 792:	8f 81       	ldd	r24, Y+7	; 0x07
 794:	98 85       	ldd	r25, Y+8	; 0x08
 796:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixunssfsi>
 79a:	dc 01       	movw	r26, r24
 79c:	cb 01       	movw	r24, r22
 79e:	9a 87       	std	Y+10, r25	; 0x0a
 7a0:	89 87       	std	Y+9, r24	; 0x09
 7a2:	89 85       	ldd	r24, Y+9	; 0x09
 7a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 7a6:	9e 87       	std	Y+14, r25	; 0x0e
 7a8:	8d 87       	std	Y+13, r24	; 0x0d
 7aa:	8d 85       	ldd	r24, Y+13	; 0x0d
 7ac:	9e 85       	ldd	r25, Y+14	; 0x0e
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <sendString+0x10c>
 7b2:	9e 87       	std	Y+14, r25	; 0x0e
 7b4:	8d 87       	std	Y+13, r24	; 0x0d
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
  // Repeat until zero-termination
  while (*s != 0)
 7b6:	8f 85       	ldd	r24, Y+15	; 0x0f
 7b8:	98 89       	ldd	r25, Y+16	; 0x10
 7ba:	fc 01       	movw	r30, r24
 7bc:	80 81       	ld	r24, Z
 7be:	88 23       	and	r24, r24
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <sendString+0x122>
 7c2:	7c cf       	rjmp	.-264    	; 0x6bc <sendString+0x1a>
    sendChar(*s);
    // Advance the pointer one step
    s++;
	_delay_ms(50);
  }
}
 7c4:	60 96       	adiw	r28, 0x10	; 16
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	f8 94       	cli
 7ca:	de bf       	out	0x3e, r29	; 62
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	cd bf       	out	0x3d, r28	; 61
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <__cmpsf2>:
 7d6:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_cmp>
 7da:	08 f4       	brcc	.+2      	; 0x7de <__cmpsf2+0x8>
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	08 95       	ret

000007e0 <__fixunssfsi>:
 7e0:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_splitA>
 7e4:	88 f0       	brcs	.+34     	; 0x808 <__fixunssfsi+0x28>
 7e6:	9f 57       	subi	r25, 0x7F	; 127
 7e8:	98 f0       	brcs	.+38     	; 0x810 <__fixunssfsi+0x30>
 7ea:	b9 2f       	mov	r27, r25
 7ec:	99 27       	eor	r25, r25
 7ee:	b7 51       	subi	r27, 0x17	; 23
 7f0:	b0 f0       	brcs	.+44     	; 0x81e <__fixunssfsi+0x3e>
 7f2:	e1 f0       	breq	.+56     	; 0x82c <__fixunssfsi+0x4c>
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	1a f0       	brmi	.+6      	; 0x804 <__fixunssfsi+0x24>
 7fe:	ba 95       	dec	r27
 800:	c9 f7       	brne	.-14     	; 0x7f4 <__fixunssfsi+0x14>
 802:	14 c0       	rjmp	.+40     	; 0x82c <__fixunssfsi+0x4c>
 804:	b1 30       	cpi	r27, 0x01	; 1
 806:	91 f0       	breq	.+36     	; 0x82c <__fixunssfsi+0x4c>
 808:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_zero>
 80c:	b1 e0       	ldi	r27, 0x01	; 1
 80e:	08 95       	ret
 810:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_zero>
 814:	67 2f       	mov	r22, r23
 816:	78 2f       	mov	r23, r24
 818:	88 27       	eor	r24, r24
 81a:	b8 5f       	subi	r27, 0xF8	; 248
 81c:	39 f0       	breq	.+14     	; 0x82c <__fixunssfsi+0x4c>
 81e:	b9 3f       	cpi	r27, 0xF9	; 249
 820:	cc f3       	brlt	.-14     	; 0x814 <__fixunssfsi+0x34>
 822:	86 95       	lsr	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b3 95       	inc	r27
 82a:	d9 f7       	brne	.-10     	; 0x822 <__fixunssfsi+0x42>
 82c:	3e f4       	brtc	.+14     	; 0x83c <__fixunssfsi+0x5c>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__fp_cmp>:
 83e:	99 0f       	add	r25, r25
 840:	00 08       	sbc	r0, r0
 842:	55 0f       	add	r21, r21
 844:	aa 0b       	sbc	r26, r26
 846:	e0 e8       	ldi	r30, 0x80	; 128
 848:	fe ef       	ldi	r31, 0xFE	; 254
 84a:	16 16       	cp	r1, r22
 84c:	17 06       	cpc	r1, r23
 84e:	e8 07       	cpc	r30, r24
 850:	f9 07       	cpc	r31, r25
 852:	c0 f0       	brcs	.+48     	; 0x884 <__stack+0x25>
 854:	12 16       	cp	r1, r18
 856:	13 06       	cpc	r1, r19
 858:	e4 07       	cpc	r30, r20
 85a:	f5 07       	cpc	r31, r21
 85c:	98 f0       	brcs	.+38     	; 0x884 <__stack+0x25>
 85e:	62 1b       	sub	r22, r18
 860:	73 0b       	sbc	r23, r19
 862:	84 0b       	sbc	r24, r20
 864:	95 0b       	sbc	r25, r21
 866:	39 f4       	brne	.+14     	; 0x876 <__stack+0x17>
 868:	0a 26       	eor	r0, r26
 86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
 86c:	23 2b       	or	r18, r19
 86e:	24 2b       	or	r18, r20
 870:	25 2b       	or	r18, r21
 872:	21 f4       	brne	.+8      	; 0x87c <__stack+0x1d>
 874:	08 95       	ret
 876:	0a 26       	eor	r0, r26
 878:	09 f4       	brne	.+2      	; 0x87c <__stack+0x1d>
 87a:	a1 40       	sbci	r26, 0x01	; 1
 87c:	a6 95       	lsr	r26
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	81 1d       	adc	r24, r1
 882:	81 1d       	adc	r24, r1
 884:	08 95       	ret

00000886 <__fp_split3>:
 886:	57 fd       	sbrc	r21, 7
 888:	90 58       	subi	r25, 0x80	; 128
 88a:	44 0f       	add	r20, r20
 88c:	55 1f       	adc	r21, r21
 88e:	59 f0       	breq	.+22     	; 0x8a6 <__fp_splitA+0x10>
 890:	5f 3f       	cpi	r21, 0xFF	; 255
 892:	71 f0       	breq	.+28     	; 0x8b0 <__fp_splitA+0x1a>
 894:	47 95       	ror	r20

00000896 <__fp_splitA>:
 896:	88 0f       	add	r24, r24
 898:	97 fb       	bst	r25, 7
 89a:	99 1f       	adc	r25, r25
 89c:	61 f0       	breq	.+24     	; 0x8b6 <__fp_splitA+0x20>
 89e:	9f 3f       	cpi	r25, 0xFF	; 255
 8a0:	79 f0       	breq	.+30     	; 0x8c0 <__fp_splitA+0x2a>
 8a2:	87 95       	ror	r24
 8a4:	08 95       	ret
 8a6:	12 16       	cp	r1, r18
 8a8:	13 06       	cpc	r1, r19
 8aa:	14 06       	cpc	r1, r20
 8ac:	55 1f       	adc	r21, r21
 8ae:	f2 cf       	rjmp	.-28     	; 0x894 <__fp_split3+0xe>
 8b0:	46 95       	lsr	r20
 8b2:	f1 df       	rcall	.-30     	; 0x896 <__fp_splitA>
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <__fp_splitA+0x30>
 8b6:	16 16       	cp	r1, r22
 8b8:	17 06       	cpc	r1, r23
 8ba:	18 06       	cpc	r1, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	f1 cf       	rjmp	.-30     	; 0x8a2 <__fp_splitA+0xc>
 8c0:	86 95       	lsr	r24
 8c2:	71 05       	cpc	r23, r1
 8c4:	61 05       	cpc	r22, r1
 8c6:	08 94       	sec
 8c8:	08 95       	ret

000008ca <__fp_zero>:
 8ca:	e8 94       	clt

000008cc <__fp_szero>:
 8cc:	bb 27       	eor	r27, r27
 8ce:	66 27       	eor	r22, r22
 8d0:	77 27       	eor	r23, r23
 8d2:	cb 01       	movw	r24, r22
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret

000008d8 <__gesf2>:
 8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_cmp>
 8dc:	08 f4       	brcc	.+2      	; 0x8e0 <__gesf2+0x8>
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	08 95       	ret

000008e2 <__mulsf3>:
 8e2:	0e 94 84 04 	call	0x908	; 0x908 <__mulsf3x>
 8e6:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_round>
 8ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_pscA>
 8ee:	38 f0       	brcs	.+14     	; 0x8fe <__mulsf3+0x1c>
 8f0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_pscB>
 8f4:	20 f0       	brcs	.+8      	; 0x8fe <__mulsf3+0x1c>
 8f6:	95 23       	and	r25, r21
 8f8:	11 f0       	breq	.+4      	; 0x8fe <__mulsf3+0x1c>
 8fa:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_inf>
 8fe:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__fp_nan>
 902:	11 24       	eor	r1, r1
 904:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_szero>

00000908 <__mulsf3x>:
 908:	0e 94 43 04 	call	0x886	; 0x886 <__fp_split3>
 90c:	70 f3       	brcs	.-36     	; 0x8ea <__mulsf3+0x8>

0000090e <__mulsf3_pse>:
 90e:	95 9f       	mul	r25, r21
 910:	c1 f3       	breq	.-16     	; 0x902 <__mulsf3+0x20>
 912:	95 0f       	add	r25, r21
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	55 1f       	adc	r21, r21
 918:	62 9f       	mul	r22, r18
 91a:	f0 01       	movw	r30, r0
 91c:	72 9f       	mul	r23, r18
 91e:	bb 27       	eor	r27, r27
 920:	f0 0d       	add	r31, r0
 922:	b1 1d       	adc	r27, r1
 924:	63 9f       	mul	r22, r19
 926:	aa 27       	eor	r26, r26
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	aa 1f       	adc	r26, r26
 92e:	64 9f       	mul	r22, r20
 930:	66 27       	eor	r22, r22
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	66 1f       	adc	r22, r22
 938:	82 9f       	mul	r24, r18
 93a:	22 27       	eor	r18, r18
 93c:	b0 0d       	add	r27, r0
 93e:	a1 1d       	adc	r26, r1
 940:	62 1f       	adc	r22, r18
 942:	73 9f       	mul	r23, r19
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	83 9f       	mul	r24, r19
 94c:	a0 0d       	add	r26, r0
 94e:	61 1d       	adc	r22, r1
 950:	22 1f       	adc	r18, r18
 952:	74 9f       	mul	r23, r20
 954:	33 27       	eor	r19, r19
 956:	a0 0d       	add	r26, r0
 958:	61 1d       	adc	r22, r1
 95a:	23 1f       	adc	r18, r19
 95c:	84 9f       	mul	r24, r20
 95e:	60 0d       	add	r22, r0
 960:	21 1d       	adc	r18, r1
 962:	82 2f       	mov	r24, r18
 964:	76 2f       	mov	r23, r22
 966:	6a 2f       	mov	r22, r26
 968:	11 24       	eor	r1, r1
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	9a f0       	brmi	.+38     	; 0x996 <__mulsf3_pse+0x88>
 970:	f1 f0       	breq	.+60     	; 0x9ae <__mulsf3_pse+0xa0>
 972:	88 23       	and	r24, r24
 974:	4a f0       	brmi	.+18     	; 0x988 <__mulsf3_pse+0x7a>
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	bb 1f       	adc	r27, r27
 97c:	66 1f       	adc	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	a9 f7       	brne	.-22     	; 0x972 <__mulsf3_pse+0x64>
 988:	9e 3f       	cpi	r25, 0xFE	; 254
 98a:	51 05       	cpc	r21, r1
 98c:	80 f0       	brcs	.+32     	; 0x9ae <__mulsf3_pse+0xa0>
 98e:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_inf>
 992:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__fp_szero>
 996:	5f 3f       	cpi	r21, 0xFF	; 255
 998:	e4 f3       	brlt	.-8      	; 0x992 <__mulsf3_pse+0x84>
 99a:	98 3e       	cpi	r25, 0xE8	; 232
 99c:	d4 f3       	brlt	.-12     	; 0x992 <__mulsf3_pse+0x84>
 99e:	86 95       	lsr	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b7 95       	ror	r27
 9a6:	f7 95       	ror	r31
 9a8:	e7 95       	ror	r30
 9aa:	9f 5f       	subi	r25, 0xFF	; 255
 9ac:	c1 f7       	brne	.-16     	; 0x99e <__mulsf3_pse+0x90>
 9ae:	fe 2b       	or	r31, r30
 9b0:	88 0f       	add	r24, r24
 9b2:	91 1d       	adc	r25, r1
 9b4:	96 95       	lsr	r25
 9b6:	87 95       	ror	r24
 9b8:	97 f9       	bld	r25, 7
 9ba:	08 95       	ret

000009bc <__fp_inf>:
 9bc:	97 f9       	bld	r25, 7
 9be:	9f 67       	ori	r25, 0x7F	; 127
 9c0:	80 e8       	ldi	r24, 0x80	; 128
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	08 95       	ret

000009c8 <__fp_nan>:
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	80 ec       	ldi	r24, 0xC0	; 192
 9cc:	08 95       	ret

000009ce <__fp_pscA>:
 9ce:	00 24       	eor	r0, r0
 9d0:	0a 94       	dec	r0
 9d2:	16 16       	cp	r1, r22
 9d4:	17 06       	cpc	r1, r23
 9d6:	18 06       	cpc	r1, r24
 9d8:	09 06       	cpc	r0, r25
 9da:	08 95       	ret

000009dc <__fp_pscB>:
 9dc:	00 24       	eor	r0, r0
 9de:	0a 94       	dec	r0
 9e0:	12 16       	cp	r1, r18
 9e2:	13 06       	cpc	r1, r19
 9e4:	14 06       	cpc	r1, r20
 9e6:	05 06       	cpc	r0, r21
 9e8:	08 95       	ret

000009ea <__fp_round>:
 9ea:	09 2e       	mov	r0, r25
 9ec:	03 94       	inc	r0
 9ee:	00 0c       	add	r0, r0
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0xc>
 9f2:	88 23       	and	r24, r24
 9f4:	52 f0       	brmi	.+20     	; 0xa0a <__fp_round+0x20>
 9f6:	bb 0f       	add	r27, r27
 9f8:	40 f4       	brcc	.+16     	; 0xa0a <__fp_round+0x20>
 9fa:	bf 2b       	or	r27, r31
 9fc:	11 f4       	brne	.+4      	; 0xa02 <__fp_round+0x18>
 9fe:	60 ff       	sbrs	r22, 0
 a00:	04 c0       	rjmp	.+8      	; 0xa0a <__fp_round+0x20>
 a02:	6f 5f       	subi	r22, 0xFF	; 255
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__udivmodsi4>:
 a0c:	a1 e2       	ldi	r26, 0x21	; 33
 a0e:	1a 2e       	mov	r1, r26
 a10:	aa 1b       	sub	r26, r26
 a12:	bb 1b       	sub	r27, r27
 a14:	fd 01       	movw	r30, r26
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <__udivmodsi4_ep>

00000a18 <__udivmodsi4_loop>:
 a18:	aa 1f       	adc	r26, r26
 a1a:	bb 1f       	adc	r27, r27
 a1c:	ee 1f       	adc	r30, r30
 a1e:	ff 1f       	adc	r31, r31
 a20:	a2 17       	cp	r26, r18
 a22:	b3 07       	cpc	r27, r19
 a24:	e4 07       	cpc	r30, r20
 a26:	f5 07       	cpc	r31, r21
 a28:	20 f0       	brcs	.+8      	; 0xa32 <__udivmodsi4_ep>
 a2a:	a2 1b       	sub	r26, r18
 a2c:	b3 0b       	sbc	r27, r19
 a2e:	e4 0b       	sbc	r30, r20
 a30:	f5 0b       	sbc	r31, r21

00000a32 <__udivmodsi4_ep>:
 a32:	66 1f       	adc	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	1a 94       	dec	r1
 a3c:	69 f7       	brne	.-38     	; 0xa18 <__udivmodsi4_loop>
 a3e:	60 95       	com	r22
 a40:	70 95       	com	r23
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	9b 01       	movw	r18, r22
 a48:	ac 01       	movw	r20, r24
 a4a:	bd 01       	movw	r22, r26
 a4c:	cf 01       	movw	r24, r30
 a4e:	08 95       	ret

00000a50 <_exit>:
 a50:	f8 94       	cli

00000a52 <__stop_program>:
 a52:	ff cf       	rjmp	.-2      	; 0xa52 <__stop_program>
