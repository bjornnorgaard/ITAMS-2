
GsmDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d22  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000d22  00000d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011cc  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009af  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c44  00000000  00000000  00002acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000308  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a3  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005be  00000000  00000000  00003ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000447d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  7a:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initLEDport>:
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
		// Turn OFF the actual LED (the rest are unchanged)
		PORTC = PORTC | mask;
	}
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	82 34       	cpi	r24, 0x42	; 66
  96:	91 05       	cpc	r25, r1
  98:	c9 f0       	breq	.+50     	; 0xcc <initLEDport+0x4a>
  9a:	83 34       	cpi	r24, 0x43	; 67
  9c:	91 05       	cpc	r25, r1
  9e:	24 f4       	brge	.+8      	; 0xa8 <initLEDport+0x26>
  a0:	81 34       	cpi	r24, 0x41	; 65
  a2:	91 05       	cpc	r25, r1
  a4:	41 f0       	breq	.+16     	; 0xb6 <initLEDport+0x34>
  a6:	28 c0       	rjmp	.+80     	; 0xf8 <initLEDport+0x76>
  a8:	83 34       	cpi	r24, 0x43	; 67
  aa:	91 05       	cpc	r25, r1
  ac:	d1 f0       	breq	.+52     	; 0xe2 <initLEDport+0x60>
  ae:	84 34       	cpi	r24, 0x44	; 68
  b0:	91 05       	cpc	r25, r1
  b2:	71 f1       	breq	.+92     	; 0x110 <initLEDport+0x8e>
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <initLEDport+0x76>
  b6:	8a e3       	ldi	r24, 0x3A	; 58
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	23 c0       	rjmp	.+70     	; 0x112 <initLEDport+0x90>
  cc:	87 e3       	ldi	r24, 0x37	; 55
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
  e0:	18 c0       	rjmp	.+48     	; 0x112 <initLEDport+0x90>
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
  f6:	0d c0       	rjmp	.+26     	; 0x112 <initLEDport+0x90>
  f8:	84 e3       	ldi	r24, 0x34	; 52
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	00 00       	nop
 10e:	01 c0       	rjmp	.+2      	; 0x112 <initLEDport+0x90>
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <toggleLED>:

void toggleLED(unsigned char led_nr)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <toggleLED+0x6>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	8a 83       	std	Y+2, r24	; 0x02
	// Local variable
	unsigned char mask;
	// We only have to do anything, if led_nr < 8
	if (led_nr <= MAX_LED_NR)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	a8 f4       	brcc	.+42     	; 0x156 <toggleLED+0x3c>
	{
		// Create mask based on the parameter (led_nr)
		mask = 0b00000001 << led_nr;
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <toggleLED+0x22>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <toggleLED+0x1e>
 140:	89 83       	std	Y+1, r24	; 0x01
		// Toggle the actual LED (the rest are unchanged)
		PORTC = PORTC ^ mask;
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	25 e3       	ldi	r18, 0x35	; 53
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	30 81       	ld	r19, Z
 14e:	29 81       	ldd	r18, Y+1	; 0x01
 150:	23 27       	eor	r18, r19
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	}
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <main>:
#include "ledDriver.h"
#include "MC35Commands.h"
#include "speakerDriver.h"

int main(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	cc 54       	subi	r28, 0x4C	; 76
 16a:	d1 09       	sbc	r29, r1
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61

	initializeUART(9600, 8);
 176:	48 e0       	ldi	r20, 0x08	; 8
 178:	60 e8       	ldi	r22, 0x80	; 128
 17a:	75 e2       	ldi	r23, 0x25	; 37
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 39 03 	call	0x672	; 0x672 <initializeUART>
	initializeSpeaker('B', 0b00000001);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 36 02 	call	0x46c	; 0x46c <initializeSpeaker>
	initLEDport();
 18c:	0e 94 41 00 	call	0x82	; 0x82 <initLEDport>
	//char response[50];
	//char msg[50] = "This is a message for you ";
	//char num[8] = "61423402";

	sendString("AT&F1");
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 67 04 	call	0x8ce	; 0x8ce <sendString>
	char callback[50];
	char c2[10];

	for (unsigned int i = 0; i < 50; i++ )
 198:	1a 82       	std	Y+2, r1	; 0x02
 19a:	19 82       	std	Y+1, r1	; 0x01
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <main+0x5a>
	{
		callback[i] = 0;
 19e:	9e 01       	movw	r18, r28
 1a0:	2f 5e       	subi	r18, 0xEF	; 239
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	9a 81       	ldd	r25, Y+2	; 0x02
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	fc 01       	movw	r30, r24
 1ae:	10 82       	st	Z, r1

	sendString("AT&F1");
	char callback[50];
	char c2[10];

	for (unsigned int i = 0; i < 50; i++ )
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	c2 97       	sbiw	r24, 0x32	; 50
 1c0:	70 f3       	brcs	.-36     	; 0x19e <main+0x3e>
	{
		callback[i] = 0;
	}
	disableEcho(callback);
 1c2:	ce 01       	movw	r24, r28
 1c4:	41 96       	adiw	r24, 0x11	; 17
 1c6:	0e 94 08 02 	call	0x410	; 0x410 <disableEcho>
	enableEcho(c2);
 1ca:	ce 01       	movw	r24, r28
 1cc:	8d 5b       	subi	r24, 0xBD	; 189
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <enableEcho>
	//setTextMode(callback);

	//sendSms(msg, num, callback);
	//getMessages(response);
	//sendSms(response, num);
	playTone(500);
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <playTone>

	while (1)
	{
		toggleLED(7);
 1dc:	87 e0       	ldi	r24, 0x07	; 7
 1de:	0e 94 8d 00 	call	0x11a	; 0x11a <toggleLED>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	aa ef       	ldi	r26, 0xFA	; 250
 1e8:	b3 e4       	ldi	r27, 0x43	; 67
 1ea:	8b 83       	std	Y+3, r24	; 0x03
 1ec:	9c 83       	std	Y+4, r25	; 0x04
 1ee:	ad 83       	std	Y+5, r26	; 0x05
 1f0:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1f2:	26 e6       	ldi	r18, 0x66	; 102
 1f4:	36 e6       	ldi	r19, 0x66	; 102
 1f6:	46 e6       	ldi	r20, 0x66	; 102
 1f8:	54 e4       	ldi	r21, 0x44	; 68
 1fa:	6b 81       	ldd	r22, Y+3	; 0x03
 1fc:	7c 81       	ldd	r23, Y+4	; 0x04
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	9e 81       	ldd	r25, Y+6	; 0x06
 202:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22
 20a:	8f 83       	std	Y+7, r24	; 0x07
 20c:	98 87       	std	Y+8, r25	; 0x08
 20e:	a9 87       	std	Y+9, r26	; 0x09
 210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e8       	ldi	r20, 0x80	; 128
 218:	5f e3       	ldi	r21, 0x3F	; 63
 21a:	6f 81       	ldd	r22, Y+7	; 0x07
 21c:	78 85       	ldd	r23, Y+8	; 0x08
 21e:	89 85       	ldd	r24, Y+9	; 0x09
 220:	9a 85       	ldd	r25, Y+10	; 0x0a
 222:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	2c f4       	brge	.+10     	; 0x234 <main+0xd4>
		__ticks = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9c 87       	std	Y+12, r25	; 0x0c
 230:	8b 87       	std	Y+11, r24	; 0x0b
 232:	3f c0       	rjmp	.+126    	; 0x2b2 <main+0x152>
	else if (__tmp > 65535)
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	3f ef       	ldi	r19, 0xFF	; 255
 238:	4f e7       	ldi	r20, 0x7F	; 127
 23a:	57 e4       	ldi	r21, 0x47	; 71
 23c:	6f 81       	ldd	r22, Y+7	; 0x07
 23e:	78 85       	ldd	r23, Y+8	; 0x08
 240:	89 85       	ldd	r24, Y+9	; 0x09
 242:	9a 85       	ldd	r25, Y+10	; 0x0a
 244:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__gesf2>
 248:	18 16       	cp	r1, r24
 24a:	4c f5       	brge	.+82     	; 0x29e <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e2       	ldi	r20, 0x20	; 32
 252:	51 e4       	ldi	r21, 0x41	; 65
 254:	6b 81       	ldd	r22, Y+3	; 0x03
 256:	7c 81       	ldd	r23, Y+4	; 0x04
 258:	8d 81       	ldd	r24, Y+5	; 0x05
 25a:	9e 81       	ldd	r25, Y+6	; 0x06
 25c:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	bc 01       	movw	r22, r24
 266:	cd 01       	movw	r24, r26
 268:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	9c 87       	std	Y+12, r25	; 0x0c
 272:	8b 87       	std	Y+11, r24	; 0x0b
 274:	0f c0       	rjmp	.+30     	; 0x294 <main+0x134>
 276:	8c e5       	ldi	r24, 0x5C	; 92
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9e 87       	std	Y+14, r25	; 0x0e
 27c:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27e:	8d 85       	ldd	r24, Y+13	; 0x0d
 280:	9e 85       	ldd	r25, Y+14	; 0x0e
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x122>
 286:	9e 87       	std	Y+14, r25	; 0x0e
 288:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	8b 85       	ldd	r24, Y+11	; 0x0b
 28c:	9c 85       	ldd	r25, Y+12	; 0x0c
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	9c 87       	std	Y+12, r25	; 0x0c
 292:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	8b 85       	ldd	r24, Y+11	; 0x0b
 296:	9c 85       	ldd	r25, Y+12	; 0x0c
 298:	89 2b       	or	r24, r25
 29a:	69 f7       	brne	.-38     	; 0x276 <main+0x116>
 29c:	14 c0       	rjmp	.+40     	; 0x2c6 <main+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29e:	6f 81       	ldd	r22, Y+7	; 0x07
 2a0:	78 85       	ldd	r23, Y+8	; 0x08
 2a2:	89 85       	ldd	r24, Y+9	; 0x09
 2a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a6:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 2aa:	dc 01       	movw	r26, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	9c 87       	std	Y+12, r25	; 0x0c
 2b0:	8b 87       	std	Y+11, r24	; 0x0b
 2b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b6:	98 8b       	std	Y+16, r25	; 0x10
 2b8:	8f 87       	std	Y+15, r24	; 0x0f
 2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 2bc:	98 89       	ldd	r25, Y+16	; 0x10
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x15e>
 2c2:	98 8b       	std	Y+16, r25	; 0x10
 2c4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	}
 2c6:	8a cf       	rjmp	.-236    	; 0x1dc <main+0x7c>

000002c8 <enableEcho>:
		i++;
	}
}

void enableEcho(char* callback)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	63 97       	sbiw	r28, 0x13	; 19
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	9b 8b       	std	Y+19, r25	; 0x13
 2de:	8a 8b       	std	Y+18, r24	; 0x12
	unsigned int i = 0;
 2e0:	1a 82       	std	Y+2, r1	; 0x02
 2e2:	19 82       	std	Y+1, r1	; 0x01

	sendString("ATE1\r\n");
 2e4:	83 e7       	ldi	r24, 0x73	; 115
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 67 04 	call	0x8ce	; 0x8ce <sendString>
	while(charReady())
 2ec:	83 c0       	rjmp	.+262    	; 0x3f4 <enableEcho+0x12c>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	a8 e4       	ldi	r26, 0x48	; 72
 2f4:	b2 e4       	ldi	r27, 0x42	; 66
 2f6:	8c 83       	std	Y+4, r24	; 0x04
 2f8:	9d 83       	std	Y+5, r25	; 0x05
 2fa:	ae 83       	std	Y+6, r26	; 0x06
 2fc:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	4a e7       	ldi	r20, 0x7A	; 122
 304:	53 e4       	ldi	r21, 0x43	; 67
 306:	6c 81       	ldd	r22, Y+4	; 0x04
 308:	7d 81       	ldd	r23, Y+5	; 0x05
 30a:	8e 81       	ldd	r24, Y+6	; 0x06
 30c:	9f 81       	ldd	r25, Y+7	; 0x07
 30e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 312:	dc 01       	movw	r26, r24
 314:	cb 01       	movw	r24, r22
 316:	88 87       	std	Y+8, r24	; 0x08
 318:	99 87       	std	Y+9, r25	; 0x09
 31a:	aa 87       	std	Y+10, r26	; 0x0a
 31c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e8       	ldi	r20, 0x80	; 128
 324:	5f e3       	ldi	r21, 0x3F	; 63
 326:	68 85       	ldd	r22, Y+8	; 0x08
 328:	79 85       	ldd	r23, Y+9	; 0x09
 32a:	8a 85       	ldd	r24, Y+10	; 0x0a
 32c:	9b 85       	ldd	r25, Y+11	; 0x0b
 32e:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 332:	88 23       	and	r24, r24
 334:	2c f4       	brge	.+10     	; 0x340 <enableEcho+0x78>
		__ticks = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	9d 87       	std	Y+13, r25	; 0x0d
 33c:	8c 87       	std	Y+12, r24	; 0x0c
 33e:	3f c0       	rjmp	.+126    	; 0x3be <enableEcho+0xf6>
	else if (__tmp > 65535)
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	4f e7       	ldi	r20, 0x7F	; 127
 346:	57 e4       	ldi	r21, 0x47	; 71
 348:	68 85       	ldd	r22, Y+8	; 0x08
 34a:	79 85       	ldd	r23, Y+9	; 0x09
 34c:	8a 85       	ldd	r24, Y+10	; 0x0a
 34e:	9b 85       	ldd	r25, Y+11	; 0x0b
 350:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__gesf2>
 354:	18 16       	cp	r1, r24
 356:	4c f5       	brge	.+82     	; 0x3aa <enableEcho+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e2       	ldi	r20, 0x20	; 32
 35e:	51 e4       	ldi	r21, 0x41	; 65
 360:	6c 81       	ldd	r22, Y+4	; 0x04
 362:	7d 81       	ldd	r23, Y+5	; 0x05
 364:	8e 81       	ldd	r24, Y+6	; 0x06
 366:	9f 81       	ldd	r25, Y+7	; 0x07
 368:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	bc 01       	movw	r22, r24
 372:	cd 01       	movw	r24, r26
 374:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	9d 87       	std	Y+13, r25	; 0x0d
 37e:	8c 87       	std	Y+12, r24	; 0x0c
 380:	0f c0       	rjmp	.+30     	; 0x3a0 <enableEcho+0xd8>
 382:	89 e1       	ldi	r24, 0x19	; 25
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	9f 87       	std	Y+15, r25	; 0x0f
 388:	8e 87       	std	Y+14, r24	; 0x0e
 38a:	8e 85       	ldd	r24, Y+14	; 0x0e
 38c:	9f 85       	ldd	r25, Y+15	; 0x0f
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <enableEcho+0xc6>
 392:	9f 87       	std	Y+15, r25	; 0x0f
 394:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 396:	8c 85       	ldd	r24, Y+12	; 0x0c
 398:	9d 85       	ldd	r25, Y+13	; 0x0d
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	9d 87       	std	Y+13, r25	; 0x0d
 39e:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a0:	8c 85       	ldd	r24, Y+12	; 0x0c
 3a2:	9d 85       	ldd	r25, Y+13	; 0x0d
 3a4:	89 2b       	or	r24, r25
 3a6:	69 f7       	brne	.-38     	; 0x382 <enableEcho+0xba>
 3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <enableEcho+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3aa:	68 85       	ldd	r22, Y+8	; 0x08
 3ac:	79 85       	ldd	r23, Y+9	; 0x09
 3ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 3b0:	9b 85       	ldd	r25, Y+11	; 0x0b
 3b2:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 3b6:	dc 01       	movw	r26, r24
 3b8:	cb 01       	movw	r24, r22
 3ba:	9d 87       	std	Y+13, r25	; 0x0d
 3bc:	8c 87       	std	Y+12, r24	; 0x0c
 3be:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c0:	9d 85       	ldd	r25, Y+13	; 0x0d
 3c2:	99 8b       	std	Y+17, r25	; 0x11
 3c4:	88 8b       	std	Y+16, r24	; 0x10
 3c6:	88 89       	ldd	r24, Y+16	; 0x10
 3c8:	99 89       	ldd	r25, Y+17	; 0x11
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <enableEcho+0x102>
 3ce:	99 8b       	std	Y+17, r25	; 0x11
 3d0:	88 8b       	std	Y+16, r24	; 0x10
	{
		_delay_ms(50);
		char test = readChar();
 3d2:	0e 94 bf 03 	call	0x77e	; 0x77e <readChar>
 3d6:	8b 83       	std	Y+3, r24	; 0x03
		callback[i] = test;
 3d8:	2a 89       	ldd	r18, Y+18	; 0x12
 3da:	3b 89       	ldd	r19, Y+19	; 0x13
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	82 0f       	add	r24, r18
 3e2:	93 1f       	adc	r25, r19
 3e4:	2b 81       	ldd	r18, Y+3	; 0x03
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
		i++;
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	9a 83       	std	Y+2, r25	; 0x02
 3f2:	89 83       	std	Y+1, r24	; 0x01
void enableEcho(char* callback)
{
	unsigned int i = 0;

	sendString("ATE1\r\n");
	while(charReady())
 3f4:	0e 94 b3 03 	call	0x766	; 0x766 <charReady>
 3f8:	89 2b       	or	r24, r25
 3fa:	09 f0       	breq	.+2      	; 0x3fe <enableEcho+0x136>
 3fc:	78 cf       	rjmp	.-272    	; 0x2ee <enableEcho+0x26>
		_delay_ms(50);
		char test = readChar();
		callback[i] = test;
		i++;
	}
}
 3fe:	63 96       	adiw	r28, 0x13	; 19
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <disableEcho>:

void disableEcho(char* callback)
{
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <disableEcho+0xa>
 41a:	00 d0       	rcall	.+0      	; 0x41c <disableEcho+0xc>
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	9c 83       	std	Y+4, r25	; 0x04
 422:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int i = 0;
 424:	1a 82       	std	Y+2, r1	; 0x02
 426:	19 82       	std	Y+1, r1	; 0x01

	sendString("ATE0\r\n");
 428:	8a e7       	ldi	r24, 0x7A	; 122
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 67 04 	call	0x8ce	; 0x8ce <sendString>
	while(charReady())
 430:	10 c0       	rjmp	.+32     	; 0x452 <disableEcho+0x42>
	{
		callback[i] = readChar();
 432:	2b 81       	ldd	r18, Y+3	; 0x03
 434:	3c 81       	ldd	r19, Y+4	; 0x04
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	89 01       	movw	r16, r18
 43c:	08 0f       	add	r16, r24
 43e:	19 1f       	adc	r17, r25
 440:	0e 94 bf 03 	call	0x77e	; 0x77e <readChar>
 444:	f8 01       	movw	r30, r16
 446:	80 83       	st	Z, r24
		i++;
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
void disableEcho(char* callback)
{
	unsigned int i = 0;

	sendString("ATE0\r\n");
	while(charReady())
 452:	0e 94 b3 03 	call	0x766	; 0x766 <charReady>
 456:	89 2b       	or	r24, r25
 458:	61 f7       	brne	.-40     	; 0x432 <disableEcho+0x22>
	{
		callback[i] = readChar();
		i++;
	}
}
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <initializeSpeaker>:
#define F_CPU 3686400
#include <util/delay.h>
#include "speakerDriver.h"

void initializeSpeaker(char port, unsigned char pattern)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <initializeSpeaker+0x6>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	91 05       	cpc	r25, r1
 484:	a1 f0       	breq	.+40     	; 0x4ae <initializeSpeaker+0x42>
 486:	83 34       	cpi	r24, 0x43	; 67
 488:	91 05       	cpc	r25, r1
 48a:	24 f4       	brge	.+8      	; 0x494 <initializeSpeaker+0x28>
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	91 05       	cpc	r25, r1
 490:	41 f0       	breq	.+16     	; 0x4a2 <initializeSpeaker+0x36>
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <initializeSpeaker+0x5a>
 494:	83 34       	cpi	r24, 0x43	; 67
 496:	91 05       	cpc	r25, r1
 498:	81 f0       	breq	.+32     	; 0x4ba <initializeSpeaker+0x4e>
 49a:	84 34       	cpi	r24, 0x44	; 68
 49c:	91 05       	cpc	r25, r1
 49e:	d1 f0       	breq	.+52     	; 0x4d4 <initializeSpeaker+0x68>
 4a0:	12 c0       	rjmp	.+36     	; 0x4c6 <initializeSpeaker+0x5a>
	{
		case 'A':
		DDRA = pattern;
 4a2:	8a e3       	ldi	r24, 0x3A	; 58
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	2a 81       	ldd	r18, Y+2	; 0x02
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
		break;
 4ac:	14 c0       	rjmp	.+40     	; 0x4d6 <initializeSpeaker+0x6a>
		case 'B':
		DDRB = pattern;
 4ae:	87 e3       	ldi	r24, 0x37	; 55
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2a 81       	ldd	r18, Y+2	; 0x02
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
		break;
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <initializeSpeaker+0x6a>
		case 'C':
		DDRC = pattern;
 4ba:	84 e3       	ldi	r24, 0x34	; 52
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	2a 81       	ldd	r18, Y+2	; 0x02
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
		break;
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <initializeSpeaker+0x6a>
		case 'D':
		break;
		DDRD = pattern;
		break;
		default:
		DDRB = pattern;
 4c6:	87 e3       	ldi	r24, 0x37	; 55
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	2a 81       	ldd	r18, Y+2	; 0x02
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
		break;
 4d0:	00 00       	nop
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <initializeSpeaker+0x6a>
		break;
		case 'C':
		DDRC = pattern;
		break;
		case 'D':
		break;
 4d4:	00 00       	nop
		break;
		default:
		DDRB = pattern;
		break;
	}
}
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <playTone>:

void playTone(unsigned int freq)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	6c 97       	sbiw	r28, 0x1c	; 28
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	9a 8f       	std	Y+26, r25	; 0x1a
 4f6:	89 8f       	std	Y+25, r24	; 0x19

	unsigned int milisec = 1000/freq;
 4f8:	88 ee       	ldi	r24, 0xE8	; 232
 4fa:	93 e0       	ldi	r25, 0x03	; 3
 4fc:	29 8d       	ldd	r18, Y+25	; 0x19
 4fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
 500:	b9 01       	movw	r22, r18
 502:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__udivmodhi4>
 506:	cb 01       	movw	r24, r22
 508:	9e 83       	std	Y+6, r25	; 0x06
 50a:	8d 83       	std	Y+5, r24	; 0x05

	unsigned int outer = 100;
 50c:	84 e6       	ldi	r24, 0x64	; 100
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	98 87       	std	Y+8, r25	; 0x08
 512:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int inner = 2;
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9a 87       	std	Y+10, r25	; 0x0a
 51a:	89 87       	std	Y+9, r24	; 0x09
	for (unsigned int i = 0;i<outer; i++)
 51c:	1a 82       	std	Y+2, r1	; 0x02
 51e:	19 82       	std	Y+1, r1	; 0x01
 520:	97 c0       	rjmp	.+302    	; 0x650 <playTone+0x170>
	{
		for (unsigned int n = 0; n< inner;n++)
 522:	1c 82       	std	Y+4, r1	; 0x04
 524:	1b 82       	std	Y+3, r1	; 0x03
 526:	87 c0       	rjmp	.+270    	; 0x636 <playTone+0x156>
		{
			PORTB = ~PORTB;
 528:	88 e3       	ldi	r24, 0x38	; 56
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	28 e3       	ldi	r18, 0x38	; 56
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	20 81       	ld	r18, Z
 534:	20 95       	com	r18
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
			_delay_ms(milisec);
 53a:	8d 81       	ldd	r24, Y+5	; 0x05
 53c:	9e 81       	ldd	r25, Y+6	; 0x06
 53e:	cc 01       	movw	r24, r24
 540:	a0 e0       	ldi	r26, 0x00	; 0
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	bc 01       	movw	r22, r24
 546:	cd 01       	movw	r24, r26
 548:	0e 94 35 05 	call	0xa6a	; 0xa6a <__floatunsisf>
 54c:	dc 01       	movw	r26, r24
 54e:	cb 01       	movw	r24, r22
 550:	8b 87       	std	Y+11, r24	; 0x0b
 552:	9c 87       	std	Y+12, r25	; 0x0c
 554:	ad 87       	std	Y+13, r26	; 0x0d
 556:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 558:	26 e6       	ldi	r18, 0x66	; 102
 55a:	36 e6       	ldi	r19, 0x66	; 102
 55c:	46 e6       	ldi	r20, 0x66	; 102
 55e:	54 e4       	ldi	r21, 0x44	; 68
 560:	6b 85       	ldd	r22, Y+11	; 0x0b
 562:	7c 85       	ldd	r23, Y+12	; 0x0c
 564:	8d 85       	ldd	r24, Y+13	; 0x0d
 566:	9e 85       	ldd	r25, Y+14	; 0x0e
 568:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 56c:	dc 01       	movw	r26, r24
 56e:	cb 01       	movw	r24, r22
 570:	8f 87       	std	Y+15, r24	; 0x0f
 572:	98 8b       	std	Y+16, r25	; 0x10
 574:	a9 8b       	std	Y+17, r26	; 0x11
 576:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e8       	ldi	r20, 0x80	; 128
 57e:	5f e3       	ldi	r21, 0x3F	; 63
 580:	6f 85       	ldd	r22, Y+15	; 0x0f
 582:	78 89       	ldd	r23, Y+16	; 0x10
 584:	89 89       	ldd	r24, Y+17	; 0x11
 586:	9a 89       	ldd	r25, Y+18	; 0x12
 588:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 58c:	88 23       	and	r24, r24
 58e:	2c f4       	brge	.+10     	; 0x59a <playTone+0xba>
		__ticks = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	9c 8b       	std	Y+20, r25	; 0x14
 596:	8b 8b       	std	Y+19, r24	; 0x13
 598:	3f c0       	rjmp	.+126    	; 0x618 <playTone+0x138>
	else if (__tmp > 65535)
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	3f ef       	ldi	r19, 0xFF	; 255
 59e:	4f e7       	ldi	r20, 0x7F	; 127
 5a0:	57 e4       	ldi	r21, 0x47	; 71
 5a2:	6f 85       	ldd	r22, Y+15	; 0x0f
 5a4:	78 89       	ldd	r23, Y+16	; 0x10
 5a6:	89 89       	ldd	r24, Y+17	; 0x11
 5a8:	9a 89       	ldd	r25, Y+18	; 0x12
 5aa:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__gesf2>
 5ae:	18 16       	cp	r1, r24
 5b0:	4c f5       	brge	.+82     	; 0x604 <playTone+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5b2:	20 e0       	ldi	r18, 0x00	; 0
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e2       	ldi	r20, 0x20	; 32
 5b8:	51 e4       	ldi	r21, 0x41	; 65
 5ba:	6b 85       	ldd	r22, Y+11	; 0x0b
 5bc:	7c 85       	ldd	r23, Y+12	; 0x0c
 5be:	8d 85       	ldd	r24, Y+13	; 0x0d
 5c0:	9e 85       	ldd	r25, Y+14	; 0x0e
 5c2:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 5c6:	dc 01       	movw	r26, r24
 5c8:	cb 01       	movw	r24, r22
 5ca:	bc 01       	movw	r22, r24
 5cc:	cd 01       	movw	r24, r26
 5ce:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 5d2:	dc 01       	movw	r26, r24
 5d4:	cb 01       	movw	r24, r22
 5d6:	9c 8b       	std	Y+20, r25	; 0x14
 5d8:	8b 8b       	std	Y+19, r24	; 0x13
 5da:	0f c0       	rjmp	.+30     	; 0x5fa <playTone+0x11a>
 5dc:	8c e5       	ldi	r24, 0x5C	; 92
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9e 8b       	std	Y+22, r25	; 0x16
 5e2:	8d 8b       	std	Y+21, r24	; 0x15
 5e4:	8d 89       	ldd	r24, Y+21	; 0x15
 5e6:	9e 89       	ldd	r25, Y+22	; 0x16
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <playTone+0x108>
 5ec:	9e 8b       	std	Y+22, r25	; 0x16
 5ee:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f0:	8b 89       	ldd	r24, Y+19	; 0x13
 5f2:	9c 89       	ldd	r25, Y+20	; 0x14
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	9c 8b       	std	Y+20, r25	; 0x14
 5f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5fa:	8b 89       	ldd	r24, Y+19	; 0x13
 5fc:	9c 89       	ldd	r25, Y+20	; 0x14
 5fe:	89 2b       	or	r24, r25
 600:	69 f7       	brne	.-38     	; 0x5dc <playTone+0xfc>
 602:	14 c0       	rjmp	.+40     	; 0x62c <playTone+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 604:	6f 85       	ldd	r22, Y+15	; 0x0f
 606:	78 89       	ldd	r23, Y+16	; 0x10
 608:	89 89       	ldd	r24, Y+17	; 0x11
 60a:	9a 89       	ldd	r25, Y+18	; 0x12
 60c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 610:	dc 01       	movw	r26, r24
 612:	cb 01       	movw	r24, r22
 614:	9c 8b       	std	Y+20, r25	; 0x14
 616:	8b 8b       	std	Y+19, r24	; 0x13
 618:	8b 89       	ldd	r24, Y+19	; 0x13
 61a:	9c 89       	ldd	r25, Y+20	; 0x14
 61c:	98 8f       	std	Y+24, r25	; 0x18
 61e:	8f 8b       	std	Y+23, r24	; 0x17
 620:	8f 89       	ldd	r24, Y+23	; 0x17
 622:	98 8d       	ldd	r25, Y+24	; 0x18
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <playTone+0x144>
 628:	98 8f       	std	Y+24, r25	; 0x18
 62a:	8f 8b       	std	Y+23, r24	; 0x17

	unsigned int outer = 100;
	unsigned int inner = 2;
	for (unsigned int i = 0;i<outer; i++)
	{
		for (unsigned int n = 0; n< inner;n++)
 62c:	8b 81       	ldd	r24, Y+3	; 0x03
 62e:	9c 81       	ldd	r25, Y+4	; 0x04
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	9c 83       	std	Y+4, r25	; 0x04
 634:	8b 83       	std	Y+3, r24	; 0x03
 636:	2b 81       	ldd	r18, Y+3	; 0x03
 638:	3c 81       	ldd	r19, Y+4	; 0x04
 63a:	89 85       	ldd	r24, Y+9	; 0x09
 63c:	9a 85       	ldd	r25, Y+10	; 0x0a
 63e:	28 17       	cp	r18, r24
 640:	39 07       	cpc	r19, r25
 642:	08 f4       	brcc	.+2      	; 0x646 <playTone+0x166>
 644:	71 cf       	rjmp	.-286    	; 0x528 <playTone+0x48>

	unsigned int milisec = 1000/freq;

	unsigned int outer = 100;
	unsigned int inner = 2;
	for (unsigned int i = 0;i<outer; i++)
 646:	89 81       	ldd	r24, Y+1	; 0x01
 648:	9a 81       	ldd	r25, Y+2	; 0x02
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	29 81       	ldd	r18, Y+1	; 0x01
 652:	3a 81       	ldd	r19, Y+2	; 0x02
 654:	8f 81       	ldd	r24, Y+7	; 0x07
 656:	98 85       	ldd	r25, Y+8	; 0x08
 658:	28 17       	cp	r18, r24
 65a:	39 07       	cpc	r19, r25
 65c:	08 f4       	brcc	.+2      	; 0x660 <playTone+0x180>
 65e:	61 cf       	rjmp	.-318    	; 0x522 <playTone+0x42>
		{
			PORTB = ~PORTB;
			_delay_ms(milisec);
		}
	}
 660:	6c 96       	adiw	r28, 0x1c	; 28
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <initializeUART>:
#define  F_CPU 3686400
#include <util/delay.h>
#define  XTAL 3686400

void initializeUART(unsigned long baudRate, unsigned char dataBit)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
 67a:	2b 97       	sbiw	r28, 0x0b	; 11
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	6b 83       	std	Y+3, r22	; 0x03
 688:	7c 83       	std	Y+4, r23	; 0x04
 68a:	8d 83       	std	Y+5, r24	; 0x05
 68c:	9e 83       	std	Y+6, r25	; 0x06
 68e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int tempUBRR;
	 if ((baudRate >= 110) && (baudRate <= 115200) && (dataBit >=5) && (dataBit <= 8))
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	ad 81       	ldd	r26, Y+5	; 0x05
 696:	be 81       	ldd	r27, Y+6	; 0x06
 698:	8e 36       	cpi	r24, 0x6E	; 110
 69a:	91 05       	cpc	r25, r1
 69c:	a1 05       	cpc	r26, r1
 69e:	b1 05       	cpc	r27, r1
 6a0:	08 f4       	brcc	.+2      	; 0x6a4 <initializeUART+0x32>
 6a2:	58 c0       	rjmp	.+176    	; 0x754 <initializeUART+0xe2>
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	9c 81       	ldd	r25, Y+4	; 0x04
 6a8:	ad 81       	ldd	r26, Y+5	; 0x05
 6aa:	be 81       	ldd	r27, Y+6	; 0x06
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	92 4c       	sbci	r25, 0xC2	; 194
 6b0:	a1 40       	sbci	r26, 0x01	; 1
 6b2:	b1 05       	cpc	r27, r1
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <initializeUART+0x46>
 6b6:	4e c0       	rjmp	.+156    	; 0x754 <initializeUART+0xe2>
 6b8:	8f 81       	ldd	r24, Y+7	; 0x07
 6ba:	85 30       	cpi	r24, 0x05	; 5
 6bc:	08 f4       	brcc	.+2      	; 0x6c0 <initializeUART+0x4e>
 6be:	4a c0       	rjmp	.+148    	; 0x754 <initializeUART+0xe2>
 6c0:	8f 81       	ldd	r24, Y+7	; 0x07
 6c2:	89 30       	cpi	r24, 0x09	; 9
 6c4:	08 f0       	brcs	.+2      	; 0x6c8 <initializeUART+0x56>
 6c6:	46 c0       	rjmp	.+140    	; 0x754 <initializeUART+0xe2>
	 {
		 // "Normal" clock, no multiprocessor mode (= default)
		 UCSRA = 0b00100000;
 6c8:	8b e2       	ldi	r24, 0x2B	; 43
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	20 e2       	ldi	r18, 0x20	; 32
 6ce:	fc 01       	movw	r30, r24
 6d0:	20 83       	st	Z, r18
		 // No interrupts enabled
		 // Receiver enabled
		 // Transmitter enabled
		 // No 9 bit operation
		 UCSRB = 0b00011000;
 6d2:	8a e2       	ldi	r24, 0x2A	; 42
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	28 e1       	ldi	r18, 0x18	; 24
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
		 // Asynchronous operation, 1 stop bit, no parity
		 // Bit7 always has to be 1
		 // Bit 2 and bit 1 controls the number of data bits
		 UCSRC = 0b10000000 | (dataBit-5)<<1;
 6dc:	80 e4       	ldi	r24, 0x40	; 64
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	2f 81       	ldd	r18, Y+7	; 0x07
 6e2:	22 2f       	mov	r18, r18
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	25 50       	subi	r18, 0x05	; 5
 6e8:	31 09       	sbc	r19, r1
 6ea:	22 0f       	add	r18, r18
 6ec:	33 1f       	adc	r19, r19
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	fc 01       	movw	r30, r24
 6f2:	20 83       	st	Z, r18
		 // Set Baud Rate according to the parameter BaudRate:
		 // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
		 //                   then write the two 8-bit registers separately):
		 tempUBRR = XTAL/(16*baudRate) - 1;
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	9c 81       	ldd	r25, Y+4	; 0x04
 6f8:	ad 81       	ldd	r26, Y+5	; 0x05
 6fa:	be 81       	ldd	r27, Y+6	; 0x06
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	aa 1f       	adc	r26, r26
 702:	bb 1f       	adc	r27, r27
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	aa 1f       	adc	r26, r26
 70a:	bb 1f       	adc	r27, r27
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	aa 1f       	adc	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	aa 1f       	adc	r26, r26
 71a:	bb 1f       	adc	r27, r27
 71c:	9c 01       	movw	r18, r24
 71e:	ad 01       	movw	r20, r26
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e4       	ldi	r25, 0x40	; 64
 724:	a8 e3       	ldi	r26, 0x38	; 56
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	bc 01       	movw	r22, r24
 72a:	cd 01       	movw	r24, r26
 72c:	0e 94 6d 06 	call	0xcda	; 0xcda <__udivmodsi4>
 730:	da 01       	movw	r26, r20
 732:	c9 01       	movw	r24, r18
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	9a 83       	std	Y+2, r25	; 0x02
 738:	89 83       	std	Y+1, r24	; 0x01
		 // Write upper part of UBRR
		 UBRRH = tempUBRR >> 8;
 73a:	80 e4       	ldi	r24, 0x40	; 64
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	29 81       	ldd	r18, Y+1	; 0x01
 740:	3a 81       	ldd	r19, Y+2	; 0x02
 742:	23 2f       	mov	r18, r19
 744:	33 27       	eor	r19, r19
 746:	fc 01       	movw	r30, r24
 748:	20 83       	st	Z, r18
		 // Write lower part of UBRR
		 UBRRL = tempUBRR;
 74a:	89 e2       	ldi	r24, 0x29	; 41
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	29 81       	ldd	r18, Y+1	; 0x01
 750:	fc 01       	movw	r30, r24
 752:	20 83       	st	Z, r18
	 }
}
 754:	2b 96       	adiw	r28, 0x0b	; 11
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	f8 94       	cli
 75a:	de bf       	out	0x3e, r29	; 62
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	cd bf       	out	0x3d, r28	; 61
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <charReady>:
/*************************************************************************
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char charReady()
{
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
   return UCSRA & (1<<7);
 76e:	8b e2       	ldi	r24, 0x2B	; 43
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	fc 01       	movw	r30, r24
 774:	80 81       	ld	r24, Z
 776:	80 78       	andi	r24, 0x80	; 128
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <readChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char readChar()
{
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
	// Wait for new character received
	while ( (UCSRA & (1<<7)) == 0 )
 786:	00 00       	nop
 788:	8b e2       	ldi	r24, 0x2B	; 43
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	fc 01       	movw	r30, r24
 78e:	80 81       	ld	r24, Z
 790:	88 23       	and	r24, r24
 792:	d4 f7       	brge	.-12     	; 0x788 <readChar+0xa>
	{}
	// Then return it
	return UDR;
 794:	8c e2       	ldi	r24, 0x2C	; 44
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	fc 01       	movw	r30, r24
 79a:	80 81       	ld	r24, Z
}
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <sendChar>:
Then it send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void sendChar(char Tegn)
{
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2f 97       	sbiw	r28, 0x0f	; 15
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	8f 87       	std	Y+15, r24	; 0x0f
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	a8 e4       	ldi	r26, 0x48	; 72
 7be:	b2 e4       	ldi	r27, 0x42	; 66
 7c0:	89 83       	std	Y+1, r24	; 0x01
 7c2:	9a 83       	std	Y+2, r25	; 0x02
 7c4:	ab 83       	std	Y+3, r26	; 0x03
 7c6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7c8:	26 e6       	ldi	r18, 0x66	; 102
 7ca:	36 e6       	ldi	r19, 0x66	; 102
 7cc:	46 e6       	ldi	r20, 0x66	; 102
 7ce:	54 e4       	ldi	r21, 0x44	; 68
 7d0:	69 81       	ldd	r22, Y+1	; 0x01
 7d2:	7a 81       	ldd	r23, Y+2	; 0x02
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	9c 81       	ldd	r25, Y+4	; 0x04
 7d8:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 7dc:	dc 01       	movw	r26, r24
 7de:	cb 01       	movw	r24, r22
 7e0:	8d 83       	std	Y+5, r24	; 0x05
 7e2:	9e 83       	std	Y+6, r25	; 0x06
 7e4:	af 83       	std	Y+7, r26	; 0x07
 7e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	40 e8       	ldi	r20, 0x80	; 128
 7ee:	5f e3       	ldi	r21, 0x3F	; 63
 7f0:	6d 81       	ldd	r22, Y+5	; 0x05
 7f2:	7e 81       	ldd	r23, Y+6	; 0x06
 7f4:	8f 81       	ldd	r24, Y+7	; 0x07
 7f6:	98 85       	ldd	r25, Y+8	; 0x08
 7f8:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 7fc:	88 23       	and	r24, r24
 7fe:	2c f4       	brge	.+10     	; 0x80a <sendChar+0x68>
		__ticks = 1;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	9a 87       	std	Y+10, r25	; 0x0a
 806:	89 87       	std	Y+9, r24	; 0x09
 808:	3f c0       	rjmp	.+126    	; 0x888 <__stack+0x29>
	else if (__tmp > 65535)
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	3f ef       	ldi	r19, 0xFF	; 255
 80e:	4f e7       	ldi	r20, 0x7F	; 127
 810:	57 e4       	ldi	r21, 0x47	; 71
 812:	6d 81       	ldd	r22, Y+5	; 0x05
 814:	7e 81       	ldd	r23, Y+6	; 0x06
 816:	8f 81       	ldd	r24, Y+7	; 0x07
 818:	98 85       	ldd	r25, Y+8	; 0x08
 81a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__gesf2>
 81e:	18 16       	cp	r1, r24
 820:	4c f5       	brge	.+82     	; 0x874 <__stack+0x15>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	40 e2       	ldi	r20, 0x20	; 32
 828:	51 e4       	ldi	r21, 0x41	; 65
 82a:	69 81       	ldd	r22, Y+1	; 0x01
 82c:	7a 81       	ldd	r23, Y+2	; 0x02
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	9c 81       	ldd	r25, Y+4	; 0x04
 832:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 836:	dc 01       	movw	r26, r24
 838:	cb 01       	movw	r24, r22
 83a:	bc 01       	movw	r22, r24
 83c:	cd 01       	movw	r24, r26
 83e:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 842:	dc 01       	movw	r26, r24
 844:	cb 01       	movw	r24, r22
 846:	9a 87       	std	Y+10, r25	; 0x0a
 848:	89 87       	std	Y+9, r24	; 0x09
 84a:	0f c0       	rjmp	.+30     	; 0x86a <__stack+0xb>
 84c:	8c e5       	ldi	r24, 0x5C	; 92
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	9c 87       	std	Y+12, r25	; 0x0c
 852:	8b 87       	std	Y+11, r24	; 0x0b
 854:	8b 85       	ldd	r24, Y+11	; 0x0b
 856:	9c 85       	ldd	r25, Y+12	; 0x0c
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <sendChar+0xb6>
 85c:	9c 87       	std	Y+12, r25	; 0x0c
 85e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 860:	89 85       	ldd	r24, Y+9	; 0x09
 862:	9a 85       	ldd	r25, Y+10	; 0x0a
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	9a 87       	std	Y+10, r25	; 0x0a
 868:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 86a:	89 85       	ldd	r24, Y+9	; 0x09
 86c:	9a 85       	ldd	r25, Y+10	; 0x0a
 86e:	89 2b       	or	r24, r25
 870:	69 f7       	brne	.-38     	; 0x84c <sendChar+0xaa>
 872:	14 c0       	rjmp	.+40     	; 0x89c <__stack+0x3d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 874:	6d 81       	ldd	r22, Y+5	; 0x05
 876:	7e 81       	ldd	r23, Y+6	; 0x06
 878:	8f 81       	ldd	r24, Y+7	; 0x07
 87a:	98 85       	ldd	r25, Y+8	; 0x08
 87c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 880:	dc 01       	movw	r26, r24
 882:	cb 01       	movw	r24, r22
 884:	9a 87       	std	Y+10, r25	; 0x0a
 886:	89 87       	std	Y+9, r24	; 0x09
 888:	89 85       	ldd	r24, Y+9	; 0x09
 88a:	9a 85       	ldd	r25, Y+10	; 0x0a
 88c:	9e 87       	std	Y+14, r25	; 0x0e
 88e:	8d 87       	std	Y+13, r24	; 0x0d
 890:	8d 85       	ldd	r24, Y+13	; 0x0d
 892:	9e 85       	ldd	r25, Y+14	; 0x0e
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <__stack+0x35>
 898:	9e 87       	std	Y+14, r25	; 0x0e
 89a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(50);
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
 89c:	00 00       	nop
 89e:	8b e2       	ldi	r24, 0x2B	; 43
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	fc 01       	movw	r30, r24
 8a4:	80 81       	ld	r24, Z
 8a6:	88 2f       	mov	r24, r24
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	80 72       	andi	r24, 0x20	; 32
 8ac:	99 27       	eor	r25, r25
 8ae:	89 2b       	or	r24, r25
 8b0:	b1 f3       	breq	.-20     	; 0x89e <__stack+0x3f>
  {}
  // Then send the character
  UDR = Tegn;
 8b2:	8c e2       	ldi	r24, 0x2C	; 44
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	2f 85       	ldd	r18, Y+15	; 0x0f
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18

}
 8bc:	2f 96       	adiw	r28, 0x0f	; 15
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	f8 94       	cli
 8c2:	de bf       	out	0x3e, r29	; 62
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	cd bf       	out	0x3d, r28	; 61
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <sendString>:
Sends 0-terminated string.
Parameters:
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	60 97       	sbiw	r28, 0x10	; 16
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
 8e2:	98 8b       	std	Y+16, r25	; 0x10
 8e4:	8f 87       	std	Y+15, r24	; 0x0f
  // Repeat until zero-termination
  while (*s != 0)
 8e6:	7d c0       	rjmp	.+250    	; 0x9e2 <sendString+0x114>
  {
    // Send the character pointed to by "s"
    sendChar(*s);
 8e8:	8f 85       	ldd	r24, Y+15	; 0x0f
 8ea:	98 89       	ldd	r25, Y+16	; 0x10
 8ec:	fc 01       	movw	r30, r24
 8ee:	80 81       	ld	r24, Z
 8f0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <sendChar>
    // Advance the pointer one step
    s++;
 8f4:	8f 85       	ldd	r24, Y+15	; 0x0f
 8f6:	98 89       	ldd	r25, Y+16	; 0x10
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	98 8b       	std	Y+16, r25	; 0x10
 8fc:	8f 87       	std	Y+15, r24	; 0x0f
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a8 e4       	ldi	r26, 0x48	; 72
 904:	b2 e4       	ldi	r27, 0x42	; 66
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	9a 83       	std	Y+2, r25	; 0x02
 90a:	ab 83       	std	Y+3, r26	; 0x03
 90c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 90e:	26 e6       	ldi	r18, 0x66	; 102
 910:	36 e6       	ldi	r19, 0x66	; 102
 912:	46 e6       	ldi	r20, 0x66	; 102
 914:	54 e4       	ldi	r21, 0x44	; 68
 916:	69 81       	ldd	r22, Y+1	; 0x01
 918:	7a 81       	ldd	r23, Y+2	; 0x02
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	9c 81       	ldd	r25, Y+4	; 0x04
 91e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 922:	dc 01       	movw	r26, r24
 924:	cb 01       	movw	r24, r22
 926:	8d 83       	std	Y+5, r24	; 0x05
 928:	9e 83       	std	Y+6, r25	; 0x06
 92a:	af 83       	std	Y+7, r26	; 0x07
 92c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	40 e8       	ldi	r20, 0x80	; 128
 934:	5f e3       	ldi	r21, 0x3F	; 63
 936:	6d 81       	ldd	r22, Y+5	; 0x05
 938:	7e 81       	ldd	r23, Y+6	; 0x06
 93a:	8f 81       	ldd	r24, Y+7	; 0x07
 93c:	98 85       	ldd	r25, Y+8	; 0x08
 93e:	0e 94 01 05 	call	0xa02	; 0xa02 <__cmpsf2>
 942:	88 23       	and	r24, r24
 944:	2c f4       	brge	.+10     	; 0x950 <sendString+0x82>
		__ticks = 1;
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	9a 87       	std	Y+10, r25	; 0x0a
 94c:	89 87       	std	Y+9, r24	; 0x09
 94e:	3f c0       	rjmp	.+126    	; 0x9ce <sendString+0x100>
	else if (__tmp > 65535)
 950:	20 e0       	ldi	r18, 0x00	; 0
 952:	3f ef       	ldi	r19, 0xFF	; 255
 954:	4f e7       	ldi	r20, 0x7F	; 127
 956:	57 e4       	ldi	r21, 0x47	; 71
 958:	6d 81       	ldd	r22, Y+5	; 0x05
 95a:	7e 81       	ldd	r23, Y+6	; 0x06
 95c:	8f 81       	ldd	r24, Y+7	; 0x07
 95e:	98 85       	ldd	r25, Y+8	; 0x08
 960:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__gesf2>
 964:	18 16       	cp	r1, r24
 966:	4c f5       	brge	.+82     	; 0x9ba <sendString+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	40 e2       	ldi	r20, 0x20	; 32
 96e:	51 e4       	ldi	r21, 0x41	; 65
 970:	69 81       	ldd	r22, Y+1	; 0x01
 972:	7a 81       	ldd	r23, Y+2	; 0x02
 974:	8b 81       	ldd	r24, Y+3	; 0x03
 976:	9c 81       	ldd	r25, Y+4	; 0x04
 978:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 97c:	dc 01       	movw	r26, r24
 97e:	cb 01       	movw	r24, r22
 980:	bc 01       	movw	r22, r24
 982:	cd 01       	movw	r24, r26
 984:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 988:	dc 01       	movw	r26, r24
 98a:	cb 01       	movw	r24, r22
 98c:	9a 87       	std	Y+10, r25	; 0x0a
 98e:	89 87       	std	Y+9, r24	; 0x09
 990:	0f c0       	rjmp	.+30     	; 0x9b0 <sendString+0xe2>
 992:	8c e5       	ldi	r24, 0x5C	; 92
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	9c 87       	std	Y+12, r25	; 0x0c
 998:	8b 87       	std	Y+11, r24	; 0x0b
 99a:	8b 85       	ldd	r24, Y+11	; 0x0b
 99c:	9c 85       	ldd	r25, Y+12	; 0x0c
 99e:	01 97       	sbiw	r24, 0x01	; 1
 9a0:	f1 f7       	brne	.-4      	; 0x99e <sendString+0xd0>
 9a2:	9c 87       	std	Y+12, r25	; 0x0c
 9a4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9a6:	89 85       	ldd	r24, Y+9	; 0x09
 9a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 9aa:	01 97       	sbiw	r24, 0x01	; 1
 9ac:	9a 87       	std	Y+10, r25	; 0x0a
 9ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9b0:	89 85       	ldd	r24, Y+9	; 0x09
 9b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 9b4:	89 2b       	or	r24, r25
 9b6:	69 f7       	brne	.-38     	; 0x992 <sendString+0xc4>
 9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <sendString+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9ba:	6d 81       	ldd	r22, Y+5	; 0x05
 9bc:	7e 81       	ldd	r23, Y+6	; 0x06
 9be:	8f 81       	ldd	r24, Y+7	; 0x07
 9c0:	98 85       	ldd	r25, Y+8	; 0x08
 9c2:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fixunssfsi>
 9c6:	dc 01       	movw	r26, r24
 9c8:	cb 01       	movw	r24, r22
 9ca:	9a 87       	std	Y+10, r25	; 0x0a
 9cc:	89 87       	std	Y+9, r24	; 0x09
 9ce:	89 85       	ldd	r24, Y+9	; 0x09
 9d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 9d2:	9e 87       	std	Y+14, r25	; 0x0e
 9d4:	8d 87       	std	Y+13, r24	; 0x0d
 9d6:	8d 85       	ldd	r24, Y+13	; 0x0d
 9d8:	9e 85       	ldd	r25, Y+14	; 0x0e
 9da:	01 97       	sbiw	r24, 0x01	; 1
 9dc:	f1 f7       	brne	.-4      	; 0x9da <sendString+0x10c>
 9de:	9e 87       	std	Y+14, r25	; 0x0e
 9e0:	8d 87       	std	Y+13, r24	; 0x0d
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
  // Repeat until zero-termination
  while (*s != 0)
 9e2:	8f 85       	ldd	r24, Y+15	; 0x0f
 9e4:	98 89       	ldd	r25, Y+16	; 0x10
 9e6:	fc 01       	movw	r30, r24
 9e8:	80 81       	ld	r24, Z
 9ea:	88 23       	and	r24, r24
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <sendString+0x122>
 9ee:	7c cf       	rjmp	.-264    	; 0x8e8 <sendString+0x1a>
    sendChar(*s);
    // Advance the pointer one step
    s++;
	_delay_ms(50);
  }
}
 9f0:	60 96       	adiw	r28, 0x10	; 16
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	f8 94       	cli
 9f6:	de bf       	out	0x3e, r29	; 62
 9f8:	0f be       	out	0x3f, r0	; 63
 9fa:	cd bf       	out	0x3d, r28	; 61
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	08 95       	ret

00000a02 <__cmpsf2>:
 a02:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_cmp>
 a06:	08 f4       	brcc	.+2      	; 0xa0a <__cmpsf2+0x8>
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	08 95       	ret

00000a0c <__fixunssfsi>:
 a0c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_splitA>
 a10:	88 f0       	brcs	.+34     	; 0xa34 <__fixunssfsi+0x28>
 a12:	9f 57       	subi	r25, 0x7F	; 127
 a14:	98 f0       	brcs	.+38     	; 0xa3c <__fixunssfsi+0x30>
 a16:	b9 2f       	mov	r27, r25
 a18:	99 27       	eor	r25, r25
 a1a:	b7 51       	subi	r27, 0x17	; 23
 a1c:	b0 f0       	brcs	.+44     	; 0xa4a <__fixunssfsi+0x3e>
 a1e:	e1 f0       	breq	.+56     	; 0xa58 <__fixunssfsi+0x4c>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	1a f0       	brmi	.+6      	; 0xa30 <__fixunssfsi+0x24>
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__fixunssfsi+0x14>
 a2e:	14 c0       	rjmp	.+40     	; 0xa58 <__fixunssfsi+0x4c>
 a30:	b1 30       	cpi	r27, 0x01	; 1
 a32:	91 f0       	breq	.+36     	; 0xa58 <__fixunssfsi+0x4c>
 a34:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_zero>
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	08 95       	ret
 a3c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__fp_zero>
 a40:	67 2f       	mov	r22, r23
 a42:	78 2f       	mov	r23, r24
 a44:	88 27       	eor	r24, r24
 a46:	b8 5f       	subi	r27, 0xF8	; 248
 a48:	39 f0       	breq	.+14     	; 0xa58 <__fixunssfsi+0x4c>
 a4a:	b9 3f       	cpi	r27, 0xF9	; 249
 a4c:	cc f3       	brlt	.-14     	; 0xa40 <__fixunssfsi+0x34>
 a4e:	86 95       	lsr	r24
 a50:	77 95       	ror	r23
 a52:	67 95       	ror	r22
 a54:	b3 95       	inc	r27
 a56:	d9 f7       	brne	.-10     	; 0xa4e <__fixunssfsi+0x42>
 a58:	3e f4       	brtc	.+14     	; 0xa68 <__fixunssfsi+0x5c>
 a5a:	90 95       	com	r25
 a5c:	80 95       	com	r24
 a5e:	70 95       	com	r23
 a60:	61 95       	neg	r22
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	8f 4f       	sbci	r24, 0xFF	; 255
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	08 95       	ret

00000a6a <__floatunsisf>:
 a6a:	e8 94       	clt
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__floatsisf+0x12>

00000a6e <__floatsisf>:
 a6e:	97 fb       	bst	r25, 7
 a70:	3e f4       	brtc	.+14     	; 0xa80 <__floatsisf+0x12>
 a72:	90 95       	com	r25
 a74:	80 95       	com	r24
 a76:	70 95       	com	r23
 a78:	61 95       	neg	r22
 a7a:	7f 4f       	sbci	r23, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	9f 4f       	sbci	r25, 0xFF	; 255
 a80:	99 23       	and	r25, r25
 a82:	a9 f0       	breq	.+42     	; 0xaae <__floatsisf+0x40>
 a84:	f9 2f       	mov	r31, r25
 a86:	96 e9       	ldi	r25, 0x96	; 150
 a88:	bb 27       	eor	r27, r27
 a8a:	93 95       	inc	r25
 a8c:	f6 95       	lsr	r31
 a8e:	87 95       	ror	r24
 a90:	77 95       	ror	r23
 a92:	67 95       	ror	r22
 a94:	b7 95       	ror	r27
 a96:	f1 11       	cpse	r31, r1
 a98:	f8 cf       	rjmp	.-16     	; 0xa8a <__floatsisf+0x1c>
 a9a:	fa f4       	brpl	.+62     	; 0xada <__floatsisf+0x6c>
 a9c:	bb 0f       	add	r27, r27
 a9e:	11 f4       	brne	.+4      	; 0xaa4 <__floatsisf+0x36>
 aa0:	60 ff       	sbrs	r22, 0
 aa2:	1b c0       	rjmp	.+54     	; 0xada <__floatsisf+0x6c>
 aa4:	6f 5f       	subi	r22, 0xFF	; 255
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	16 c0       	rjmp	.+44     	; 0xada <__floatsisf+0x6c>
 aae:	88 23       	and	r24, r24
 ab0:	11 f0       	breq	.+4      	; 0xab6 <__floatsisf+0x48>
 ab2:	96 e9       	ldi	r25, 0x96	; 150
 ab4:	11 c0       	rjmp	.+34     	; 0xad8 <__floatsisf+0x6a>
 ab6:	77 23       	and	r23, r23
 ab8:	21 f0       	breq	.+8      	; 0xac2 <__floatsisf+0x54>
 aba:	9e e8       	ldi	r25, 0x8E	; 142
 abc:	87 2f       	mov	r24, r23
 abe:	76 2f       	mov	r23, r22
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <__floatsisf+0x5e>
 ac2:	66 23       	and	r22, r22
 ac4:	71 f0       	breq	.+28     	; 0xae2 <__floatsisf+0x74>
 ac6:	96 e8       	ldi	r25, 0x86	; 134
 ac8:	86 2f       	mov	r24, r22
 aca:	70 e0       	ldi	r23, 0x00	; 0
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	2a f0       	brmi	.+10     	; 0xada <__floatsisf+0x6c>
 ad0:	9a 95       	dec	r25
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	da f7       	brpl	.-10     	; 0xad0 <__floatsisf+0x62>
 ada:	88 0f       	add	r24, r24
 adc:	96 95       	lsr	r25
 ade:	87 95       	ror	r24
 ae0:	97 f9       	bld	r25, 7
 ae2:	08 95       	ret

00000ae4 <__fp_cmp>:
 ae4:	99 0f       	add	r25, r25
 ae6:	00 08       	sbc	r0, r0
 ae8:	55 0f       	add	r21, r21
 aea:	aa 0b       	sbc	r26, r26
 aec:	e0 e8       	ldi	r30, 0x80	; 128
 aee:	fe ef       	ldi	r31, 0xFE	; 254
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	e8 07       	cpc	r30, r24
 af6:	f9 07       	cpc	r31, r25
 af8:	c0 f0       	brcs	.+48     	; 0xb2a <__fp_cmp+0x46>
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	e4 07       	cpc	r30, r20
 b00:	f5 07       	cpc	r31, r21
 b02:	98 f0       	brcs	.+38     	; 0xb2a <__fp_cmp+0x46>
 b04:	62 1b       	sub	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	95 0b       	sbc	r25, r21
 b0c:	39 f4       	brne	.+14     	; 0xb1c <__fp_cmp+0x38>
 b0e:	0a 26       	eor	r0, r26
 b10:	61 f0       	breq	.+24     	; 0xb2a <__fp_cmp+0x46>
 b12:	23 2b       	or	r18, r19
 b14:	24 2b       	or	r18, r20
 b16:	25 2b       	or	r18, r21
 b18:	21 f4       	brne	.+8      	; 0xb22 <__fp_cmp+0x3e>
 b1a:	08 95       	ret
 b1c:	0a 26       	eor	r0, r26
 b1e:	09 f4       	brne	.+2      	; 0xb22 <__fp_cmp+0x3e>
 b20:	a1 40       	sbci	r26, 0x01	; 1
 b22:	a6 95       	lsr	r26
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	81 1d       	adc	r24, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	08 95       	ret

00000b2c <__fp_split3>:
 b2c:	57 fd       	sbrc	r21, 7
 b2e:	90 58       	subi	r25, 0x80	; 128
 b30:	44 0f       	add	r20, r20
 b32:	55 1f       	adc	r21, r21
 b34:	59 f0       	breq	.+22     	; 0xb4c <__fp_splitA+0x10>
 b36:	5f 3f       	cpi	r21, 0xFF	; 255
 b38:	71 f0       	breq	.+28     	; 0xb56 <__fp_splitA+0x1a>
 b3a:	47 95       	ror	r20

00000b3c <__fp_splitA>:
 b3c:	88 0f       	add	r24, r24
 b3e:	97 fb       	bst	r25, 7
 b40:	99 1f       	adc	r25, r25
 b42:	61 f0       	breq	.+24     	; 0xb5c <__fp_splitA+0x20>
 b44:	9f 3f       	cpi	r25, 0xFF	; 255
 b46:	79 f0       	breq	.+30     	; 0xb66 <__fp_splitA+0x2a>
 b48:	87 95       	ror	r24
 b4a:	08 95       	ret
 b4c:	12 16       	cp	r1, r18
 b4e:	13 06       	cpc	r1, r19
 b50:	14 06       	cpc	r1, r20
 b52:	55 1f       	adc	r21, r21
 b54:	f2 cf       	rjmp	.-28     	; 0xb3a <__fp_split3+0xe>
 b56:	46 95       	lsr	r20
 b58:	f1 df       	rcall	.-30     	; 0xb3c <__fp_splitA>
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <__fp_splitA+0x30>
 b5c:	16 16       	cp	r1, r22
 b5e:	17 06       	cpc	r1, r23
 b60:	18 06       	cpc	r1, r24
 b62:	99 1f       	adc	r25, r25
 b64:	f1 cf       	rjmp	.-30     	; 0xb48 <__fp_splitA+0xc>
 b66:	86 95       	lsr	r24
 b68:	71 05       	cpc	r23, r1
 b6a:	61 05       	cpc	r22, r1
 b6c:	08 94       	sec
 b6e:	08 95       	ret

00000b70 <__fp_zero>:
 b70:	e8 94       	clt

00000b72 <__fp_szero>:
 b72:	bb 27       	eor	r27, r27
 b74:	66 27       	eor	r22, r22
 b76:	77 27       	eor	r23, r23
 b78:	cb 01       	movw	r24, r22
 b7a:	97 f9       	bld	r25, 7
 b7c:	08 95       	ret

00000b7e <__gesf2>:
 b7e:	0e 94 72 05 	call	0xae4	; 0xae4 <__fp_cmp>
 b82:	08 f4       	brcc	.+2      	; 0xb86 <__gesf2+0x8>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__mulsf3>:
 b88:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3x>
 b8c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_round>
 b90:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_pscA>
 b94:	38 f0       	brcs	.+14     	; 0xba4 <__mulsf3+0x1c>
 b96:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscB>
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__mulsf3+0x1c>
 b9c:	95 23       	and	r25, r21
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__mulsf3+0x1c>
 ba0:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
 ba4:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>
 ba8:	11 24       	eor	r1, r1
 baa:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>

00000bae <__mulsf3x>:
 bae:	0e 94 96 05 	call	0xb2c	; 0xb2c <__fp_split3>
 bb2:	70 f3       	brcs	.-36     	; 0xb90 <__mulsf3+0x8>

00000bb4 <__mulsf3_pse>:
 bb4:	95 9f       	mul	r25, r21
 bb6:	c1 f3       	breq	.-16     	; 0xba8 <__mulsf3+0x20>
 bb8:	95 0f       	add	r25, r21
 bba:	50 e0       	ldi	r21, 0x00	; 0
 bbc:	55 1f       	adc	r21, r21
 bbe:	62 9f       	mul	r22, r18
 bc0:	f0 01       	movw	r30, r0
 bc2:	72 9f       	mul	r23, r18
 bc4:	bb 27       	eor	r27, r27
 bc6:	f0 0d       	add	r31, r0
 bc8:	b1 1d       	adc	r27, r1
 bca:	63 9f       	mul	r22, r19
 bcc:	aa 27       	eor	r26, r26
 bce:	f0 0d       	add	r31, r0
 bd0:	b1 1d       	adc	r27, r1
 bd2:	aa 1f       	adc	r26, r26
 bd4:	64 9f       	mul	r22, r20
 bd6:	66 27       	eor	r22, r22
 bd8:	b0 0d       	add	r27, r0
 bda:	a1 1d       	adc	r26, r1
 bdc:	66 1f       	adc	r22, r22
 bde:	82 9f       	mul	r24, r18
 be0:	22 27       	eor	r18, r18
 be2:	b0 0d       	add	r27, r0
 be4:	a1 1d       	adc	r26, r1
 be6:	62 1f       	adc	r22, r18
 be8:	73 9f       	mul	r23, r19
 bea:	b0 0d       	add	r27, r0
 bec:	a1 1d       	adc	r26, r1
 bee:	62 1f       	adc	r22, r18
 bf0:	83 9f       	mul	r24, r19
 bf2:	a0 0d       	add	r26, r0
 bf4:	61 1d       	adc	r22, r1
 bf6:	22 1f       	adc	r18, r18
 bf8:	74 9f       	mul	r23, r20
 bfa:	33 27       	eor	r19, r19
 bfc:	a0 0d       	add	r26, r0
 bfe:	61 1d       	adc	r22, r1
 c00:	23 1f       	adc	r18, r19
 c02:	84 9f       	mul	r24, r20
 c04:	60 0d       	add	r22, r0
 c06:	21 1d       	adc	r18, r1
 c08:	82 2f       	mov	r24, r18
 c0a:	76 2f       	mov	r23, r22
 c0c:	6a 2f       	mov	r22, r26
 c0e:	11 24       	eor	r1, r1
 c10:	9f 57       	subi	r25, 0x7F	; 127
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	9a f0       	brmi	.+38     	; 0xc3c <__mulsf3_pse+0x88>
 c16:	f1 f0       	breq	.+60     	; 0xc54 <__mulsf3_pse+0xa0>
 c18:	88 23       	and	r24, r24
 c1a:	4a f0       	brmi	.+18     	; 0xc2e <__mulsf3_pse+0x7a>
 c1c:	ee 0f       	add	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	bb 1f       	adc	r27, r27
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	91 50       	subi	r25, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	a9 f7       	brne	.-22     	; 0xc18 <__mulsf3_pse+0x64>
 c2e:	9e 3f       	cpi	r25, 0xFE	; 254
 c30:	51 05       	cpc	r21, r1
 c32:	80 f0       	brcs	.+32     	; 0xc54 <__mulsf3_pse+0xa0>
 c34:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
 c38:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_szero>
 c3c:	5f 3f       	cpi	r21, 0xFF	; 255
 c3e:	e4 f3       	brlt	.-8      	; 0xc38 <__mulsf3_pse+0x84>
 c40:	98 3e       	cpi	r25, 0xE8	; 232
 c42:	d4 f3       	brlt	.-12     	; 0xc38 <__mulsf3_pse+0x84>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b7 95       	ror	r27
 c4c:	f7 95       	ror	r31
 c4e:	e7 95       	ror	r30
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x90>
 c54:	fe 2b       	or	r31, r30
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__fp_inf>:
 c62:	97 f9       	bld	r25, 7
 c64:	9f 67       	ori	r25, 0x7F	; 127
 c66:	80 e8       	ldi	r24, 0x80	; 128
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	60 e0       	ldi	r22, 0x00	; 0
 c6c:	08 95       	ret

00000c6e <__fp_nan>:
 c6e:	9f ef       	ldi	r25, 0xFF	; 255
 c70:	80 ec       	ldi	r24, 0xC0	; 192
 c72:	08 95       	ret

00000c74 <__fp_pscA>:
 c74:	00 24       	eor	r0, r0
 c76:	0a 94       	dec	r0
 c78:	16 16       	cp	r1, r22
 c7a:	17 06       	cpc	r1, r23
 c7c:	18 06       	cpc	r1, r24
 c7e:	09 06       	cpc	r0, r25
 c80:	08 95       	ret

00000c82 <__fp_pscB>:
 c82:	00 24       	eor	r0, r0
 c84:	0a 94       	dec	r0
 c86:	12 16       	cp	r1, r18
 c88:	13 06       	cpc	r1, r19
 c8a:	14 06       	cpc	r1, r20
 c8c:	05 06       	cpc	r0, r21
 c8e:	08 95       	ret

00000c90 <__fp_round>:
 c90:	09 2e       	mov	r0, r25
 c92:	03 94       	inc	r0
 c94:	00 0c       	add	r0, r0
 c96:	11 f4       	brne	.+4      	; 0xc9c <__fp_round+0xc>
 c98:	88 23       	and	r24, r24
 c9a:	52 f0       	brmi	.+20     	; 0xcb0 <__fp_round+0x20>
 c9c:	bb 0f       	add	r27, r27
 c9e:	40 f4       	brcc	.+16     	; 0xcb0 <__fp_round+0x20>
 ca0:	bf 2b       	or	r27, r31
 ca2:	11 f4       	brne	.+4      	; 0xca8 <__fp_round+0x18>
 ca4:	60 ff       	sbrs	r22, 0
 ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <__fp_round+0x20>
 ca8:	6f 5f       	subi	r22, 0xFF	; 255
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	08 95       	ret

00000cb2 <__udivmodhi4>:
 cb2:	aa 1b       	sub	r26, r26
 cb4:	bb 1b       	sub	r27, r27
 cb6:	51 e1       	ldi	r21, 0x11	; 17
 cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <__udivmodhi4_ep>

00000cba <__udivmodhi4_loop>:
 cba:	aa 1f       	adc	r26, r26
 cbc:	bb 1f       	adc	r27, r27
 cbe:	a6 17       	cp	r26, r22
 cc0:	b7 07       	cpc	r27, r23
 cc2:	10 f0       	brcs	.+4      	; 0xcc8 <__udivmodhi4_ep>
 cc4:	a6 1b       	sub	r26, r22
 cc6:	b7 0b       	sbc	r27, r23

00000cc8 <__udivmodhi4_ep>:
 cc8:	88 1f       	adc	r24, r24
 cca:	99 1f       	adc	r25, r25
 ccc:	5a 95       	dec	r21
 cce:	a9 f7       	brne	.-22     	; 0xcba <__udivmodhi4_loop>
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	bc 01       	movw	r22, r24
 cd6:	cd 01       	movw	r24, r26
 cd8:	08 95       	ret

00000cda <__udivmodsi4>:
 cda:	a1 e2       	ldi	r26, 0x21	; 33
 cdc:	1a 2e       	mov	r1, r26
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	fd 01       	movw	r30, r26
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__udivmodsi4_ep>

00000ce6 <__udivmodsi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	ee 1f       	adc	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	a2 17       	cp	r26, r18
 cf0:	b3 07       	cpc	r27, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	20 f0       	brcs	.+8      	; 0xd00 <__udivmodsi4_ep>
 cf8:	a2 1b       	sub	r26, r18
 cfa:	b3 0b       	sbc	r27, r19
 cfc:	e4 0b       	sbc	r30, r20
 cfe:	f5 0b       	sbc	r31, r21

00000d00 <__udivmodsi4_ep>:
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	1a 94       	dec	r1
 d0a:	69 f7       	brne	.-38     	; 0xce6 <__udivmodsi4_loop>
 d0c:	60 95       	com	r22
 d0e:	70 95       	com	r23
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	9b 01       	movw	r18, r22
 d16:	ac 01       	movw	r20, r24
 d18:	bd 01       	movw	r22, r26
 d1a:	cf 01       	movw	r24, r30
 d1c:	08 95       	ret

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
