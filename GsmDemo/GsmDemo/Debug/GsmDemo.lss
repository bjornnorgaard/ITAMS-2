
GsmDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000276  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8f  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000944  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b1  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043d  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002b2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  7a:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initLEDport>:
#define MAX_LED_NR 7


void initLEDport(char key)
{
	switch (key)
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	69 f0       	breq	.+26     	; 0xa0 <initLEDport+0x1e>
  86:	18 f4       	brcc	.+6      	; 0x8e <initLEDport+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	31 f0       	breq	.+12     	; 0x98 <initLEDport+0x16>
  8c:	11 c0       	rjmp	.+34     	; 0xb0 <initLEDport+0x2e>
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	59 f0       	breq	.+22     	; 0xa8 <initLEDport+0x26>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	81 f0       	breq	.+32     	; 0xb6 <initLEDport+0x34>
  96:	0c c0       	rjmp	.+24     	; 0xb0 <initLEDport+0x2e>
	{
		case 'A':
		DDRA = 0b11111111;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0xFF;
  9c:	8b bb       	out	0x1b, r24	; 27
		break;
  9e:	08 95       	ret
		case 'B':
		DDRB = 0b11111111;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
		PORTB = 0xFF;
  a4:	88 bb       	out	0x18, r24	; 24
		break;
  a6:	08 95       	ret
		case 'C':
		DDRC = 0b11111111;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
		PORTC = 0xFF;
  ac:	85 bb       	out	0x15, r24	; 21
		break;
  ae:	08 95       	ret
		break;
		DDRD = 0b11111111;
		PORTD = 0xFF;
		break;
		default:
		DDRC = 0b11111111;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 bb       	out	0x14, r24	; 20
		PORTC = 0xFF;
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	08 95       	ret

000000b8 <main>:
#include "uartDriver.h"
#include "ledDriver.h"
#include "MC35Commands.h"

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	ee 97       	sbiw	r28, 0x3e	; 62
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	initializeUART(9600, 8);
  cc:	48 e0       	ldi	r20, 0x08	; 8
  ce:	60 e8       	ldi	r22, 0x80	; 128
  d0:	75 e2       	ldi	r23, 0x25	; 37
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 bb 00 	call	0x176	; 0x176 <initializeUART>
	initLEDport();
  da:	0e 94 41 00 	call	0x82	; 0x82 <initLEDport>
	
	char msg[50] = "This is a message ";
  de:	83 e1       	ldi	r24, 0x13	; 19
  e0:	e0 e6       	ldi	r30, 0x60	; 96
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x30>
  f0:	fe 01       	movw	r30, r28
  f2:	74 96       	adiw	r30, 0x14	; 20
  f4:	8f e1       	ldi	r24, 0x1F	; 31
  f6:	df 01       	movw	r26, r30
  f8:	1d 92       	st	X+, r1
  fa:	8a 95       	dec	r24
  fc:	e9 f7       	brne	.-6      	; 0xf8 <main+0x40>
	char num[12] = "24464105";
  fe:	89 e0       	ldi	r24, 0x09	; 9
 100:	e2 e9       	ldi	r30, 0x92	; 146
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	de 01       	movw	r26, r28
 106:	d3 96       	adiw	r26, 0x33	; 51
 108:	01 90       	ld	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	8a 95       	dec	r24
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x50>
 110:	1c ae       	std	Y+60, r1	; 0x3c
 112:	1d ae       	std	Y+61, r1	; 0x3d
 114:	1e ae       	std	Y+62, r1	; 0x3e
	sendSms(msg, num);
 116:	be 01       	movw	r22, r28
 118:	6d 5c       	subi	r22, 0xCD	; 205
 11a:	7f 4f       	sbci	r23, 0xFF	; 255
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	0e 94 9c 00 	call	0x138	; 0x138 <sendSms>
		
	while (1)	{}
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x6c>

00000126 <setTextMode>:
#define CTRL_Z 26
#include "MC35Commands.h"

void setTextMode()
{
	sendString("AT+CMGF=1");
 126:	8e e9       	ldi	r24, 0x9E	; 158
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
	sendString("\r\n");
 12e:	88 ea       	ldi	r24, 0xA8	; 168
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
 136:	08 95       	ret

00000138 <sendSms>:
}

void sendSms(char* message, char* phoneNumber)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	8b 01       	movw	r16, r22
	setTextMode();
 144:	0e 94 93 00 	call	0x126	; 0x126 <setTextMode>
	sendString("AT+CMGS=");
 148:	8b ea       	ldi	r24, 0xAB	; 171
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
	sendString(phoneNumber);
 150:	c8 01       	movw	r24, r16
 152:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
	sendString("\r\n");
 156:	88 ea       	ldi	r24, 0xA8	; 168
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
	sendString(message);
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 02 01 	call	0x204	; 0x204 <sendString>
	sendChar(CTRL_Z);
 164:	8a e1       	ldi	r24, 0x1A	; 26
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sendChar>
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <initializeUART>:
	// Wait for new character received
	while ( (UCSRA & (1<<7)) == 0 )
	{}
	// Then return it
	return UDR;
}
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	8b 01       	movw	r16, r22
 17c:	9c 01       	movw	r18, r24
 17e:	0e 56       	subi	r16, 0x6E	; 110
 180:	11 09       	sbc	r17, r1
 182:	21 09       	sbc	r18, r1
 184:	31 09       	sbc	r19, r1
 186:	03 39       	cpi	r16, 0x93	; 147
 188:	11 4c       	sbci	r17, 0xC1	; 193
 18a:	21 40       	sbci	r18, 0x01	; 1
 18c:	31 05       	cpc	r19, r1
 18e:	68 f5       	brcc	.+90     	; 0x1ea <initializeUART+0x74>
 190:	2b ef       	ldi	r18, 0xFB	; 251
 192:	24 0f       	add	r18, r20
 194:	24 30       	cpi	r18, 0x04	; 4
 196:	48 f5       	brcc	.+82     	; 0x1ea <initializeUART+0x74>
 198:	20 e2       	ldi	r18, 0x20	; 32
 19a:	2b b9       	out	0x0b, r18	; 11
 19c:	28 e1       	ldi	r18, 0x18	; 24
 19e:	2a b9       	out	0x0a, r18	; 10
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	45 50       	subi	r20, 0x05	; 5
 1a4:	51 09       	sbc	r21, r1
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	40 68       	ori	r20, 0x80	; 128
 1ac:	40 bd       	out	0x20, r20	; 32
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	9c 01       	movw	r18, r24
 1c4:	ad 01       	movw	r20, r26
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	44 1f       	adc	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	44 1f       	adc	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e4       	ldi	r23, 0x40	; 64
 1da:	88 e3       	ldi	r24, 0x38	; 56
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 17 01 	call	0x22e	; 0x22e <__udivmodsi4>
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	31 09       	sbc	r19, r1
 1e6:	30 bd       	out	0x20, r19	; 32
 1e8:	29 b9       	out	0x09, r18	; 9
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <sendChar>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	ef ef       	ldi	r30, 0xFF	; 255
 1f2:	f3 eb       	ldi	r31, 0xB3	; 179
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <sendChar+0x4>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <sendChar+0xa>
 1fa:	00 00       	nop
*************************************************************************/
void sendChar(char Tegn)
{
	_delay_ms(50);
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRA & (1<<5)) == 0 )
 1fc:	5d 9b       	sbis	0x0b, 5	; 11
 1fe:	fe cf       	rjmp	.-4      	; 0x1fc <sendChar+0xc>
  {}
  // Then send the character
  UDR = Tegn;
 200:	8c b9       	out	0x0c, r24	; 12
 202:	08 95       	ret

00000204 <sendString>:
Sends 0-terminated string.
Parameters:
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*s != 0)
 20a:	88 81       	ld	r24, Y
 20c:	88 23       	and	r24, r24
 20e:	61 f0       	breq	.+24     	; 0x228 <sendString+0x24>
 210:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "s"
    sendChar(*s);
 212:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sendChar>
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	93 eb       	ldi	r25, 0xB3	; 179
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <sendString+0x16>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <sendString+0x1c>
 220:	00 00       	nop
string: Pointer to the string. 
*************************************************************************/
void sendString(char* s)
{
  // Repeat until zero-termination
  while (*s != 0)
 222:	89 91       	ld	r24, Y+
 224:	81 11       	cpse	r24, r1
 226:	f5 cf       	rjmp	.-22     	; 0x212 <sendString+0xe>
    sendChar(*s);
    // Advance the pointer one step
    s++;
	_delay_ms(50);
  }
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <__udivmodsi4>:
 22e:	a1 e2       	ldi	r26, 0x21	; 33
 230:	1a 2e       	mov	r1, r26
 232:	aa 1b       	sub	r26, r26
 234:	bb 1b       	sub	r27, r27
 236:	fd 01       	movw	r30, r26
 238:	0d c0       	rjmp	.+26     	; 0x254 <__udivmodsi4_ep>

0000023a <__udivmodsi4_loop>:
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	ee 1f       	adc	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	a2 17       	cp	r26, r18
 244:	b3 07       	cpc	r27, r19
 246:	e4 07       	cpc	r30, r20
 248:	f5 07       	cpc	r31, r21
 24a:	20 f0       	brcs	.+8      	; 0x254 <__udivmodsi4_ep>
 24c:	a2 1b       	sub	r26, r18
 24e:	b3 0b       	sbc	r27, r19
 250:	e4 0b       	sbc	r30, r20
 252:	f5 0b       	sbc	r31, r21

00000254 <__udivmodsi4_ep>:
 254:	66 1f       	adc	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	88 1f       	adc	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	1a 94       	dec	r1
 25e:	69 f7       	brne	.-38     	; 0x23a <__udivmodsi4_loop>
 260:	60 95       	com	r22
 262:	70 95       	com	r23
 264:	80 95       	com	r24
 266:	90 95       	com	r25
 268:	9b 01       	movw	r18, r22
 26a:	ac 01       	movw	r20, r24
 26c:	bd 01       	movw	r22, r26
 26e:	cf 01       	movw	r24, r30
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
